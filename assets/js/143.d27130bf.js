(window.webpackJsonp=window.webpackJsonp||[]).push([[143],{1447:function(e,t,v){"use strict";v.r(t);var d=v(34),n=Object(d.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"basechipsinputfield"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#basechipsinputfield"}},[e._v("#")]),e._v(" BaseChipsInputField")]),e._v(" "),t("blockquote",[t("p",[e._v("input field with chips functionalities")])]),e._v(" "),t("h2",{attrs:{id:"props"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[e._v("#")]),e._v(" Props")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Prop name")]),e._v(" "),t("th",[e._v("Description")]),e._v(" "),t("th",[e._v("Type")]),e._v(" "),t("th",[e._v("Values")]),e._v(" "),t("th",[e._v("Default")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("id")]),e._v(" "),t("td",[e._v("if field is occurring more then once - set an id")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("selectedList")]),e._v(" "),t("td",[e._v("list of selected options (strings or objects - set "),t("code",[e._v("isStringArray")]),e._v(" "),t("code",[e._v("true")]),e._v(" if it is an array of strings),"),t("br"),e._v(" displayed as chips"),t("br"),e._v("(you can use the "),t("code",[e._v(".sync")]),e._v(" modifier on this property)")]),e._v(" "),t("td",[e._v("array")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("[]")])]),e._v(" "),t("tr",[t("td",[e._v("v-model")]),e._v(" "),t("td",[e._v("input string")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("inputType")]),e._v(" "),t("td",[e._v("specify input field type")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[t("code",[e._v("text")]),e._v(", "),t("code",[e._v("search")])]),e._v(" "),t("td",[e._v("'text'")])]),e._v(" "),t("tr",[t("td",[e._v("label")]),e._v(" "),t("td",[e._v("input field label")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("showLabel")]),e._v(" "),t("td",[e._v("define if label should be visible")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("placeholder")]),e._v(" "),t("td",[e._v("input field placeholder")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("null")])]),e._v(" "),t("tr",[t("td",[e._v("allowUnknownEntries")]),e._v(" "),t("td",[e._v("define if the user can add an option that is not in the list")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("allowMultipleEntries")]),e._v(" "),t("td",[e._v("define only a single or multiple options can be selected")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("addSelectedEntryDirectly")]),e._v(" "),t("td",[e._v("this means typed input will be added as chip directly")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("sortable")]),e._v(" "),t("td",[e._v("if "),t("code",[e._v("true")]),e._v(" a button with that functionality will be visible")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("draggable")]),e._v(" "),t("td",[e._v("define if chips should be draggable")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("alwaysLinked")]),e._v(" "),t("td",[e._v("define if entries should always appear linked (-> with grey background)")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("hoverboxContent")]),e._v(" "),t("td",[e._v("set content for the info box activatable by click."),t("br"),e._v("see "),t("a",{attrs:{href:"BaseHoverBox"}},[e._v("BaseHoverBox")]),e._v(" for more details")]),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{}")])]),e._v(" "),t("tr",[t("td",[e._v("isLoading")]),e._v(" "),t("td",[e._v("show spinner to indicate that something is loading"),t("br"),e._v("(for dynamically fetched entries that need to do backend requests)")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("sortText")]),e._v(" "),t("td",[e._v("if sorting is enabled this will be the text shown in the button")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("'Sort A â€“ Z'")])]),e._v(" "),t("tr",[t("td",[e._v("sortName")]),e._v(" "),t("td",[e._v("if "),t("code",[e._v("true")]),e._v(" sorting will consider the last string in a label or if a comma is"),t("br"),e._v("present the string before the comma")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("language")]),e._v(" "),t("td",[e._v("set a language (ISO 639-1)")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("showInputBorder")]),e._v(" "),t("td",[e._v("option to have the border of the input field not displayed")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("useFormFieldStyling")]),e._v(" "),t("td",[e._v("define if standard form field styling should be"),t("br"),e._v("used (otherwise no border, no box shadow)")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("dropDownListId")]),e._v(" "),t("td",[e._v("specify the id of a linked drop down list")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("linkedListOption")]),e._v(" "),t("td",[e._v("specify a linked list option (e.g. drop down)"),t("br"),e._v(" (will be used in "),t("code",[e._v("aria-activedescendant")]),e._v(" attribute)")]),e._v(" "),t("td",[e._v("number|string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("null")])]),e._v(" "),t("tr",[t("td",[e._v("identifierPropertyName")]),e._v(" "),t("td",[e._v("specify the object property that should be used as identifier")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("labelPropertyName")]),e._v(" "),t("td",[e._v("specify the object property that should be used as value to be displayed")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("'label'")])]),e._v(" "),t("tr",[t("td",[e._v("isStringArray")]),e._v(" "),t("td",[e._v("specify "),t("code",[e._v("true")]),e._v(" if "),t("code",[e._v("selectedList")]),e._v(" array is a array of strings")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("displayChipsInline")]),e._v(" "),t("td",[e._v("property for special case component "),t("a",{attrs:{href:"BaseChipsBelow"}},[e._v("BaseChipsBelow")]),e._v(" - if "),t("code",[e._v("false")]),e._v(" in this case chips will"),t("br"),e._v("not be displayed in the input field")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("required")]),e._v(" "),t("td",[e._v("mark as required field (currently only used for aria-required)")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("invalid")]),e._v(" "),t("td",[e._v("mark the form field as invalid and ideally also provide an error message"),t("br"),e._v("to display below the form field"),t("br"),e._v("for an example see "),t("a",{attrs:{href:"BaseInput"}},[e._v("BaseInput")])]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("disabled")]),e._v(" "),t("td",[e._v("set "),t("code",[e._v("true")]),e._v(" if input field should be disabled"),t("br"),e._v("for an example see "),t("a",{attrs:{href:"BaseInput"}},[e._v("BaseInput")])]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("errorMessage")]),e._v(" "),t("td",[e._v("add an error message to be displayed below form field if field is invalid"),t("br"),e._v("for an example see "),t("a",{attrs:{href:"BaseInput"}},[e._v("BaseInput")])]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("showErrorIcon")]),e._v(" "),t("td",[e._v("define if error icon should be shown"),t("br"),e._v("for an example see "),t("a",{attrs:{href:"BaseInput"}},[e._v("BaseInput")])]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("clearable")]),e._v(" "),t("td",[e._v("if "),t("code",[e._v("true")]),e._v(" a remove icon will be shown allowing to remove"),t("br"),e._v("all input at once"),t("br"),e._v("for an example see "),t("a",{attrs:{href:"BaseInput"}},[e._v("BaseInput")])]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("loadable")]),e._v(" "),t("td",[e._v("if "),t("code",[e._v("true")]),e._v(" space is reserved for a loader that can be activated"),t("br"),e._v("with the 'isLoading' prop")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("isActive")]),e._v(" "),t("td",[e._v("possibility to steer input field active state from outside"),t("br"),e._v("it is possible to use the "),t("code",[e._v(".sync")]),e._v(" modifier here")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("inputClass")]),e._v(" "),t("td",[e._v("specify additional input field styling")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("setFocusOnActive")]),e._v(" "),t("td",[e._v("use this prop to deactivate automatic setting of focus as soon as input element"),t("br"),e._v("becomes active - this might require external handling of focus setting!")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("chipsEditable")]),e._v(" "),t("td",[e._v("define true if chip should be editable on click"),t("br"),t("br"),t("strong",[e._v("Caveat")]),e._v(": chips can not be both draggable AND editable and it can not show"),t("br"),e._v(" "),t("code",[e._v("hoverBoxContent")]),e._v(" as soon as it is editable respectively - if both are set "),t("code",[e._v("true")]),e._v(" edit"),t("br"),e._v(" functionality takes precedent - chip will not be draggable, "),t("code",[e._v("hoverBoxContent")]),e._v(" will not"),t("br"),e._v(" be shown!")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("assistiveText")]),e._v(" "),t("td",[e._v("this prop gives the option to add assistive text for screen readers"),t("br"),e._v("properties:"),t("br"),t("br"),t("strong",[e._v("selectedOption")]),e._v(": text read when a selected option is focused (currently only"),t("br"),e._v(" working for editable chips)"),t("br"),t("strong",[e._v("loaderActive")]),e._v(": text that is announced when results are being fetched (prop"),t("br"),e._v(" "),t("code",[e._v("isLoading")]),e._v(" is set "),t("code",[e._v("true")]),e._v(")"),t("br"),t("strong",[e._v("optionAdded")]),e._v(": text read when option was added to the selected list. string {label}"),t("br"),e._v(" could be added to be replaced by the actual chip label (value in ["),t("code",[e._v("labelPropertyName")]),e._v("])"),t("br"),t("strong",[e._v("optionToRemoveSelected")]),e._v(": text read when option is marked active for removal (by using"),t("br"),e._v(" backspace in empty input field). string {label} could be added to be replaced"),t("br"),e._v(" by the actual chip label (value in ["),t("code",[e._v("labelPropertyName")]),e._v("])"),t("br"),t("strong",[e._v("optionRemoved")]),e._v(": text read when option was removed from the selected list. string {label}"),t("br"),e._v(" could be added to be replaced by the actual chip label (value in ["),t("code",[e._v("labelPropertyName")]),e._v("])")]),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{"),t("br"),e._v(" selectedOption: '',"),t("br"),e._v(" loaderActive: 'loading.',"),t("br"),e._v(" optionAdded: 'option {label} added to selected list.',"),t("br"),e._v(" optionToRemoveSelected: 'option {label} from selected list marked for removal. Press delete or backspace to remove.',"),t("br"),e._v(" optionRemoved: 'option {label} removed.'"),t("br"),e._v("}")])]),e._v(" "),t("tr",[t("td",[e._v("chipsRemovable")]),e._v(" "),t("td",[e._v("define if selected options chips should come with a remove icon"),t("br"),e._v("(usually desired usability wise just an additional option for "),t("code",[e._v("allowMultipleEntries")]),t("br"),t("code",[e._v("false")]),e._v(" if there is any other means of removal"),t("br"),e._v("(e.g. "),t("a",{attrs:{href:"#baseadvancedsearch"}},[e._v("BaseAdvancedSearch")]),e._v("))")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("interpretChipsLabelAsHtml")]),e._v(" "),t("td",[e._v("if necessary chip text can"),t("br"),e._v(" be rendered as v-html directive"),t("br"),t("br"),e._v(" "),t("strong",[e._v("caveat")]),e._v(": setting this variable "),t("code",[e._v("true")]),e._v(" can lead to XSS attacks. Only use"),t("br"),e._v(" this prop on trusted content and never on user-provided content. This is"),t("br"),e._v(" also why this will only take effect on selected chips with identifier (=selected"),t("br"),e._v(" from the options not a direct user input)")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])])])]),e._v(" "),t("h2",{attrs:{id:"events"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[e._v("#")]),e._v(" Events")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Event name")]),e._v(" "),t("th",[e._v("Properties")]),e._v(" "),t("th",[e._v("Description")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("update:is-active")]),e._v(" "),t("td",[t("strong",[e._v("undefined")]),e._v(" "),t("code",[e._v("boolean")]),e._v(" - is input field active")]),e._v(" "),t("td",[e._v("event updating the is-active prop in case of internal changes")])]),e._v(" "),t("tr",[t("td",[e._v("input")]),e._v(" "),t("td",[t("strong",[e._v("undefined")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the new input string")]),e._v(" "),t("td",[e._v("emitting the input string if changed internally")])]),e._v(" "),t("tr",[t("td",[e._v("removed")]),e._v(" "),t("td"),e._v(" "),t("td",[e._v("event emitted if option is removed from the list of selected"),t("br"),e._v("options (additionally to altered list in case parent needs to know"),t("br"),e._v("which item was removed)")])]),e._v(" "),t("tr",[t("td",[e._v("duplicate")]),e._v(" "),t("td",[t("strong",[e._v("undefined")]),e._v(" "),t("code",[e._v("Object")]),e._v(" - the option with the identical value")]),e._v(" "),t("td",[e._v("emitted when user was trying to add an option but there was already"),t("br"),e._v("an option with the same value in the list of selected options")])]),e._v(" "),t("tr",[t("td",[e._v("update:selected-list")]),e._v(" "),t("td",[t("strong",[e._v("undefined")]),e._v(" "),t("code",[e._v("(Object[], String[])")]),e._v(" - the modified list - array")]),e._v(" "),t("td",[e._v("inform parent of changes to selected option list"),t("br"),e._v("(you can use the .sync modifier on prop selectedList)")])]),e._v(" "),t("tr",[t("td",[e._v("hoverbox-active")]),e._v(" "),t("td",[t("strong",[e._v("value")]),e._v(" "),t("code",[e._v("boolean")]),e._v(" - value describing if hoverbox active is true or false"),t("br"),t("strong",[e._v("option")]),e._v(" "),t("code",[e._v("Object")]),e._v(" - the option for which the hoverbox was activated")]),e._v(" "),t("td",[e._v("event emitted on show / hide hoverbox")])])])]),e._v(" "),t("h2",{attrs:{id:"slots"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#slots"}},[e._v("#")]),e._v(" Slots")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Name")]),e._v(" "),t("th",[e._v("Description")]),e._v(" "),t("th",[e._v("Bindings")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("label-addition")]),e._v(" "),t("td",[e._v("Slot to allow for additional elements on the right side of the label row <div> (e.g. language tabs))")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("pre-input-field")]),e._v(" "),t("td",[e._v("slot to add elements within the form field but in a row before the actual input field. for an example see "),t("a",{attrs:{href:"BaseInput"}},[e._v("BaseInput")])]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("input-field-addition-before")]),e._v(" "),t("td",[e._v("Slot to allow for additional elements in the input field <div> (before <input>)")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("chip")]),e._v(" "),t("td",[e._v("a slot to provide customized chips")]),e._v(" "),t("td",[t("strong",[e._v("entry")]),e._v(" "),t("code",[e._v("object")]),e._v(" - one selected option displayed as chip"),t("br"),t("strong",[e._v("index")]),e._v(" "),t("code",[e._v("number")]),e._v(" - the index of the entry in the selectedList array"),t("br"),t("strong",[e._v("indexActiveForRemove")]),e._v(" "),t("code",[e._v("number")]),e._v(" - the index of the chip that is currently active to be removed (for keyboard handling)"),t("br"),t("strong",[e._v("removeEntry")]),e._v(" "),t("code",[e._v("function")]),e._v(" - function to remove the entry from selectedList, needs "),t("code",[e._v("entry")]),e._v(" and "),t("code",[e._v("index")]),e._v(" as arguments")])]),e._v(" "),t("tr",[t("td",[e._v("input-field-inline-before")]),e._v(" "),t("td",[e._v("to add elements directly inline before the input (contrary to "),t("code",[e._v("input-field-addition-before")]),e._v(" this does not wrap). for an example see "),t("a",{attrs:{href:"BaseInput"}},[e._v("BaseInput")])]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("input-field-addition-after")]),e._v(" "),t("td",[e._v("for adding elements after input")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("post-input-field")]),e._v(" "),t("td",[e._v("for adding elements at the end covering the whole height")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("error-icon")]),e._v(" "),t("td",[e._v("use a custom icon instead of standard error/warning icon")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("remove-icon")]),e._v(" "),t("td",[e._v("use a custom icon instead of standard remove icon")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("below-input")]),e._v(" "),t("td",[e._v("below-input slot added to e.g. add drop down")]),e._v(" "),t("td")])])]),e._v(" "),t("hr"),e._v(" "),t("h2",{attrs:{id:"demo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[e._v("#")]),e._v(" Demo")]),e._v(" "),t("p",[e._v("Simple chips input field example stand alone.")]),e._v(" "),t("p",[e._v("Additionally, to custom events, this component also has all events available emitted by the native input element (e.g. focus or blur events).")]),e._v(" "),t("p",[e._v("Also try to drag or sort the chips!")]),e._v(" "),t("no-ssr",[t("vue-live",{attrs:{layoutProps:{lang:"vue"},code:'<template>\n  <div>\n    <BaseChipsInputField\n      v-model="input"\n      :selected-list.sync="selectedList"\n      :allow-unknown-entries="true"\n      :add-selected-entry-directly="true"\n      :sortable="true"\n      :draggable="true"\n      :always-linked="true"\n      :is-string-array="true"\n      :show-error-icon="true"\n      :invalid="true"\n      placeholder="type + enter to add chips"\n      label="A simple chips input field example"\n      @focus="focused = true"\n      @blur="focused = false"\n    />\n    <div>\n      {{ "Focus: " + focused }}\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      input: "",\n      selectedList: [],\n      focused: false,\n    };\n  },\n};\n<\/script>\n',requires:{}}})],1),t("p",[e._v("Example using the 'chip' slot with all props provided by the slot. Click the chip or use backspace to remove it.")]),e._v(" "),t("no-ssr",[t("vue-live",{attrs:{layoutProps:{lang:"vue"},code:'<template>\n  <BaseChipsInputField\n    v-model="input"\n    :selected-list.sync="selectedList"\n    :allow-unknown-entries="true"\n    :add-selected-entry-directly="true"\n    :sortable="true"\n    :draggable="true"\n    :always-linked="true"\n    :is-string-array="true"\n    :invalid="true"\n    :is-loading="true"\n    placeholder="type + enter to add chips"\n    label="Slot example"\n  >\n    <template #chip="slotProps">\n      \x3c!-- if element should be draggable it needs to contain the class \'base-chip__text\' --\x3e\n      <div\n        :key="slotProps.entry.idInt"\n        :class="[\n          \'crazy-chips\',\n          \'base-chip__text\',\n          {\n            \'active-for-remove\':\n              slotProps.chipActiveForRemove === slotProps.index,\n          },\n        ]"\n        @click="slotProps.removeEntry(slotProps.entry, slotProps.index)"\n      >\n        {{ slotProps.entry.label }}\n      </div>\n    </template>\n    <template #label-addition> label-addition slot </template>\n    <template #pre-input-field>\n      <span class="pre-input-field"> pre-input-field </span>\n    </template>\n    <template #input-field-addition-before>\n      <div class="input-field-addition-before">input-field-addition-before</div>\n    </template>\n    <template #input-field-inline-before>\n      <div class="input-field-inline-before">input-field-inline-before</div>\n    </template>\n    <template #input-field-addition-after>\n      <div class="input-field-addition-after">input-field-addition-after</div>\n    </template>\n    <template #post-input-field>\n      <span class="post-input-field"> post-input-field </span>\n    </template>\n    <template #remove-icon>\n      <BaseIcon :style="{ height: \'16px\', width: \'16px\' }" name="waste-bin" />\n    </template>\n    <template #error-icon>\n      <BaseIcon :style="{ height: \'24px\', width: \'24px\' }" name="information" />\n    </template>\n    <template #below-input> below-input slot </template>\n  </BaseChipsInputField>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      input: "Test Input",\n      selectedList: [],\n    };\n  },\n};\n<\/script>\n\n<style>\n.crazy-chips {\n  display: flex;\n  background: red;\n  padding: 32px;\n  margin: 2px;\n}\n\n.active-for-remove {\n  background: blue;\n}\n\n.pre-input-field {\n  background: rosybrown;\n}\n\n.input-field-addition-before {\n  background: darkseagreen;\n  width: 100%;\n}\n.input-field-inline-before {\n  background: dodgerblue;\n}\n.input-field-addition-after {\n  background: peachpuff;\n}\n.post-input-field {\n  background: lightgoldenrodyellow;\n}\n</style>\n',requires:{}}})],1),t("p",[e._v("Also see one more example in combination with a BaseDropDownList "),t("a",{attrs:{href:"there"}},[e._v("there")]),e._v(".")])],1)}),[],!1,null,null,null);t.default=n.exports}}]);