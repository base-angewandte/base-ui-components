(window.webpackJsonp=window.webpackJsonp||[]).push([[176],{1479:function(t,n,e){"use strict";e.r(n);var o=e(34),s=Object(o.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"baseoptions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#baseoptions"}},[t._v("#")]),t._v(" BaseOptions")]),t._v(" "),n("blockquote",[n("p",[t._v("a row that can display options responsively either hidden behind an options button\nor directly")])]),t._v(" "),n("h2",{attrs:{id:"props"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[t._v("#")]),t._v(" Props")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Prop name")]),t._v(" "),n("th",[t._v("Description")]),t._v(" "),n("th",[t._v("Type")]),t._v(" "),n("th",[t._v("Values")]),t._v(" "),n("th",[t._v("Default")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("showOptions")]),t._v(" "),n("td",[t._v("set showing of option buttons from outside."),n("br"),t._v(" the "),n("a",{attrs:{href:"https://vuejs.org/v2/guide/components-custom-events.html#sync-Modifier",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v(".sync")]),t._v(" modifier"),n("OutboundLink")],1),t._v(" may be used on this prop")]),t._v(" "),n("td",[t._v("boolean")]),t._v(" "),n("td",[t._v("-")]),t._v(" "),n("td",[t._v("false")])]),t._v(" "),n("tr",[n("td",[t._v("optionsHidden")]),t._v(" "),n("td",[t._v("hide options completely (necessary if only before or after slot elements should remain)")]),t._v(" "),n("td",[t._v("boolean")]),t._v(" "),n("td",[t._v("-")]),t._v(" "),n("td",[t._v("false")])]),t._v(" "),n("tr",[n("td",[t._v("alignOptions")]),t._v(" "),n("td",[t._v("define alignment of options button and options")]),t._v(" "),n("td",[t._v("string")]),t._v(" "),n("td",[n("code",[t._v("left")]),t._v(", "),n("code",[t._v("right")])]),t._v(" "),n("td",[t._v("'right'")])]),t._v(" "),n("tr",[n("td",[t._v("useOptionsButtonOn")]),t._v(" "),n("td",[t._v("define in which scenario an options button should be shown:"),n("br"),n("br"),t._v(" "),n("strong",[t._v("always")]),t._v(": always show the options button"),n("br"),t._v(" "),n("strong",[t._v("mobile")]),t._v(": only show options button when window size < 640px"),n("br"),t._v(" "),n("strong",[t._v("never")]),t._v(": never show the options button - just show the available options directly"),n("br"),t._v(" "),n("strong",[t._v("fitted")]),t._v(": use options button whenever the actions (incl. before and after slot) do"),n("br"),t._v(" not fit the row anymore")]),t._v(" "),n("td",[t._v("string")]),t._v(" "),n("td",[n("code",[t._v("always")]),t._v(", "),n("code",[t._v("mobile")]),t._v(", "),n("code",[t._v("never")]),t._v(", "),n("code",[t._v("fitted")])]),t._v(" "),n("td",[t._v("'always'")])]),t._v(" "),n("tr",[n("td",[t._v("optionsButtonText")]),t._v(" "),n("td",[t._v("define the options button text as an object with "),n("code",[t._v("show")]),t._v(" (=text that should be"),n("br"),t._v("shown with options hidden) and "),n("code",[t._v("hide")]),t._v(" (=text that should be shown with options visible)"),n("br"),t._v(" values can be either plain strings or a string leading to a localization file."),n("br"),t._v(" (only relevant if "),n("code",[t._v("useOptionsButtonOn")]),t._v(" is different from 'never')")]),t._v(" "),n("td",[t._v("object")]),t._v(" "),n("td",[t._v("-")]),t._v(" "),n("td",[t._v("{"),n("br"),t._v(" show: 'options',"),n("br"),t._v(" hide: 'return'"),n("br"),t._v("}")])]),t._v(" "),n("tr",[n("td",[t._v("optionsButtonIcon")]),t._v(" "),n("td",[t._v("define the icon for the options button as an object with "),n("code",[t._v("show")]),t._v(" (=icon that should be"),n("br"),t._v("shown with options hidden) and "),n("code",[t._v("hide")]),t._v(" (=icon that should be shown with options visible)"),n("br"),t._v(" see "),n("a",{attrs:{href:"BaseIcon"}},[t._v("BaseIcon")]),t._v(" for available icons."),n("br"),t._v(" (only relevant if "),n("code",[t._v("useOptionsButtonOn")]),t._v(" is different from 'never')")]),t._v(" "),n("td",[t._v("object")]),t._v(" "),n("td",[t._v("-")]),t._v(" "),n("td",[t._v("{"),n("br"),t._v(" show: 'options-menu',"),n("br"),t._v(" hide: 'remove'"),n("br"),t._v("}")])]),t._v(" "),n("tr",[n("td",[t._v("showAfterOptionsBelow")]),t._v(" "),n("td",[t._v("define if slot after-options should be shown before or after options."),n("br"),t._v("if row wraps because of space issues"),n("br"),t._v(" (only relevant with use of options button)")]),t._v(" "),n("td",[t._v("boolean")]),t._v(" "),n("td",[t._v("-")]),t._v(" "),n("td",[t._v("true")])]),t._v(" "),n("tr",[n("td",[t._v("optionsConfig")]),t._v(" "),n("td",[t._v("in order to display options one can either use the slot "),n("code",[t._v("options")]),t._v(" or specify a"),n("br"),t._v("config via "),n("code",[t._v("optionsConfig")]),t._v(" prop. If the latter option is used the following properties"),n("br"),t._v("need to be provided:"),n("br"),n("br"),t._v(" "),n("strong",[t._v("text")]),t._v(" "),n("code",[t._v("string")]),t._v(" - the text displayed in the button"),n("br"),t._v(" "),n("strong",[t._v("icon")]),t._v(" "),n("code",[t._v("string")]),t._v(" - the icon name to display"),n("br"),t._v(" (for available icons see "),n("a",{attrs:{href:"BaseIcon"}},[t._v("BaseIcon")]),t._v(" )"),n("br"),t._v(" "),n("strong",[t._v("value")]),t._v(" "),n("code",[t._v("string")]),t._v(" - the value emitted on button click"),n("br"),t._v(" "),n("strong",[t._v("disabled")]),t._v(" "),n("code",[t._v("boolean?")]),t._v(" - should button be shown as disabled")]),t._v(" "),n("td",[t._v("array")]),t._v(" "),n("td",[t._v("-")]),t._v(" "),n("td",[t._v("[{"),n("br"),t._v(" text: 'delete',"),n("br"),t._v(" icon: 'waste-bin',"),n("br"),t._v(" value: 'delete',"),n("br"),t._v(" disabled: false,"),n("br"),t._v("}]")])]),t._v(" "),n("tr",[n("td",[t._v("disableOptions")]),t._v(" "),n("td",[t._v("specify an array of values set in "),n("code",[t._v("optionsConfig")]),t._v(" property "),n("code",[t._v("value")]),n("br"),t._v(" for options that should appear disabled."),n("br"),t._v(" This is equivalent to and just a more convenient way than to"),n("br"),t._v(" set the "),n("code",[t._v("optionsConfig")]),t._v(" property "),n("code",[t._v("disabled")])]),t._v(" "),n("td",[t._v("array")]),t._v(" "),n("td",[t._v("-")]),t._v(" "),n("td",[t._v("[]")])]),t._v(" "),n("tr",[n("td",[t._v("optionsButtonDisabled")]),t._v(" "),n("td",[t._v("set true if options button should be disabled"),n("br"),t._v(" not relevant for "),n("code",[t._v("useOptionsButtonOn")]),t._v(" with value "),n("code",[t._v("never")])]),t._v(" "),n("td",[t._v("boolean")]),t._v(" "),n("td",[t._v("-")]),t._v(" "),n("td",[t._v("false")])])])]),t._v(" "),n("h2",{attrs:{id:"events"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[t._v("#")]),t._v(" Events")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Event name")]),t._v(" "),n("th",[t._v("Properties")]),t._v(" "),n("th",[t._v("Description")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("update:show-options")]),t._v(" "),n("td",[n("strong",[t._v("undefined")]),t._v(" "),n("code",[t._v("boolean")]),t._v(" - was show value set true or false")]),t._v(" "),n("td",[t._v("emitted when options button is toggled (not relevant if "),n("code",[t._v("useOptionsButtonOn")]),t._v(" prop"),n("br"),t._v("is set to 'never')"),n("br"),t._v(" the "),n("code",[t._v(".sync")]),t._v(" modifier can be used on "),n("code",[t._v("showOptions")]),t._v(" prop here")])]),t._v(" "),n("tr",[n("td",[t._v("option-triggered")]),t._v(" "),n("td",[n("strong",[t._v("undefined")]),t._v(" "),n("code",[t._v("string")]),t._v(" - the value provided in "),n("code",[t._v("optionsConfig")]),t._v(" object")]),t._v(" "),n("td",[t._v("emitted if prop "),n("code",[t._v("optionsConfig")]),t._v(" is used when an options button is clicked")])])])]),t._v(" "),n("h2",{attrs:{id:"slots"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#slots"}},[t._v("#")]),t._v(" Slots")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Name")]),t._v(" "),n("th",[t._v("Description")]),t._v(" "),n("th",[t._v("Bindings")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("beforeOptions")]),t._v(" "),n("td",[t._v("add an element before the options e.g. a header")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("options")]),t._v(" "),n("td",[t._v("add the actual options")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("afterOptions")]),t._v(" "),n("td",[t._v("add elements after the options element")]),t._v(" "),n("td")])])]),t._v(" "),n("hr"),t._v(" "),n("h2",{attrs:{id:"demo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[t._v("#")]),t._v(" Demo")]),t._v(" "),n("p",[t._v("A simple example with options button and different "),n("code",[t._v("useOptionsButtonOn")]),t._v(" settings.\nResize to see the 'mobile' effect!")]),t._v(" "),n("no-ssr",[n("vue-live",{attrs:{layoutProps:{lang:"vue"},code:'<template>\n  <div class="options-background">\n    <BaseOptions\n      :show-options.sync="optionsToggle"\n      :options-config="[\n        {\n          text: \'button added via optionsConfig\',\n          icon: \'eye\',\n          value: \'show\',\n        },\n        {\n          text: \'and a disabled button\',\n          icon: \'waste-bin\',\n          value: \'delete\',\n          disabled: true,\n        },\n      ]"\n      :use-options-button-on="useOptionsButtonOn"\n    >\n    </BaseOptions>\n    <p class="options-settings">Choose settings:</p>\n    <div class="button-switches">\n      <BaseButton\n        :active="useOptionsButtonOn === \'always\'"\n        button-style="row"\n        text="always"\n        class="button-switch"\n        @clicked="useOptionsButtonOn = \'always\'"\n      />\n      <BaseButton\n        :active="useOptionsButtonOn === \'never\'"\n        button-style="row"\n        text="never"\n        class="button-switch"\n        @clicked="useOptionsButtonOn = \'never\'"\n      />\n      <BaseButton\n        :active="useOptionsButtonOn === \'mobile\'"\n        button-style="row"\n        text="mobile"\n        class="button-switch"\n        @clicked="useOptionsButtonOn = \'mobile\'"\n      />\n      <BaseButton\n        :active="useOptionsButtonOn === \'fitted\'"\n        button-style="row"\n        text="fitted"\n        class="button-switch"\n        @clicked="useOptionsButtonOn = \'fitted\'"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      optionsToggle: false,\n      useOptionsButtonOn: "always",\n    };\n  },\n};\n<\/script>\n\n<style>\n.options-background {\n  background: rgb(240, 240, 240);\n}\n.button-switches {\n  display: flex;\n  flex-direction: row;\n}\n.button-switch {\n  margin: 8px;\n}\n.options-settings {\n  margin: 16px 0 8px 16px;\n}\n</style>\n',requires:{}}})],1),n("p",[t._v("Advanced example with all slots filled. Choose different settings for available properties below and resize to see the different effects!")]),t._v(" "),n("no-ssr",[n("vue-live",{attrs:{layoutProps:{lang:"vue"},code:'<template>\n  <div class="options-background">\n    <BaseOptions\n      :use-options-button-on="useOptionsButtonOn"\n      :options-hidden="optionsHidden"\n      :show-options.sync="optionsToggle"\n      :show-after-options-below="showAfterOptionsBelow"\n      :options-button-disabled="optionsButtonDisabled"\n      :align-options="alignOptions"\n    >\n      <template #beforeOptions>\n        <div>beforeOptions slot</div>\n      </template>\n      <template #options>\n        <BaseButton\n          :text="\'added via slot\'"\n          :has-background-color="false"\n          icon-size="large"\n          icon="eye"\n          button-style="single"\n        />\n        <BaseButton\n          :text="\'second action\'"\n          :has-background-color="false"\n          icon-size="large"\n          icon="waste-bin"\n          button-style="single"\n        />\n      </template>\n      <template #afterOptions>\n        <div>afterOptions slot element</div>\n      </template>\n    </BaseOptions>\n    <p class="options-settings">Choose settings:</p>\n    <div class="button-switches">\n      <BaseButton\n        :active="showAfterOptionsBelow"\n        button-style="row"\n        text="show after options below"\n        class="button-switch"\n        @clicked="showAfterOptionsBelow = !showAfterOptionsBelow"\n      />\n      <BaseButton\n        :active="alignOptions === \'left\'"\n        button-style="row"\n        text="Align Options Left"\n        class="button-switch"\n        @clicked="alignOptions = \'left\'"\n      />\n      <BaseButton\n        :active="alignOptions === \'right\'"\n        button-style="row"\n        text="Align Options Right"\n        class="button-switch"\n        @clicked="alignOptions = \'right\'"\n      />\n      <BaseButton\n        :active="optionsHidden"\n        button-style="row"\n        text="Hide Options"\n        class="button-switch"\n        @clicked="optionsHidden = !optionsHidden"\n      />\n      <BaseButton\n        :active="optionsButtonDisabled"\n        button-style="row"\n        text="Disable Options Button"\n        class="button-switch"\n        @clicked="optionsButtonDisabled = !optionsButtonDisabled"\n      />\n    </div>\n    <p class="options-settings">\n      Choose setting for \'useOptionsButtonOn\' prop:\n    </p>\n    <div class="button-switches">\n      <BaseButton\n        :active="useOptionsButtonOn === \'always\'"\n        button-style="row"\n        text="always"\n        class="button-switch"\n        @clicked="useOptionsButtonOn = \'always\'"\n      />\n      <BaseButton\n        :active="useOptionsButtonOn === \'never\'"\n        button-style="row"\n        text="never"\n        class="button-switch"\n        @clicked="useOptionsButtonOn = \'never\'"\n      />\n      <BaseButton\n        :active="useOptionsButtonOn === \'mobile\'"\n        button-style="row"\n        text="mobile"\n        class="button-switch"\n        @clicked="useOptionsButtonOn = \'mobile\'"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      optionsToggle: false,\n      optionsHidden: false,\n      showAfterOptionsBelow: true,\n      alignOptions: "right",\n      useOptionsButtonOn: "always",\n      optionsButtonDisabled: false,\n    };\n  },\n};\n<\/script>\n<style>\n.options-background {\n  background: rgb(240, 240, 240);\n  padding: 16px;\n}\n.button-switches {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n}\n.button-switch {\n  margin: 8px;\n}\n.options-settings {\n  margin: 16px 0 8px 16px;\n}\n</style>\n',requires:{}}})],1),n("p",[t._v("An more real-life example with after options slot rendered below options if space runs out.")]),t._v(" "),n("no-ssr",[n("vue-live",{attrs:{layoutProps:{lang:"vue"},code:'<template>\n  <div class="options-background">\n    <BaseOptions\n      :use-options-button-on="\'always\'"\n      :show-options.sync="showCheckbox"\n      :show-after-options-below="true"\n      align-options="left"\n    >\n      <template #afterOptions>\n        <div ref="afterOptions" class="sidebar-drop-downs">\n          <BaseDropDown\n            v-model="sortParam"\n            :placeholder="\'Sort By\'"\n            :label="\'Sort by\'"\n            :options="sortOptions"\n            :with-spacing="false"\n            class="sidebar-dropdown"\n          />\n          <BaseDropDown\n            v-model="filterType"\n            :label="\'filter by type\'"\n            :options="entryTypes"\n            :language="\'en\'"\n            :with-spacing="false"\n            value-prop="source"\n            align-drop-down="right"\n            class="sidebar-dropdown"\n          />\n        </div>\n      </template>\n      <template #options>\n        <BaseButton\n          :text="\'Publish\'"\n          :has-background-color="false"\n          icon-size="large"\n          icon="eye"\n          button-style="single"\n          @clicked="actionAlert(\'publish\')"\n        />\n        <BaseButton\n          :text="\'Take offline\'"\n          :has-background-color="false"\n          icon-size="large"\n          icon="forbidden"\n          button-style="single"\n          @clicked="actionAlert(\'offline\')"\n        />\n        <BaseButton\n          :text="\'Duplicate\'"\n          :has-background-color="false"\n          icon-size="large"\n          icon="duplicate"\n          button-style="single"\n          @clicked="actionAlert(\'duplicate\')"\n        />\n        <BaseButton\n          :text="\'Delete\'"\n          :has-background-color="false"\n          icon-size="large"\n          icon="waste-bin"\n          button-style="single"\n          @clicked="actionAlert(\'delete\')"\n        />\n      </template>\n    </BaseOptions>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      showCheckbox: false,\n      entryTypes: [\n        {\n          label: "Option 1",\n          id: "Option 1",\n        },\n        {\n          label: "Option 2",\n          id: "Option 2",\n        },\n      ],\n      filterType: {\n        label: "No Filter",\n        id: "",\n      },\n      sortOptions: [\n        {\n          label: "Option 1",\n          id: "Option 1",\n        },\n        {\n          label: "Option 2",\n          id: "Option 2",\n        },\n      ],\n      sortParam: {\n        label: "Option 1",\n        id: "Option 1",\n      },\n    };\n  },\n  methods: {\n    actionAlert(event) {\n      alert(event);\n    },\n  },\n};\n<\/script>\n\n<style>\n.sidebar-dropdown {\n  margin: 0 16px;\n}\n.options-background {\n  background: rgb(240, 240, 240);\n  padding: 16px;\n}\n</style>\n',requires:{}}})],1)],1)}),[],!1,null,null,null);n.default=s.exports}}]);