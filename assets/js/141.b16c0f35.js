(window.webpackJsonp=window.webpackJsonp||[]).push([[141],{1442:function(e,t,n){"use strict";n.r(t);var o=n(34),a=Object(o.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"basechipsbelow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#basechipsbelow"}},[e._v("#")]),e._v(" BaseChipsBelow")]),e._v(" "),t("blockquote",[t("p",[e._v("A very specialized component based on "),t("a",{attrs:{href:"BaseChipsInput"}},[e._v("BaseChipsInput")]),e._v("\nin order to assign additional values (e.g. roles) to selected entries)]")])]),e._v(" "),t("h2",{attrs:{id:"props"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[e._v("#")]),e._v(" Props")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Prop name")]),e._v(" "),t("th",[e._v("Description")]),e._v(" "),t("th",[e._v("Type")]),e._v(" "),t("th",[e._v("Values")]),e._v(" "),t("th",[e._v("Default")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("list")]),e._v(" "),t("td",[e._v("list of selectable options objects with at least an identifier and a label property."),t("br"),e._v("property names can be set with props "),t("code",[e._v("identifierPropertyName")]),e._v(" and "),t("code",[e._v("labelPropertyName")])]),e._v(" "),t("td",[e._v("array")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("[]")])]),e._v(" "),t("tr",[t("td",[e._v("v-model")]),e._v(" "),t("td",[e._v("list of already selected options objects with at least an identifier and a label property"),t("br"),e._v("and a property to use for the secondary drop down ('additional property'), displayed as"),t("br"),e._v("chips."),t("br"),e._v("property names can be set with props "),t("code",[e._v("identifierPropertyName")]),e._v(", "),t("code",[e._v("labelPropertyName")]),e._v(" and"),t("br"),t("code",[e._v("additionalPropertyName")])]),e._v(" "),t("td",[e._v("array")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("[]")])]),e._v(" "),t("tr",[t("td",[e._v("id")]),e._v(" "),t("td",[e._v("if field is occurring more than once - set an id")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("label")]),e._v(" "),t("td",[e._v("input field label")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("showLabel")]),e._v(" "),t("td",[e._v("define if label should be visible")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("placeholder")]),e._v(" "),t("td",[e._v("input field placeholder")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("null")])]),e._v(" "),t("tr",[t("td",[e._v("dropDownNoOptionsInfo")]),e._v(" "),t("td",[e._v("message displayed when no selectable options are available")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("'No options available'")])]),e._v(" "),t("tr",[t("td",[e._v("allowUnknownEntries")]),e._v(" "),t("td",[e._v("define if the user can add an option that is not in the list")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("allowMultipleEntries")]),e._v(" "),t("td",[e._v("define whether one or more entries can be selected from the drop-down menu")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("allowDynamicDropDownEntries")]),e._v(" "),t("td",[e._v("define if selectable list options should be fetched every time of if the"),t("br"),e._v("list passed in the beginning is used")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("addSelectedEntryDirectly")]),e._v(" "),t("td",[e._v("this prop was added because there was some action needed to be done before entry was added"),t("br"),e._v("so this is possible if entry is not added to selectedList directly but only in parent"),t("br"),e._v("component")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("additionalPropAllowMultipleEntries")]),e._v(" "),t("td",[e._v("define whether one or more options can be selected from the drop-down menu")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("additionalPropOptions")]),e._v(" "),t("td",[e._v("Additional property options will set the drop down available for the selected entries"),t("br"),e._v("needs to be an object with following attributes:"),t("br"),t("strong",[e._v("label|*")]),e._v(" "),t("code",[e._v("string")]),e._v(": the label of the default option - use the property name set via prop "),t("code",[e._v("labelPropertyName")]),t("br"),t("strong",[e._v("id|*")]),e._v(" "),t("code",[e._v("string?")]),e._v(": (optional) identifier of the default option - use the property name set via prop "),t("code",[e._v("identifierPropertyName")])]),e._v(" "),t("td",[e._v("array")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("[]")])]),e._v(" "),t("tr",[t("td",[e._v("additionalPropDefaultOption")]),e._v(" "),t("td",[e._v("define a default option for additional props"),t("br"),e._v("see "),t("code",[e._v("defaultEntry")]),e._v(" at "),t("a",{attrs:{href:"BaseChipsInput"}},[e._v("BaseChipsInput props")]),e._v(" for more details")]),e._v(" "),t("td",[e._v("object|null")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("null")])]),e._v(" "),t("tr",[t("td",[e._v("additionalPropRequired")]),e._v(" "),t("td",[e._v("specify additional options as required")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("additionalPropPlaceholder")]),e._v(" "),t("td",[e._v("specify a placeholder of the additional property input field")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("'Select role(s)'")])]),e._v(" "),t("tr",[t("td",[e._v("validationTexts")]),e._v(" "),t("td",[e._v("define validation messages")]),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{"),t("br"),e._v(" required: 'Select an option.'"),t("br"),e._v("}")])]),e._v(" "),t("tr",[t("td",[e._v("hoverboxContent")]),e._v(" "),t("td",[e._v("set content for the info box activatable by click"),t("br"),e._v("see "),t("a",{attrs:{href:"BaseHoverBox"}},[e._v("BaseHoverBox")]),e._v(" for more details")]),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{}")])]),e._v(" "),t("tr",[t("td",[e._v("isLoading")]),e._v(" "),t("td",[e._v("show spinner to indicate that something is loading."),t("br"),e._v(" This is meant for dynamically fetching entries from a backend and will only"),t("br"),e._v(" have an effect if prop "),t("code",[e._v("allowDynamicDropDownEntries")]),e._v(" is set true!")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("sortText")]),e._v(" "),t("td",[e._v("if sorting is enabled this will be the text shown in the button")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("'Sort A â€“ Z'")])]),e._v(" "),t("tr",[t("td",[e._v("sortName")]),e._v(" "),t("td",[e._v("if "),t("code",[e._v("true")]),e._v(" sorting will consider the last string in a label or if a comma is"),t("br"),e._v("present the string before the comma")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("language")]),e._v(" "),t("td",[e._v("set a language (ISO 639-1)")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("addNewChipText")]),e._v(" "),t("td",[e._v("set a chips text for adding a new chip"),t("br"),e._v("(alternatively add a 'form.Add' value to your localization files)."),t("br"),e._v("if "),t("code",[e._v("allowUnknownEntries")]),e._v(" is "),t("code",[e._v("true")]),e._v(" please add this in one form or another!")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("identifierPropertyName")]),e._v(" "),t("td",[e._v("specify the object property that should be used as identifier")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("'id'")])]),e._v(" "),t("tr",[t("td",[e._v("labelPropertyName")]),e._v(" "),t("td",[e._v("specify the object property that should be used as value to be displayed")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("'label'")])]),e._v(" "),t("tr",[t("td",[e._v("additionalPropertyName")]),e._v(" "),t("td",[e._v("define the name of the property that is relevant for the additional drop down"),t("br"),e._v("once a value was selected from the primary drop down")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("'roles'")])]),e._v(" "),t("tr",[t("td",[e._v("required")]),e._v(" "),t("td",[e._v("mark as required field")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("invalid")]),e._v(" "),t("td",[e._v("mark the form field as invalid and ideally also provide an error message"),t("br"),e._v("to display below the form field."),t("br"),e._v("for an example see "),t("a",{attrs:{href:"BaseInput"}},[e._v("BaseInput")])]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("disabled")]),e._v(" "),t("td",[e._v("set "),t("code",[e._v("true")]),e._v(" if input field should be disabled."),t("br"),e._v("for an example see "),t("a",{attrs:{href:"BaseInput"}},[e._v("BaseInput")])]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("errorMessage")]),e._v(" "),t("td",[e._v("add an error message to be displayed below form field if field is invalid"),t("br"),e._v("for an example see "),t("a",{attrs:{href:"BaseInput"}},[e._v("BaseInput")])]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("showErrorIcon")]),e._v(" "),t("td",[e._v("define if error icon should be shown."),t("br"),e._v("for an example see "),t("a",{attrs:{href:"BaseInput"}},[e._v("BaseInput")])]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("clearable")]),e._v(" "),t("td",[e._v("if true a remove icon will be shown allowing to remove"),t("br"),e._v("all input at once."),t("br"),e._v("for an example see "),t("a",{attrs:{href:"BaseInput"}},[e._v("BaseInput")])]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("closeDropdownOnOptionSelect")]),e._v(" "),t("td",[e._v("set "),t("code",[e._v("false")]),e._v(" if dropdown should be still open after selecting an option")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("inputClass")]),e._v(" "),t("td",[e._v("specify additional input field styling")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("sortable")]),e._v(" "),t("td",[e._v("define if a button for sorting the entries is visible")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("draggable")]),e._v(" "),t("td",[e._v("define if chips should be draggable")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("highlightStringMatch")]),e._v(" "),t("td",[e._v("set this flag to "),t("code",[e._v("true")]),e._v(" to highlight autocomplete option characters that match"),t("br"),e._v(" the current search input string"),t("br"),e._v(" this will only have effect when the slot "),t("code",[e._v("drop-down-entry")]),e._v(" is not used")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("highlightStringTags")]),e._v(" "),t("td",[e._v("if "),t("code",[e._v("highlightAutocompleteMatch")]),e._v(" is set "),t("code",[e._v("true")]),t("br"),e._v(" provide tag names to style the matched characters"),t("br"),e._v(" (without '<' and '>', e.g. ['b'] for <b>)"),t("br"),e._v(" this will only have effect when the slot "),t("code",[e._v("drop-down-entry")]),e._v(" is not used")]),e._v(" "),t("td",[e._v("array")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("[]")])]),e._v(" "),t("tr",[t("td",[e._v("assistiveText")]),e._v(" "),t("td",[e._v("this prop gives the option to add assistive text for screen readers"),t("br"),e._v("properties:"),t("br"),t("strong",[e._v("loaderActive")]),e._v(": text that is announced when results are being fetched (prop"),t("br"),e._v(" "),t("code",[e._v("isLoading")]),e._v(" is set "),t("code",[e._v("true")]),e._v(")"),t("br"),t("strong",[e._v("resultsRetrieved")]),e._v(": text that is announced when results were retrieved (drop down"),t("br"),e._v(" list changed)"),t("br"),t("strong",[e._v("optionAdded")]),e._v(": text read when option was added to the selected list. string {label}"),t("br"),e._v(" could be added to be replaced by the actual chip label (value in ["),t("code",[e._v("labelPropertyName")]),e._v("])"),t("br"),t("strong",[e._v("optionRemoved")]),e._v(": text read when option was removed from the selected list. string {label}"),t("br"),e._v(" could be added to be replaced by the actual chip label (value in ["),t("code",[e._v("labelPropertyName")]),e._v("])")]),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{"),t("br"),e._v(" loaderActive: 'loading.',"),t("br"),e._v(" resultsRetrieved: '{number} options in drop down.',"),t("br"),e._v(" optionAdded: 'option {label} added to selected list.',"),t("br"),e._v(" optionRemoved: 'option {label} removed.'"),t("br"),e._v("}")])])])]),e._v(" "),t("h2",{attrs:{id:"methods"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),t("h3",{attrs:{id:"validate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#validate"}},[e._v("#")]),e._v(" validate")]),e._v(" "),t("blockquote",[t("p",[e._v("Validation can be triggered by executing e.g. "),t("code",[e._v("this.$refs.baseChipsBelow.validate();")]),e._v(" from parent."),t("br"),e._v("\nTherefore, the component must have a reference set.")])]),e._v(" "),t("h4",{attrs:{id:"return"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#return"}},[e._v("#")]),e._v(" Return")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Type")]),e._v(" "),t("th",[e._v("Description")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("components error state")])])])]),e._v(" "),t("h2",{attrs:{id:"events"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[e._v("#")]),e._v(" Events")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Event name")]),e._v(" "),t("th",[e._v("Properties")]),e._v(" "),t("th",[e._v("Description")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("additional-property-changed")]),e._v(" "),t("td",[t("strong",[e._v("obj")]),e._v(" "),t("code",[e._v("Object")]),e._v(" - changed object")]),e._v(" "),t("td",[e._v("propagate additional-property-changed change event to parent"),t("br"),e._v("Note: useful when validation is done from the parent")])]),e._v(" "),t("tr",[t("td",[e._v("selected-changed")]),e._v(" "),t("td",[t("strong",[e._v("undefined")]),e._v(" "),t("code",[e._v("Object")]),e._v(" - the altered list")]),e._v(" "),t("td",[e._v("propagate list change from dragging event to parent")])]),e._v(" "),t("tr",[t("td",[e._v("fetch-dropdown-entries")]),e._v(" "),t("td",[t("strong",[e._v("value")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the input string"),t("br"),t("strong",[e._v("type")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the "),t("code",[e._v("labelPropertyName")]),e._v(" that was specified")]),e._v(" "),t("td",[e._v("if drop down entries dynamically set - fetch new entries on input")])]),e._v(" "),t("tr",[t("td",[e._v("hoverbox-active")]),e._v(" "),t("td",[t("strong",[e._v("value")]),e._v(" "),t("code",[e._v("boolean")]),e._v(" - value describing if hoverbox active is "),t("code",[e._v("true")]),e._v(" or "),t("code",[e._v("false")]),t("br"),t("strong",[e._v("option")]),e._v(" "),t("code",[e._v("Object")]),e._v(" - the option for which the hoverbox was activated")]),e._v(" "),t("td",[e._v("event emitted on show / hide hoverbox")])])])]),e._v(" "),t("h2",{attrs:{id:"slots"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#slots"}},[e._v("#")]),e._v(" Slots")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Name")]),e._v(" "),t("th",[e._v("Description")]),e._v(" "),t("th",[e._v("Bindings")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("drop-down-entry")]),e._v(" "),t("td",[e._v("a slot to provide customized drop down options")]),e._v(" "),t("td",[t("strong",[e._v("item")]),e._v(" "),t("code",[e._v("Object")]),e._v(" - an option in the options list")])]),e._v(" "),t("tr",[t("td",[e._v("label-addition")]),e._v(" "),t("td",[e._v("Slot to allow for additional elements on the right side of the label row <div> (e.g. language tabs)). for an example see "),t("a",{attrs:{href:"BaseChipsInputField"}},[e._v("BaseChipsInputField")])]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("input-field-addition-before")]),e._v(" "),t("td",[e._v("Slot to allow for additional elements in the input field <div> (before <input>). for an example see "),t("a",{attrs:{href:"BaseChipsInputField"}},[e._v("BaseChipsInputField")])]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("input-field-addition-after")]),e._v(" "),t("td",[e._v("for adding elements after input")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("post-input-field")]),e._v(" "),t("td",[e._v("for adding elements at the end covering the whole height. for an example see "),t("a",{attrs:{href:"BaseChipsInputField"}},[e._v("BaseChipsInputField")])]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("error-icon")]),e._v(" "),t("td",[e._v("use a custom icon instead of standard error/warning icon. for an example see "),t("a",{attrs:{href:"BaseChipsInputField"}},[e._v("BaseChipsInputField")])]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("remove-icon")]),e._v(" "),t("td",[e._v("use a custom icon instead of standard remove icon. for an example see "),t("a",{attrs:{href:"BaseChipsInputField"}},[e._v("BaseChipsInputField")])]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("no-options")]),e._v(" "),t("td",[e._v("a slot to customize messages in case of no options present in drop down")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("below-input")]),e._v(" "),t("td"),e._v(" "),t("td")])])]),e._v(" "),t("hr"),e._v(" "),t("h2",{attrs:{id:"demo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[e._v("#")]),e._v(" Demo")]),e._v(" "),t("p",[e._v("A simple chips input form field with chips displayed below\nand default (base project specific) role selection")]),e._v(" "),t("no-ssr",[t("vue-live",{attrs:{layoutProps:{lang:"vue"},code:"<template>\n  <div class=\"container\">\n    <BaseChipsBelow\n      v-model=\"selectedList\"\n      :chips-editable=\"true\"\n      :list=\"[\n        {\n          id: 'Herbert Marcuse',\n          label: 'Herbert Marcuse',\n        },\n        {\n          id: 'Erich From',\n          label: 'Erich From',\n        },\n        {\n          id: 'Georg Weerth',\n          label: 'Georg Weerth',\n        },\n      ]\"\n      :additional-prop-options=\"[\n        {\n          label: 'Actor',\n        },\n        {\n          label: 'Magician',\n        },\n        {\n          label: 'Priest',\n        },\n        {\n          label: 'Farmer',\n        },\n      ]\"\n      label=\"Select a Person\"\n    >\n      <template #drop-down-entry=\"{ item }\">\n        {{ item.label }}\n      </template>\n    </BaseChipsBelow>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      selectedList: [],\n    };\n  },\n};\n<\/script>\n",requires:{}}})],1),t("h2",{attrs:{id:"demo-with-optional-validation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo-with-optional-validation"}},[e._v("#")]),e._v(" Demo with optional validation")]),e._v(" "),t("p",[e._v("A chips input form field with chips displayed below and optional validation")]),e._v(" "),t("no-ssr",[t("vue-live",{attrs:{layoutProps:{lang:"vue"},code:'<template>\n  <div style="background-color: rgb(240, 240, 240); padding: 16px;">\n    <div class="controls">\n      <BaseToggle\n        v-model="required"\n        label="at least one person is required"\n        class="control"\n      />\n      <BaseToggle\n        v-model="additionalPropRequired"\n        label="additional option is required"\n        class="control"\n      />\n      <BaseToggle\n        v-model="additionalPropAllowMultipleEntries"\n        label="allow multiple additional options"\n        class="control"\n      />\n      <BaseToggle\n        v-model="defaultOption"\n        label="set default additional options"\n        class="control"\n        @clicked="setDefaultOption"\n      />\n      <BaseToggle v-model="sortable" label="sort entries" class="control" />\n    </div>\n    <div style="background-color: #fff; padding: 16px;">\n      <BaseChipsBelow\n        ref="baseChipsBelow"\n        v-model="selectedList"\n        :list="list"\n        :draggable="false"\n        :sortable="sortable"\n        :required="required"\n        :show-error-icon="true"\n        :additional-prop-allow-multiple-entries="\n          additionalPropAllowMultipleEntries\n        "\n        :additional-prop-options="additionalPropOptions"\n        :additional-prop-required="additionalPropRequired"\n        :additional-prop-default-option="additionalPropDefaultOption"\n        additional-prop-placeholder="Select Role"\n        label="Invite persons to edit"\n        placeholder="Select persons"\n      >\n        <template #drop-down-entry="{ item }">\n          {{ item.label }}\n        </template>\n      </BaseChipsBelow>\n    </div>\n    <template v-if="required || additionalPropRequired">\n      <BaseButton\n        button-style="row"\n        style="margin: 8px 0;"\n        text="Validate"\n        @clicked="validate()"\n      />\n      <div>Errors: {{ hasError }}</div>\n    </template>\n  </div>\n</template>\n\n<script>\nexport default {\n  components: {},\n  data() {\n    return {\n      // settable options\n      additionalPropAllowMultipleEntries: false,\n      required: true,\n      additionalPropRequired: false,\n      sortable: false,\n      defaultOption: false,\n      // data\n      additionalPropOptions: [\n        {\n          label: "Read",\n          default: true,\n        },\n        {\n          label: "Edit",\n        },\n      ],\n      additionalPropDefaultOption: null,\n      hasError: "not validated yet.",\n      // Note: set optional default role value(s)\n      list: [\n        {\n          id: "Herbert Marcuse",\n          label: "Herbert Marcuse",\n        },\n        {\n          id: "Erich From",\n          label: "Erich From",\n        },\n        {\n          id: "Georg Weerth",\n          label: "Georg Weerth",\n        },\n      ],\n      selectedList: [\n        // prefill list\n        // {\n        //   id: \'Florian Bettel\',\n        //   label: \'Florian Bettel\',\n        //   roles: [{ label: \'Edit\' }],\n        // },\n      ],\n    };\n  },\n  mounted() {\n    this.setDefaultOption(this.defaultOption);\n  },\n  methods: {\n    /**\n     * set additional prop options\n     * @param {boolean} val\n     * @returns {Object|null} - list of options\n     */\n    setDefaultOption(val) {\n      this.additionalPropDefaultOption = val\n        ? this.getDefaultObj(\n            JSON.parse(JSON.stringify(this.additionalPropOptions))\n          )\n        : null;\n    },\n    /**\n     * get default obj (where attribute default is defined)\n     * @param {Object[]} data - list of options\n     * @returns {Object|null} - default object or null\n     */\n    getDefaultObj(data) {\n      const defaultObj = data.find((obj) => obj.default);\n\n      if (defaultObj === undefined) return null;\n\n      delete defaultObj.default;\n      return defaultObj;\n    },\n    /**\n     * validate component from outside\n     */\n    validate() {\n      this.hasError = this.$refs.baseChipsBelow.validate();\n    },\n  },\n};\n<\/script>\n\n<style>\n.base-input .base-input__label-row .base-input__label {\n  font-weight: bold;\n  color: #000000 !important;\n}\n\n.controls {\n  margin-bottom: 8px;\n}\n</style>\n',requires:{}}})],1)],1)}),[],!1,null,null,null);t.default=a.exports}}]);