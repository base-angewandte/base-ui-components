(window.webpackJsonp=window.webpackJsonp||[]).push([[174],{1477:function(t,e,v){"use strict";v.r(e);var _=v(34),a=Object(_.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"basemultilinetextinput"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#basemultilinetextinput"}},[t._v("#")]),t._v(" BaseMultilineTextInput")]),t._v(" "),e("blockquote",[e("p",[t._v("A multiline textfield base component")])]),t._v(" "),e("h2",{attrs:{id:"props"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[t._v("#")]),t._v(" Props")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Prop name")]),t._v(" "),e("th",[t._v("Description")]),t._v(" "),e("th",[t._v("Type")]),t._v(" "),e("th",[t._v("Values")]),t._v(" "),e("th",[t._v("Default")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("v-model")]),t._v(" "),e("td",[t._v("input displayed in the textarea."),e("br"),t._v(" if "),e("code",[t._v("tabs")]),t._v(" prop is set, this needs to be an object with properties corresponding to"),e("br"),t._v(" tab names.")]),t._v(" "),e("td",[t._v("object|string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("''")])]),t._v(" "),e("tr",[e("td",[t._v("label")]),t._v(" "),e("td",[t._v("set the label for the input component")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("''")])]),t._v(" "),e("tr",[e("td",[t._v("showLabel")]),t._v(" "),e("td",[t._v("set "),e("code",[t._v("true")]),t._v(" if label should be visible")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("placeholder")]),t._v(" "),e("td",[t._v("set input field placeholder")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("''")])]),t._v(" "),e("tr",[e("td",[t._v("tabs")]),t._v(" "),e("td",[t._v("set tabs for the input field")]),t._v(" "),e("td",[t._v("array")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("['default']")])]),t._v(" "),e("tr",[e("td",[t._v("tabLabels")]),t._v(" "),e("td",[t._v("give the possibility to specify what should be displayed in the tabs")]),t._v(" "),e("td",[t._v("array")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("[]")])]),t._v(" "),e("tr",[e("td",[t._v("activeTab")]),t._v(" "),e("td",[t._v("set the currently active tab (specify the property of the object not the label)")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("function() {"),e("br"),t._v(" return this.tabs[0] || 'default';"),e("br"),t._v("}")])]),t._v(" "),e("tr",[e("td",[t._v("tabsLegend")]),t._v(" "),e("td",[t._v("set a legend for the tabs to be read (for accessibility only, hidden)")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("'Radiogroup'")])]),t._v(" "),e("tr",[e("td",[t._v("id")]),t._v(" "),e("td",[t._v("set id which is used for label + id")]),t._v(" "),e("td",[t._v("string|number")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("''")])]),t._v(" "),e("tr",[e("td",[t._v("language")]),t._v(" "),e("td",[t._v("set a language (ISO 639-1)")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("''")])]),t._v(" "),e("tr",[e("td",[t._v("required")]),t._v(" "),e("td",[t._v("mark as required field (currently only used for "),e("code",[t._v("aria-required")]),t._v(")")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("invalid")]),t._v(" "),e("td",[t._v("mark the form field as invalid and ideally also provide an error message"),e("br"),t._v("to display below the form field."),e("br"),t._v("for an example see "),e("a",{attrs:{href:"BaseInput"}},[t._v("BaseInput")])]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("disabled")]),t._v(" "),e("td",[t._v("set true if input field should be disabled."),e("br"),t._v("for an example see "),e("a",{attrs:{href:"BaseInput"}},[t._v("BaseInput")])]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("errorMessage")]),t._v(" "),e("td",[t._v("add an error message to be displayed below form field if field is invalid."),e("br"),t._v("for an example see "),e("a",{attrs:{href:"BaseInput"}},[t._v("BaseInput")])]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("''")])]),t._v(" "),e("tr",[e("td",[t._v("showErrorIcon")]),t._v(" "),e("td",[t._v("define if error icon should be shown."),e("br"),t._v("for an example see "),e("a",{attrs:{href:"BaseInput"}},[t._v("BaseInput")])]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("clearable")]),t._v(" "),e("td",[t._v("if true a remove icon will be shown allowing to remove"),e("br"),t._v("all input at once."),e("br"),t._v("for an example see "),e("a",{attrs:{href:"BaseInput"}},[t._v("BaseInput")])]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])])])]),t._v(" "),e("h2",{attrs:{id:"events"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[t._v("#")]),t._v(" Events")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Event name")]),t._v(" "),e("th",[t._v("Properties")]),t._v(" "),e("th",[t._v("Description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("input")]),t._v(" "),e("td",[e("strong",[t._v("undefined")]),t._v(" "),e("code",[t._v("string, Object")]),t._v(" - the altered field input")]),t._v(" "),e("td",[t._v("Event emitted on input, passing input string or input object")])])])]),t._v(" "),e("h2",{attrs:{id:"slots"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#slots"}},[t._v("#")]),t._v(" Slots")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Name")]),t._v(" "),e("th",[t._v("Description")]),t._v(" "),e("th",[t._v("Bindings")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("label-addition")]),t._v(" "),e("td",[t._v("to add drop down needed for text input field (base specific) or any other element deemed necessary")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("input-field-addition-before")]),t._v(" "),e("td",[t._v("Slot to allow for additional elements in the input field <div> (before <input>)")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("input-field-addition-after")]),t._v(" "),e("td",[t._v("for adding elements after input")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("post-input-field")]),t._v(" "),e("td",[t._v("elements after the actual input element but within the input field container. for an example see "),e("a",{attrs:{href:"BaseChipsInputField"}},[t._v("BaseChipsInputField")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("error-icon")]),t._v(" "),e("td",[t._v("use a custom icon instead of standard error/warning icon. for an example see "),e("a",{attrs:{href:"BaseChipsInputField"}},[t._v("BaseChipsInputField")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("remove-icon")]),t._v(" "),e("td",[t._v("use a custom icon instead of standard remove icon. for an example see "),e("a",{attrs:{href:"BaseChipsInputField"}},[t._v("BaseChipsInputField")])]),t._v(" "),e("td")])])]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"demo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[t._v("#")]),t._v(" Demo")]),t._v(" "),e("p",[t._v("Basic example with no extra settings")]),t._v(" "),e("no-ssr",[e("vue-live",{attrs:{layoutProps:{lang:"vue"},code:'<template>\n  <div>\n    <BaseMultilineTextInput\n      label="Simple Multiline Label"\n      placeholder="Enter Text here"\n      v-model="textInput"\n    />\n    <div>{{ "Your text was: " + textInput }}</div>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      textInput: "",\n    };\n  },\n};\n<\/script>\n',requires:{}}})],1),e("p",[t._v("Example with Tabs")]),t._v(" "),e("no-ssr",[e("vue-live",{attrs:{layoutProps:{lang:"vue"},code:'<template>\n  <div>\n    <BaseMultilineTextInput\n      :tabs="[\'de\', \'en\']"\n      :tab-labels="[\'German\', \'English\']"\n      label="Multiline Label Tabs"\n      placeholder="Enter Text here"\n      v-model="textInput"\n    />\n    <div v-for="item of Object.keys(textInput)" :key="item">\n      <span>{{ item + ": " + textInput[item] }}</span>\n    </div>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      textInput: {\n        en: "Text Set from Outside",\n        de: "",\n      },\n    };\n  },\n};\n<\/script>\n',requires:{}}})],1)],1)}),[],!1,null,null,null);e.default=a.exports}}]);