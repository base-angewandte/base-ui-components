(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{1353:function(t,e,v){"use strict";v.r(e);var n=v(35),d=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"basechipsinputfield"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#basechipsinputfield"}},[t._v("#")]),t._v(" BaseChipsInputField")]),t._v(" "),e("blockquote",[e("p",[t._v("input field with chips functionalities")])]),t._v(" "),e("h2",{attrs:{id:"props"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[t._v("#")]),t._v(" Props")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Prop name")]),t._v(" "),e("th",[t._v("Description")]),t._v(" "),e("th",[t._v("Type")]),t._v(" "),e("th",[t._v("Values")]),t._v(" "),e("th",[t._v("Default")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("id")]),t._v(" "),e("td",[t._v("if field is occurring more then once - set an id")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("''")])]),t._v(" "),e("tr",[e("td",[t._v("selectedList")]),t._v(" "),e("td",[t._v("list of selected options (strings or objects), displayed as chips"),e("br"),t._v("(you can use the "),e("code",[t._v(".sync")]),t._v(" modifier on this property)")]),t._v(" "),e("td",[t._v("array")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("[]")])]),t._v(" "),e("tr",[e("td",[t._v("v-model")]),t._v(" "),e("td",[t._v("input string")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("''")])]),t._v(" "),e("tr",[e("td",[t._v("label")]),t._v(" "),e("td",[t._v("input field label")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("showLabel")]),t._v(" "),e("td",[t._v("define if label should be visible")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("placeholder")]),t._v(" "),e("td",[t._v("input field placeholder")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("allowUnknownEntries")]),t._v(" "),e("td",[t._v("define if the user can add an option that is not in the list")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("allowMultipleEntries")]),t._v(" "),e("td",[t._v("define only a single or multiple options can be selected")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("addSelectedEntryDirectly")]),t._v(" "),e("td",[t._v("this means typed input will be added as chip directly")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("sortable")]),t._v(" "),e("td",[t._v("if "),e("code",[t._v("true")]),t._v(" a button with that functionality will be visible")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("draggable")]),t._v(" "),e("td",[t._v("define if chips should be draggable")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("alwaysLinked")]),t._v(" "),e("td",[t._v("define if entries should always appear linked (-> with grey background)")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("hoverboxContent")]),t._v(" "),e("td",[t._v("set content for the info box activatable by click."),e("br"),t._v("see "),e("a",{attrs:{href:"BaseHoverBox"}},[t._v("BaseHoverBox")]),t._v(" for more details")]),t._v(" "),e("td",[t._v("object")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("{}")])]),t._v(" "),e("tr",[e("td",[t._v("isLoading")]),t._v(" "),e("td",[t._v("show spinner to indicate that something is loading"),e("br"),t._v("(for dynamically fetched entries that need to do backend requests)")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("sortText")]),t._v(" "),e("td",[t._v("if sorting is enabled this will be the text shown in the button")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("'Sort A â€“ Z'")])]),t._v(" "),e("tr",[e("td",[t._v("sortName")]),t._v(" "),e("td",[t._v("if "),e("code",[t._v("true")]),t._v(" sorting will consider the last string in a label or if a comma is"),e("br"),t._v("present the string before the comma")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("language")]),t._v(" "),e("td",[t._v("set a language (ISO 639-1)")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("''")])]),t._v(" "),e("tr",[e("td",[t._v("showInputBorder")]),t._v(" "),e("td",[t._v("option to have the border of the input field not displayed")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("useFormFieldStyling")]),t._v(" "),e("td",[t._v("define if standard form field styling should be"),e("br"),t._v("used (otherwise no border, no box shadow)")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("dropDownListId")]),t._v(" "),e("td",[t._v("specify the id of a linked drop down list")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("''")])]),t._v(" "),e("tr",[e("td",[t._v("linkedListOption")]),t._v(" "),e("td",[t._v("specify a linked list option (e.g. drop down)"),e("br"),t._v(" (will be used in "),e("code",[t._v("aria-activedescendant")]),t._v(" attribute)")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("identifierPropertyName")]),t._v(" "),e("td",[t._v("specify the object property that should be used as identifier")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("''")])]),t._v(" "),e("tr",[e("td",[t._v("labelPropertyName")]),t._v(" "),e("td",[t._v("specify the object property that should be used as value to be displayed")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("'label'")])]),t._v(" "),e("tr",[e("td",[t._v("isStringArray")]),t._v(" "),e("td",[t._v("specify "),e("code",[t._v("true")]),t._v(" if "),e("code",[t._v("selectedList")]),t._v(" array is a array of strings")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("displayChipsInline")]),t._v(" "),e("td",[t._v("property for special case component "),e("a",{attrs:{href:"BaseChipsBelow"}},[t._v("BaseChipsBelow")]),t._v(" - if "),e("code",[t._v("false")]),t._v(" in this case chips will"),e("br"),t._v("not be displayed in the input field")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("required")]),t._v(" "),e("td",[t._v("mark as required field (currently only used for aria-required)")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("invalid")]),t._v(" "),e("td",[t._v("mark the form field as invalid and ideally also provide an error message"),e("br"),t._v("to display below the form field"),e("br"),t._v("for an example see "),e("a",{attrs:{href:"BaseInput"}},[t._v("BaseInput")])]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("disabled")]),t._v(" "),e("td",[t._v("set "),e("code",[t._v("true")]),t._v(" if input field should be disabled"),e("br"),t._v("for an example see "),e("a",{attrs:{href:"BaseInput"}},[t._v("BaseInput")])]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("errorMessage")]),t._v(" "),e("td",[t._v("add an error message to be displayed below form field if field is invalid"),e("br"),t._v("for an example see "),e("a",{attrs:{href:"BaseInput"}},[t._v("BaseInput")])]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("''")])]),t._v(" "),e("tr",[e("td",[t._v("showErrorIcon")]),t._v(" "),e("td",[t._v("define if error icon should be shown"),e("br"),t._v("for an example see "),e("a",{attrs:{href:"BaseInput"}},[t._v("BaseInput")])]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("clearable")]),t._v(" "),e("td",[t._v("if "),e("code",[t._v("true")]),t._v(" a remove icon will be shown allowing to remove"),e("br"),t._v("all input at once"),e("br"),t._v("for an example see "),e("a",{attrs:{href:"BaseInput"}},[t._v("BaseInput")])]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("loadable")]),t._v(" "),e("td",[t._v("if "),e("code",[t._v("true")]),t._v(" space is reserved for a loader that can be activated"),e("br"),t._v("with the 'isLoading' prop")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("isActive")]),t._v(" "),e("td",[t._v("possibility to steer input field active state from outside"),e("br"),t._v("it is possible to use the "),e("code",[t._v(".sync")]),t._v(" modifier here")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("inputClass")]),t._v(" "),e("td",[t._v("specify additional input field styling")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("''")])]),t._v(" "),e("tr",[e("td",[t._v("setFocusOnActive")]),t._v(" "),e("td",[t._v("use this prop to deactivate automatic setting of focus as soon as input element"),e("br"),t._v("becomes active - this might require external handling of focus setting!")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("chipsEditable")]),t._v(" "),e("td",[t._v("define true if chip should be editable on click"),e("br"),e("br"),e("strong",[t._v("Caveat")]),t._v(": chips can not be both draggable AND editable and it can not show"),e("br"),t._v(" "),e("code",[t._v("hoverBoxContent")]),t._v(" as soon as it is editable respectively - if both are set "),e("code",[t._v("true")]),t._v(" edit"),e("br"),t._v(" functionality takes precedent - chip will not be draggable, "),e("code",[t._v("hoverBoxContent")]),t._v(" will not"),e("br"),t._v(" be shown!")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("assistiveText")]),t._v(" "),e("td",[t._v("this prop gives the option to add assistive text for screen readers"),e("br"),t._v("properties:"),e("br"),e("br"),e("strong",[t._v("selectedOption")]),t._v(": text read when a selected option is focused (currently only"),e("br"),t._v(" working for editable chips)")]),t._v(" "),e("td",[t._v("object")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("{}")])]),t._v(" "),e("tr",[e("td",[t._v("chipsRemovable")]),t._v(" "),e("td",[t._v("define if selected options chips should come with a remove icon"),e("br"),t._v("(usually desired usability wise just an additional option for "),e("code",[t._v("allowMultipleEntries")]),e("br"),e("code",[t._v("false")]),t._v(" if there is any other means of removal"),e("br"),t._v("(e.g. "),e("a",{attrs:{href:"#baseadvancedsearch"}},[t._v("BaseAdvancedSearch")]),t._v("))")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("true")])])])]),t._v(" "),e("h2",{attrs:{id:"events"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[t._v("#")]),t._v(" Events")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Event name")]),t._v(" "),e("th",[t._v("Properties")]),t._v(" "),e("th",[t._v("Description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("update:is-active")]),t._v(" "),e("td",[e("strong",[t._v("undefined")]),t._v(" "),e("code",[t._v("boolean")]),t._v(" - is input field active")]),t._v(" "),e("td",[t._v("event updating the is-active prop in case of internal changes")])]),t._v(" "),e("tr",[e("td",[t._v("input")]),t._v(" "),e("td",[e("strong",[t._v("undefined")]),t._v(" "),e("code",[t._v("string")]),t._v(" - the new input string")]),t._v(" "),e("td",[t._v("emitting the input string if changed internally")])]),t._v(" "),e("tr",[e("td",[t._v("removed")]),t._v(" "),e("td"),t._v(" "),e("td",[t._v("event emitted if option is removed from the list of selected"),e("br"),t._v("options (additionally to altered list in case parent needs to know"),e("br"),t._v("which item was removed)")])]),t._v(" "),e("tr",[e("td",[t._v("duplicate")]),t._v(" "),e("td",[e("strong",[t._v("undefined")]),t._v(" "),e("code",[t._v("Object")]),t._v(" - the option with the identical value")]),t._v(" "),e("td",[t._v("emitted when user was trying to add an option but there was already"),e("br"),t._v("an option with the same value in the list of selected options")])]),t._v(" "),e("tr",[e("td",[t._v("update:selected-list")]),t._v(" "),e("td",[e("strong",[t._v("undefined")]),t._v(" "),e("code",[t._v("(Object[], String[])")]),t._v(" - the modified list - array")]),t._v(" "),e("td",[t._v("inform parent of changes to selected option list"),e("br"),t._v("(you can use the .sync modifier on prop selectedList)")])]),t._v(" "),e("tr",[e("td",[t._v("hoverbox-active")]),t._v(" "),e("td",[e("strong",[t._v("value")]),t._v(" "),e("code",[t._v("boolean")]),t._v(" - value describing if hoverbox active is true or false"),e("br"),e("strong",[t._v("option")]),t._v(" "),e("code",[t._v("Object")]),t._v(" - the option for which the hoverbox was activated")]),t._v(" "),e("td",[t._v("event emitted on show / hide hoverbox")])])])]),t._v(" "),e("h2",{attrs:{id:"slots"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#slots"}},[t._v("#")]),t._v(" Slots")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Name")]),t._v(" "),e("th",[t._v("Description")]),t._v(" "),e("th",[t._v("Bindings")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("label-addition")]),t._v(" "),e("td",[t._v("Slot to allow for additional elements on the right side of the label row <div> (e.g. language tabs))")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("pre-input-field")]),t._v(" "),e("td",[t._v("slot to add elements within the form field but in a row before the actual input field. for an example see "),e("a",{attrs:{href:"BaseInput"}},[t._v("BaseInput")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("input-field-addition-before")]),t._v(" "),e("td",[t._v("Slot to allow for additional elements in the input field <div> (before <input>)")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("chip")]),t._v(" "),e("td",[t._v("a slot to provide customized chips")]),t._v(" "),e("td",[e("strong",[t._v("entry")]),t._v(" "),e("code",[t._v("object")]),t._v(" - one selected option displayed as chip"),e("br"),e("strong",[t._v("index")]),t._v(" "),e("code",[t._v("number")]),t._v(" - the index of the entry in the selectedList array"),e("br"),e("strong",[t._v("chipActiveForRemove")]),t._v(" "),e("code",[t._v("number")]),t._v(" - the index of the chip that is currently active to be removed (for keyboard handling)"),e("br"),e("strong",[t._v("removeEntry")]),t._v(" "),e("code",[t._v("function")]),t._v(" - function to remove the entry from selectedList, needs "),e("code",[t._v("entry")]),t._v(" and "),e("code",[t._v("index")]),t._v(" as arguments")])]),t._v(" "),e("tr",[e("td",[t._v("input-field-inline-before")]),t._v(" "),e("td",[t._v("to add elements directly inline before the input (contrary to "),e("code",[t._v("input-field-addition-before")]),t._v(" this does not wrap). for an example see "),e("a",{attrs:{href:"BaseInput"}},[t._v("BaseInput")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("input-field-addition-after")]),t._v(" "),e("td",[t._v("for adding elements after input")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("post-input-field")]),t._v(" "),e("td",[t._v("for adding elements at the end covering the whole height")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("error-icon")]),t._v(" "),e("td",[t._v("use a custom icon instead of standard error/warning icon")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("remove-icon")]),t._v(" "),e("td",[t._v("use a custom icon instead of standard remove icon")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("below-input")]),t._v(" "),e("td",[t._v("below-input slot added to e.g. add drop down")]),t._v(" "),e("td")])])]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"demo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[t._v("#")]),t._v(" Demo")]),t._v(" "),e("p",[t._v("Simple chips input field example stand alone.")]),t._v(" "),e("p",[t._v("Additionally, to custom events, this component also has all events available emitted by the native input element (e.g. focus or blur events).")]),t._v(" "),e("p",[t._v("Also try to drag or sort the chips!")]),t._v(" "),e("no-ssr",[e("vue-live",{attrs:{layoutProps:{lang:"vue"},code:'<template>\n  <div>\n    <BaseChipsInputField\n      v-model="input"\n      :selected-list.sync="selectedList"\n      :allow-unknown-entries="true"\n      :add-selected-entry-directly="true"\n      :sortable="true"\n      :draggable="true"\n      :always-linked="true"\n      :is-string-array="true"\n      :show-error-icon="true"\n      :invalid="true"\n      placeholder="type + enter to add chips"\n      label="A simple chips input field example"\n      @focus="focused = true"\n      @blur="focused = false"\n    />\n    <div>\n      {{ "Focus: " + focused }}\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      input: "",\n      selectedList: [],\n      focused: false\n    };\n  }\n};\n<\/script>\n',requires:{}}})],1),e("p",[t._v("Example using the 'chip' slot with all props provided by the slot. Click the chip or use backspace to remove it.")]),t._v(" "),e("no-ssr",[e("vue-live",{attrs:{layoutProps:{lang:"vue"},code:'<template>\n  <BaseChipsInputField\n    v-model="input"\n    :selected-list.sync="selectedList"\n    :allow-unknown-entries="true"\n    :add-selected-entry-directly="true"\n    :sortable="true"\n    :draggable="true"\n    :always-linked="true"\n    :is-string-array="true"\n    :invalid="true"\n    :is-loading="true"\n    placeholder="type + enter to add chips"\n    label="Slot example"\n  >\n    <template #chip="slotProps">\n      \x3c!-- if element should be draggable it needs to contain the class \'base-chip__text\' --\x3e\n      <div\n        :key="slotProps.entry.idInt"\n        :class="[\n          \'crazy-chips\',\n          \'base-chip__text\',\n          {\n            \'active-for-remove\':\n              slotProps.chipActiveForRemove === slotProps.index\n          }\n        ]"\n        @click="slotProps.removeEntry(slotProps.entry, slotProps.index)"\n      >\n        {{ slotProps.entry.label }}\n      </div>\n    </template>\n    <template #label-addition>\n      label-addition slot\n    </template>\n    <template #pre-input-field>\n      <span class="pre-input-field">\n        pre-input-field\n      </span>\n    </template>\n    <template #input-field-addition-before>\n      <div class="input-field-addition-before">input-field-addition-before</div>\n    </template>\n    <template #input-field-inline-before>\n      <div class="input-field-inline-before">\n        input-field-inline-before\n      </div>\n    </template>\n    <template #input-field-addition-after>\n      <div class="input-field-addition-after">input-field-addition-after</div>\n    </template>\n    <template #post-input-field>\n      <span class="post-input-field">\n        post-input-field\n      </span>\n    </template>\n    <template #remove-icon>\n      <BaseIcon :style="{ height: \'16px\', width: \'16px\' }" name="waste-bin" />\n    </template>\n    <template #error-icon>\n      <BaseIcon :style="{ height: \'24px\', width: \'24px\' }" name="information" />\n    </template>\n    <template #below-input>\n      below-input slot\n    </template>\n  </BaseChipsInputField>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      input: "Test Input",\n      selectedList: []\n    };\n  }\n};\n<\/script>\n\n<style>\n.crazy-chips {\n  display: flex;\n  background: red;\n  padding: 32px;\n  margin: 2px;\n}\n\n.active-for-remove {\n  background: blue;\n}\n\n.pre-input-field {\n  background: rosybrown;\n}\n\n.input-field-addition-before {\n  background: darkseagreen;\n  width: 100%;\n}\n.input-field-inline-before {\n  background: dodgerblue;\n}\n.input-field-addition-after {\n  background: peachpuff;\n}\n.post-input-field {\n  background: lightgoldenrodyellow;\n}\n</style>\n',requires:{}}})],1),e("p",[t._v("Also see one more example in combination with a BaseDropDownList "),e("a",{attrs:{href:"there"}},[t._v("there")]),t._v(".")])],1)}),[],!1,null,null,null);e.default=d.exports}}]);