(window.webpackJsonp=window.webpackJsonp||[]).push([[155],{1457:function(e,t,n){"use strict";n.r(t);var r=n(34),o=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"baseform"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#baseform"}},[e._v("#")]),e._v(" BaseForm")]),e._v(" "),t("h2",{attrs:{id:"props"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[e._v("#")]),e._v(" Props")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Prop name")]),e._v(" "),t("th",[e._v("Description")]),e._v(" "),t("th",[e._v("Type")]),e._v(" "),t("th",[e._v("Values")]),e._v(" "),t("th",[e._v("Default")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("formFieldJson")]),e._v(" "),t("td",[e._v("the json object containing all the field information incl. "),t("code",[e._v("x-attrs")]),e._v(" custom field"),t("br"),e._v("for placeholder, field type, etc. (for further documentation and configuration options see"),t("br"),e._v("further down below "),t("RouterLink",{attrs:{to:"/components/BaseForm.html#slots"}},[e._v("slots")]),e._v(")")],1),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("valueList")]),e._v(" "),t("td",[e._v("the values for each field if any already present")]),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{}")])]),e._v(" "),t("tr",[t("td",[e._v("language")]),e._v(" "),t("td",[e._v("set current language")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("'en'")])]),e._v(" "),t("tr",[t("td",[e._v("availableLocales")]),e._v(" "),t("td",[e._v("provide information about all available languages")]),e._v(" "),t("td",[e._v("array")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("[]")])]),e._v(" "),t("tr",[t("td",[e._v("formId")]),e._v(" "),t("td",[e._v("an id for field groups to still have unique field ids")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("formStyle")]),e._v(" "),t("td",[e._v("define additional style for the form"),t("br"),e._v("should be an object e.g. "),t("code",[e._v("{ 'padding-top': 0 }")])]),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{}")])]),e._v(" "),t("tr",[t("td",[e._v("fieldsWithTabs")]),e._v(" "),t("td",[e._v("define fields (specify field name!) for which tabs should be shown")]),e._v(" "),t("td",[e._v("array")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("[]")])]),e._v(" "),t("tr",[t("td",[e._v("fieldIsLoading")]),e._v(" "),t("td",[e._v("enter the field name of a field that is currently fetching autocomplete"),t("br"),e._v("results")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("dropDownLists")]),e._v(" "),t("td",[e._v("provide an object that contains the options list for all"),t("br"),e._v("fields with autocomplete / chips input"),t("br"),e._v("for field type "),t("code",[e._v("group")]),e._v(" provide a nested object with field names"),t("br"),e._v("as properties and an array for each field to ensure the correct options are assigned"),t("br"),e._v("even if field names within different groups are identical")]),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{}")])]),e._v(" "),t("tr",[t("td",[e._v("showErrorIcon")]),e._v(" "),t("td",[e._v("define if error icon should be shown."),t("br"),e._v("for an example on how it looks on an individual form field see "),t("a",{attrs:{href:"BaseInput"}},[e._v("BaseInput")])]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("clearable")]),e._v(" "),t("td",[e._v("if "),t("code",[e._v("true")]),e._v(" a remove icon will be shown allowing to remove"),t("br"),e._v("all input at once."),t("br"),e._v("for an example on how it looks on an individual form field see "),t("a",{attrs:{href:"BaseInput"}},[e._v("BaseInput")])]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("fieldProps")]),e._v(" "),t("td",[e._v("provide an object with settings and properties for each field. This takes an object"),t("br"),e._v("with the field name as properties with the props nested."),t("br"),t("code",[e._v("{ [fieldName1]: { required: false, ... }, [fieldName2]: { ... } }")]),t("br"),t("br"),e._v("find the possible variables at the respective input components:"),t("br"),t("a",{attrs:{href:"BaseInput"}},[e._v("BaseInput")]),t("br"),t("a",{attrs:{href:"BaseAutocompleteInput"}},[e._v("BaseAutocompleteInput")]),t("br"),t("a",{attrs:{href:"BaseMultilineTextInput"}},[e._v("BaseMultilineTextInput")]),t("br"),t("a",{attrs:{href:"BaseChipsInput"}},[e._v("BaseChipsInput")]),t("br"),t("a",{attrs:{href:"BaseChipsBelow"}},[e._v("BaseChipsBelow")]),t("br"),t("a",{attrs:{href:"BaseDateInput"}},[e._v("BaseDateInput")]),t("br"),t("a",{attrs:{href:"BaseToggle"}},[e._v("BaseToggle")]),t("br"),t("br"),t("strong",[e._v("special case repeatable fields")]),e._v(": the following field props can be set individually"),t("br"),e._v("per repeated field:"),t("br"),e._v(" "),t("code",[e._v("errorMessage")]),e._v(", "),t("code",[e._v("invalid")]),e._v(", "),t("code",[e._v("isActive")]),e._v(", "),t("code",[e._v("isLoading")]),e._v(","),t("br"),e._v(" "),t("code",[e._v("linkedListOption")]),e._v(", "),t("code",[e._v("activeTab")]),t("br"),e._v(" the field property value should be set as object specifying the field index as key:"),t("br"),e._v(" "),t("code",[e._v("{ [fieldIndex]: [value to be set] }")]),e._v(" (e.g. "),t("code",[e._v("{ required: { 0: false }}")]),e._v(")")]),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{}")])]),e._v(" "),t("tr",[t("td",[e._v("renderHeaderAs")]),e._v(" "),t("td",[e._v("in case the field "),t("code",[e._v("form_group_title")]),e._v(" was added to the "),t("code",[e._v("x-attrs")]),e._v(" field, this is"),t("br"),e._v("is rendered as a header above the form and here the HTML tag may be defined.")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("'div'")])]),e._v(" "),t("tr",[t("td",[e._v("validationTexts")]),e._v(" "),t("td",[e._v("define validation texts to be displayed below form field if input is invalid."),t("br"),e._v("for an example see "),t("a",{attrs:{href:"BaseInput"}},[e._v("BaseInput")])]),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{"),t("br"),e._v(" text: {"),t("br"),e._v(" min: 'Value must be greater than or equal to {value}.',"),t("br"),e._v(" max: 'Value must be less than or equal to {value}.',"),t("br"),e._v(" minLength: 'Text must be at least {value} character(s) long.',"),t("br"),e._v(" maxLength: 'Text cannot be longer than {value} characters.',"),t("br"),e._v(" },"),t("br"),t("br"),e._v(" chips: {"),t("br"),e._v(" required: 'Select an option.',"),t("br"),e._v(" }"),t("br"),e._v("}")])]),e._v(" "),t("tr",[t("td",[e._v("identifierPropertyName")]),e._v(" "),t("td",[e._v("specify the object property that should be used as identifier."),t("br"),e._v("used for chips input as well as dropdowns.")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("'source'")])]),e._v(" "),t("tr",[t("td",[e._v("labelPropertyName")]),e._v(" "),t("td",[e._v("specify the object property that should be used as value to be displayed."),t("br"),e._v("used for chips input as well as dropdowns.")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("'label'")])]),e._v(" "),t("tr",[t("td",[e._v("assistiveText")]),e._v(" "),t("td",[e._v("this prop gives the option to add assistive text for screen readers"),t("br"),e._v("properties:"),t("br"),t("br"),e._v("Options for inputs type "),t("code",[e._v("autocomplete")]),e._v(", "),t("code",[e._v("chips")]),e._v(", "),t("code",[e._v("chips-below")]),e._v(":"),t("br"),t("strong",[e._v("loaderActive")]),e._v(": text that is announced when options are being fetched (prop"),t("br"),e._v(" "),t("code",[e._v("isLoading")]),e._v(" is set "),t("code",[e._v("true")]),e._v(")"),t("br"),t("br"),e._v("Options for inputs type "),t("code",[e._v("chips")]),e._v(":"),t("br"),t("strong",[e._v("optionToRemoveSelected")]),e._v(": text read when option is marked active for removal (by using"),t("br"),e._v(" backspace in empty input field). string {label} could be added to be replaced"),t("br"),e._v(" by the actual chip label (value in ["),t("code",[e._v("labelPropertyName")]),e._v("])"),t("br"),t("br"),e._v("Options for inputs type "),t("code",[e._v("chips")]),e._v(", "),t("code",[e._v("chips-below")]),e._v(":"),t("br"),t("strong",[e._v("resultsRetrieved")]),e._v(": text that is announced when results were retrieved (drop down"),t("br"),e._v(" list changed)"),t("br"),t("strong",[e._v("optionAdded")]),e._v(": text read when option was added to the selected list. string {label}"),t("br"),e._v(" could be added to be replaced by the actual chip label (value in ["),t("code",[e._v("labelPropertyName")]),e._v("])"),t("br"),t("strong",[e._v("optionRemoved")]),e._v(": text read when option was removed from the selected list. string {label}"),t("br"),e._v(" could be added to be replaced by the actual chip label (value in ["),t("code",[e._v("labelPropertyName")]),e._v("])")]),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{"),t("br"),e._v(" loaderActive: 'loading.',"),t("br"),e._v(" resultsRetrieved: '{number} options in drop down.',"),t("br"),e._v(" optionAdded: 'option {label} added to selected list.',"),t("br"),e._v(" optionToRemoveSelected: 'option {label} from selected list marked for removal. Press delete or backspace to remove.',"),t("br"),e._v(" optionRemoved: 'option {label} removed.'"),t("br"),e._v("}")])])])]),e._v(" "),t("h2",{attrs:{id:"methods"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),t("h3",{attrs:{id:"validate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#validate"}},[e._v("#")]),e._v(" validate")]),e._v(" "),t("blockquote",[t("p",[e._v("Trigger public validate function for each form component\nNote: Currently a validation function is only implemented for baseChipsBelow")])]),e._v(" "),t("h4",{attrs:{id:"return"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#return"}},[e._v("#")]),e._v(" Return")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Type")]),e._v(" "),t("th",[e._v("Description")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("forms error state")])])])]),e._v(" "),t("h2",{attrs:{id:"events"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[e._v("#")]),e._v(" Events")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Event name")]),e._v(" "),t("th",[e._v("Properties")]),e._v(" "),t("th",[e._v("Description")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("form-mounted")]),e._v(" "),t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("fetch-autocomplete")]),e._v(" "),t("td",[t("strong",[e._v("value")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the string to autocomplete"),t("br"),t("strong",[e._v("name")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the name of the field"),t("br"),t("strong",[e._v("source")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the url to request the data from"),t("br"),t("strong",[e._v("equivalent")]),e._v(" "),t("code",[e._v("?string")]),e._v(" - string specified for related fields. e.g. for contributor roles equivalent is "),t("code",[e._v("contributor")]),t("br"),t("strong",[e._v("parentFields")]),e._v(" "),t("code",[e._v("?string[]")]),e._v(" - in case the autocomplete event originates from a subform the subform id's (field property names) are specififed in this array (most nested property last)")]),e._v(" "),t("td",[e._v("triggered if field has an autocomplete functionality"),t("br"),e._v("(chips-input, autocomplete-input, chips-below-input)")])]),e._v(" "),t("tr",[t("td",[e._v("input-complete")]),e._v(" "),t("td",[t("strong",[e._v("undefined")]),e._v(" "),t("code",[e._v("string, number, Object, Array")]),e._v(" - the updated value")]),e._v(" "),t("td",[e._v("event emitted once an input was completed (e.g. an option selected in chips input or"),t("br"),e._v(" an enter key triggered in BaseInput or after a date was validated)")])]),e._v(" "),t("tr",[t("td",[e._v("values-changed")]),e._v(" "),t("td",[t("strong",[e._v("undefined")]),e._v(" "),t("code",[e._v("Object[]")]),e._v(" - the changed value list"),t("br"),t("strong",[e._v("undefined")]),e._v(" "),t("code",[e._v("Object")]),e._v(" - the field information of the changed field")]),e._v(" "),t("td",[e._v("event triggered when the values of a field were altered or a form"),t("br"),e._v("field was added or removed")])])])]),e._v(" "),t("h2",{attrs:{id:"slots"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#slots"}},[e._v("#")]),e._v(" Slots")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Name")]),e._v(" "),t("th",[e._v("Description")]),e._v(" "),t("th",[e._v("Bindings")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("label-addition")]),e._v(" "),t("td",[e._v("Slot to allow for additional elements on the right side of the label row <div> (e.g. language tabs))")]),e._v(" "),t("td",[t("strong",[e._v("field-name")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the name of the displayed field (for time range fields there is a '-time' suffix added)"),t("br"),t("strong",[e._v("group-names")]),e._v(" "),t("code",[e._v("string[]")]),e._v(" - in case the slot is for a subform (form group) field, "),t("code",[e._v("groupNames")]),e._v(" contains the parent field groups names"),t("br"),t("strong",[e._v("index")]),e._v(" "),t("code",[e._v("number")]),e._v(" - the array index of field values")])]),e._v(" "),t("tr",[t("td",[e._v("pre-input-field")]),e._v(" "),t("td",[e._v("slot to add elements within the form field but in a row before the actual input field. for an example see "),t("a",{attrs:{href:"BaseInput"}},[e._v("BaseInput")])]),e._v(" "),t("td",[t("strong",[e._v("field-name")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the name of the displayed field (for time range fields there is a '-time' suffix added)"),t("br"),t("strong",[e._v("group-names")]),e._v(" "),t("code",[e._v("string[]")]),e._v(" - in case the slot is for a subform (form group) field, "),t("code",[e._v("groupNames")]),e._v(" contains the parent field groups names"),t("br"),t("strong",[e._v("index")]),e._v(" "),t("code",[e._v("number")]),e._v(" - the array index of field values")])]),e._v(" "),t("tr",[t("td",[e._v("input-field-addition-before")]),e._v(" "),t("td",[e._v("Slot to allow for additional elements in the input field <div> (before <input>)")]),e._v(" "),t("td",[t("strong",[e._v("field-name")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the name of the displayed field (for time range fields there is a '-time' suffix added)"),t("br"),t("strong",[e._v("group-names")]),e._v(" "),t("code",[e._v("string[]")]),e._v(" - in case the slot is for a subform (form group) field, "),t("code",[e._v("groupNames")]),e._v(" contains the parent field groups names"),t("br"),t("strong",[e._v("index")]),e._v(" "),t("code",[e._v("number")]),e._v(" - the array index of field values")])]),e._v(" "),t("tr",[t("td",[e._v("input-field-inline-before")]),e._v(" "),t("td",[e._v("to add elements directly inline before the input (contrary to "),t("code",[e._v("input-field-addition-before")]),e._v(" this does not wrap. for an example see "),t("a",{attrs:{href:"BaseInput"}},[e._v("BaseInput")])]),e._v(" "),t("td",[t("strong",[e._v("field-name")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the name of the displayed field (for time range fields there is a '-time' suffix added)"),t("br"),t("strong",[e._v("group-names")]),e._v(" "),t("code",[e._v("string[]")]),e._v(" - in case the slot is for a subform (form group) field, "),t("code",[e._v("groupNames")]),e._v(" contains the parent field groups names"),t("br"),t("strong",[e._v("index")]),e._v(" "),t("code",[e._v("number")]),e._v(" - the array index of field values")])]),e._v(" "),t("tr",[t("td",[e._v("input-field-addition-after")]),e._v(" "),t("td",[e._v("for adding elements after input")]),e._v(" "),t("td",[t("strong",[e._v("field-name")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the name of the displayed field (for time range fields there is a '-time' suffix added)"),t("br"),t("strong",[e._v("group-names")]),e._v(" "),t("code",[e._v("string[]")]),e._v(" - in case the slot is for a subform (form group) field, "),t("code",[e._v("groupNames")]),e._v(" contains the parent field groups names"),t("br"),t("strong",[e._v("index")]),e._v(" "),t("code",[e._v("number")]),e._v(" - the array index of field values")])]),e._v(" "),t("tr",[t("td",[e._v("post-input-field")]),e._v(" "),t("td",[e._v("for adding elements at the end covering the whole height")]),e._v(" "),t("td",[t("strong",[e._v("field-name")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the name of the displayed field (for time range fields there is a '-time' suffix added)"),t("br"),t("strong",[e._v("group-names")]),e._v(" "),t("code",[e._v("string[]")]),e._v(" - in case the slot is for a subform (form group) field, "),t("code",[e._v("groupNames")]),e._v(" contains the parent field groups names"),t("br"),t("strong",[e._v("index")]),e._v(" "),t("code",[e._v("number")]),e._v(" - the array index of field values")])]),e._v(" "),t("tr",[t("td",[e._v("error-icon")]),e._v(" "),t("td",[e._v("use a custom icon instead of standard error/warning icon")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("remove-icon")]),e._v(" "),t("td",[e._v("use a custom icon instead of standard remove icon")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("below-input")]),e._v(" "),t("td",[e._v("below-input slot added to e.g. add drop down")]),e._v(" "),t("td",[t("strong",[e._v("field-name")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the name of the displayed field (for time range fields there is a '-time' suffix added)"),t("br"),t("strong",[e._v("group-names")]),e._v(" "),t("code",[e._v("string[]")]),e._v(" - in case the slot is for a subform (form group) field, "),t("code",[e._v("groupNames")]),e._v(" contains the parent field groups names"),t("br"),t("strong",[e._v("index")]),e._v(" "),t("code",[e._v("number")]),e._v(" - the array index of field values")])]),e._v(" "),t("tr",[t("td",[e._v("drop-down-entry")]),e._v(" "),t("td",[e._v("customize the form field drop down options")]),e._v(" "),t("td",[t("strong",[e._v("field-name")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the name of the displayed field (for time range fields there is a '-time' suffix added)"),t("br"),t("strong",[e._v("group-names")]),e._v(" "),t("code",[e._v("string[]")]),e._v(" - in case the slot is for a subform (form group) field, "),t("code",[e._v("groupNames")]),e._v(" contains the parent field groups names"),t("br"),t("strong",[e._v("option")]),e._v(" "),t("code",[e._v("object")]),e._v(" - the option object")])])])]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("Apart from standard "),t("a",{attrs:{href:"https://spec.openapis.org/oas/v3.1.0",target:"_blank",rel:"noopener noreferrer"}},[e._v("openAPI"),t("OutboundLink")],1),e._v(" fields the form creation relies heavily on the custom field "),t("code",[e._v("x-attrs")]),e._v(" (a custom "),t("a",{attrs:{href:"https://spec.openapis.org/oas/v3.1.0#specification-extensions",target:"_blank",rel:"noopener noreferrer"}},[e._v("specification exension"),t("OutboundLink")],1),e._v(")."),t("br"),e._v("\nFollowing options are available:")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("attribute")]),e._v(" "),t("th",[e._v("relevant for")]),e._v(" "),t("th",[e._v("default*")]),e._v(" "),t("th",[e._v("allowed values")]),e._v(" "),t("th",[e._v("description")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("hidden")]),e._v(" "),t("td",[e._v("all")]),e._v(" "),t("td",[t("code",[e._v("False")])]),e._v(" "),t("td",[t("code",[e._v("True")]),e._v(", "),t("code",[e._v("False")])]),e._v(" "),t("td",[e._v("indicate if this data attribute should be considered for form creation (e.g. "),t("code",[e._v("true")]),e._v(" for id)")])]),e._v(" "),t("tr",[t("td",[e._v("field_format")]),e._v(" "),t("td",[e._v("all")]),e._v(" "),t("td",[t("code",[e._v("full")])]),e._v(" "),t("td",[t("code",[e._v("full")]),e._v(", "),t("code",[e._v("half")]),e._v(", "),t("code",[e._v("third")])]),e._v(" "),t("td",[e._v("specify if the field should fill full width, half or a third of the space in a form row"),t("br"),e._v(" (in case it is a "),t("code",[e._v("half")]),e._v(" field make sure it has a second 'half' field as well, otherwise the space will be empty)"),t("br"),t("strong",[e._v("Caveat")]),e._v(": if field is multiply-able this value needs to be "),t("code",[e._v("full")])])]),e._v(" "),t("tr",[t("td",[e._v("field_type")]),e._v(" "),t("td",[e._v("all")]),e._v(" "),t("td",[t("code",[e._v("text")])]),e._v(" "),t("td",[t("code",[e._v("text")]),e._v(", "),t("code",[e._v("autocomplete")]),e._v(", "),t("code",[e._v("chips")]),e._v(", "),t("code",[e._v("chips-below")]),e._v(", "),t("code",[e._v("date")]),e._v(", "),t("code",[e._v("multiline")]),e._v(", "),t("code",[e._v("group")]),e._v(", "),t("code",[e._v("boolean")])]),e._v(" "),t("td",[e._v("which kind of field should be shown front-end:"),t("br"),t("strong",[e._v("text")]),e._v(": simple text field"),t("br"),e._v(" "),t("strong",[e._v("autocomplete")]),e._v(": text field with autocomplete functionality ("),t("code",[e._v("source")]),e._v(" property needed!)"),t("br"),e._v(" "),t("strong",[e._v("chips")]),e._v(": input field with options (optional: dynamic autocomplete) that creates chips out of selected options"),t("br"),e._v("(if single or multi-select chips will be determined automatically from field type being an array or object (see below))"),t("br"),e._v(" "),t("strong",[e._v("chips-below")]),e._v(": same as chips, however chips are not added inline but below the input field"),t("br"),e._v(" "),t("strong",[e._v("date")]),e._v(": a date field (different formats - decided from the OpenAPI definition (see below))"),t("br"),e._v(" "),t("strong",[e._v("multiline")]),e._v(": a multiline text field"),t("br"),e._v(" "),t("strong",[e._v("group")]),e._v(": indicates that the fields specified within should be grouped"),t("br"),e._v(" "),t("strong",[e._v("boolean")]),e._v(" will create a toggle element"),t("br"),t("strong",[e._v("integer")]),e._v(" creates a number field with integer numbers allowed"),t("br"),t("strong",[e._v("float")]),e._v(" will create a number field with float values allowed.")])]),e._v(" "),t("tr",[t("td",[e._v("placeholder")]),e._v(" "),t("td",[e._v("all")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[t("code",[e._v("{string, Object}")])]),e._v(" "),t("td",[e._v("Add a placeholder displayed in the input field"),t("br"),e._v(" A "),t("code",[e._v("{string}")]),e._v(" for all fields except date fields - there it should be an "),t("code",[e._v("{object}")]),e._v(" with "),t("code",[e._v("date")]),e._v(" and (if necessary) "),t("code",[e._v("time")]),e._v(" attributes that contain the relevant string")])]),e._v(" "),t("tr",[t("td",[e._v("order")]),e._v(" "),t("td",[e._v("all")]),e._v(" "),t("td",[e._v("this should be specified for all fields otherwise sorting will be random")]),e._v(" "),t("td",[t("code",[e._v("{number}")])]),e._v(" "),t("td",[e._v("this will specify the order in which the fields are displayed in the form. If "),t("code",[e._v("field_format")]),e._v(" is "),t("code",[e._v("half")]),e._v(" or "),t("code",[e._v("third")]),e._v(" a number can be skipped in order to not completely fill the row.")])]),e._v(" "),t("tr",[t("td",[e._v("source")]),e._v(" "),t("td",[e._v("chips, chips-below, autocomplete")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("an API endpoint")]),e._v(" "),t("td",[e._v("if the field has a autocomplete functionality (autocomplete field or dynamic chips inputs ("),t("code",[e._v("dynamic_autosuggest = true")]),e._v(") or options ("),t("code",[e._v("dynamic_autosuggest = false")]),e._v(") this route is "),t("strong",[e._v("required")]),e._v(" to fetch these options (the base url for the API is specified in the front end configuration)")])]),e._v(" "),t("tr",[t("td",[e._v("source_*")]),e._v(" "),t("td",[e._v("chips, chips-below")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("an API endpoint")]),e._v(" "),t("td",[e._v("as above, to specify additional sources (URLs) for prefetching (e.g. used for text field property "),t("code",[e._v("type")]),e._v(" --\x3e "),t("code",[e._v("source_type")]),e._v(" or field property "),t("code",[e._v("roles")]),e._v(" --\x3e "),t("code",[e._v("source_roles")]),e._v(")")])]),e._v(" "),t("tr",[t("td",[e._v("prefetch")]),e._v(" "),t("td",[e._v("chips, chips-below")]),e._v(" "),t("td",[t("code",[e._v("[]")])]),e._v(" "),t("td",[e._v("e.g. "),t("code",[e._v("source")])]),e._v(" "),t("td",[e._v("specify the attributes that contain an URL where options should be prefetched (=for chips inputs that are not dynamic!)"),t("br"),e._v(" (for the example above e.g. "),t("code",[e._v("source")]),e._v(", "),t("code",[e._v("source_types")]),e._v(", "),t("code",[e._v("source_roles")]),e._v(")")])]),e._v(" "),t("tr",[t("td",[e._v("set_label_language")]),e._v(" "),t("td",[e._v("chips")]),e._v(" "),t("td",[t("code",[e._v("False")])]),e._v(" "),t("td",[t("code",[e._v("True")]),e._v(", "),t("code",[e._v("False")])]),e._v(" "),t("td",[e._v("specify if the field data have language specific content (e.g. "),t("code",[e._v("{ 'en': 'xxx', 'de': 'yyy' }")]),e._v(")"),t("br"),e._v(" (e.g. "),t("code",[e._v("true")]),e._v(" for languages or materials fields)")])]),e._v(" "),t("tr",[t("td",[e._v("date_format")]),e._v(" "),t("td",[e._v("date")]),e._v(" "),t("td",[t("code",[e._v("day")])]),e._v(" "),t("td",[t("code",[e._v("day")]),e._v(", "),t("code",[e._v("month")]),e._v(", "),t("code",[e._v("year")]),e._v(", "),t("code",[e._v("date_year")]),e._v(", "),t("code",[e._v("date_month_year")])]),e._v(" "),t("td",[e._v("the format of the date field, if "),t("code",[e._v("day")]),e._v(", "),t("code",[e._v("month")]),e._v(" or "),t("code",[e._v("year")]),e._v(" it will only be possible to enter those, if "),t("code",[e._v("date_year")]),e._v(" or "),t("code",[e._v("date_month_year")]),e._v(" switch buttons will be displayed to allow switching between day and year and date, month and year format respectively")])]),e._v(" "),t("tr",[t("td",[e._v("dynamic_autosuggest")]),e._v(" "),t("td",[e._v("chips")]),e._v(" "),t("td",[t("code",[e._v("False")])]),e._v(" "),t("td",[t("code",[e._v("True")]),e._v(", "),t("code",[e._v("False")])]),e._v(" "),t("td",[e._v("define if chips should have a dynamic autocomplete --\x3e this means matching results are live fetched from the API on user input")])]),e._v(" "),t("tr",[t("td",[e._v("allow_unknown_entries")]),e._v(" "),t("td",[e._v("chips")]),e._v(" "),t("td",[t("code",[e._v("False")])]),e._v(" "),t("td",[t("code",[e._v("True")]),e._v(", "),t("code",[e._v("False")])]),e._v(" "),t("td",[e._v("define if only options available in the chips input drop down can be used or user can just enter any string")])]),e._v(" "),t("tr",[t("td",[e._v("sortable")]),e._v(" "),t("td",[e._v("chips, chips-below")]),e._v(" "),t("td",[t("code",[e._v("False")])]),e._v(" "),t("td",[t("code",[e._v("True")]),e._v(", "),t("code",[e._v("False")])]),e._v(" "),t("td",[e._v("should chips be sortable")])]),e._v(" "),t("tr",[t("td",[e._v("additional_prop_required")]),e._v(" "),t("td",[e._v("chips-below")]),e._v(" "),t("td",[t("code",[e._v("False")])]),e._v(" "),t("td",[t("code",[e._v("True")]),e._v(", "),t("code",[e._v("False")])]),e._v(" "),t("td",[e._v("should additional prop options be required")])]),e._v(" "),t("tr",[t("td",[e._v("default_role")]),e._v(" "),t("td",[e._v("chips")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("a contributors uri (as defined in voc bench / skosmos) "),t("br"),e._v(" e.g. http://base.uni-ak.ac.at/portfolio/vocabulary/software_developer")]),e._v(" "),t("td",[e._v("this is relevant for all contributors related fields, in order to save the relevant role, a uri needs to be specified here")])]),e._v(" "),t("tr",[t("td",[e._v("equivalent")]),e._v(" "),t("td",[e._v("chips")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("a field name, e.g. "),t("code",[e._v("contributors")])]),e._v(" "),t("td",[e._v("attribute to indicate that this field is connected to more general field (atm only used for contributors)")])]),e._v(" "),t("tr",[t("td",[e._v("show_label")]),e._v(" "),t("td",[e._v("groups")]),e._v(" "),t("td",[t("code",[e._v("False")])]),e._v(" "),t("td",[t("code",[e._v("True")]),e._v(", "),t("code",[e._v("False")])]),e._v(" "),t("td",[e._v("indicates if field groups should have a label")])]),e._v(" "),t("tr",[t("td",[e._v("subtext")]),e._v(" "),t("td",[e._v("toggle")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[t("code",[e._v("{object}")])]),e._v(" "),t("td",[e._v("specify object with at mandatory property "),t("strong",[e._v("value")]),e._v(" and optional property "),t("strong",[e._v("url")]),e._v(" (external link) or "),t("strong",[e._v("source")]),e._v(" (internal link) - (atm only used for "),t("em",[e._v("fieldType:")]),e._v(" "),t("em",[e._v("boolean")]),e._v(")")])]),e._v(" "),t("tr",[t("td",[e._v("form_group")]),e._v(" "),t("td",[e._v("form-groups*")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[t("code",[e._v("{number}")])]),e._v(" "),t("td",[e._v("this attribute is relevant for the "),t("a",{attrs:{href:"BaseFormGroups"}},[e._v("BaseFormGroups")]),e._v(" wrapper component which can be used to achieve visually distinct form sections.")])]),e._v(" "),t("tr",[t("td",[e._v("form_group_title")]),e._v(" "),t("td",[e._v("form-groups*")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[t("code",[e._v("{string}")])]),e._v(" "),t("td",[e._v("this attribute is relevant for the "),t("a",{attrs:{href:"BaseFormGroups"}},[e._v("BaseFormGroups")]),e._v(" wrapper component and creates a header above the form section")])]),e._v(" "),t("tr",[t("td",[e._v("min")]),e._v(" "),t("td",[e._v("integer, float")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("number")]),e._v(" "),t("td",[e._v("specify the minimum value to accept for this number input")])]),e._v(" "),t("tr",[t("td",[e._v("max")]),e._v(" "),t("td",[e._v("integer, float")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("number")]),e._v(" "),t("td",[e._v("specify the maximum value to accept for this number input")])]),e._v(" "),t("tr",[t("td",[e._v("decimals")]),e._v(" "),t("td",[e._v("float")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("number")]),e._v(" "),t("td",[e._v("specify the number of decimal places for this number input")])]),e._v(" "),t("tr",[t("td",[e._v("text_before")]),e._v(" "),t("td",[e._v("all")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("specify a text or a character which is prepended to this entry")])]),e._v(" "),t("tr",[t("td",[e._v("text_after")]),e._v(" "),t("td",[e._v("all")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("specify a text or a character which is appended to this entry")])])])]),e._v(" "),t("p",[e._v("*'form-groups' is not a settable "),t("code",[e._v("field_type")]),e._v(" but means this attribute is relevant for forms wrapped in the "),t("a",{attrs:{href:"BaseFormGroups"}},[e._v("BaseFormGroups")]),e._v(" component.")]),e._v(" "),t("p",[e._v("In case certain field names are mentioned (e.g. "),t("code",[e._v("texts")]),e._v(", "),t("code",[e._v("roles")]),e._v(", "),t("code",[e._v("contributors")]),e._v(") this refers to the "),t("a",{attrs:{href:"https://github.com/base-angewandte/portfolio-backend/blob/master/docs/source/create_forms.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Portfolio API"),t("OutboundLink")],1),e._v(" and is just used as an example here."),t("br")]),e._v(" "),t("p",[e._v("Additionally, some features are derived from the OpenAPI definitions:"),t("br")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Repeatable input fields")]),e._v(": fields with "),t("code",[e._v("field_type")]),e._v(" other than "),t("code",[e._v("chips")]),e._v(" and "),t("code",[e._v("chips-below")]),e._v(" will be repeatable when the OpenAPI definition "),t("code",[e._v("type")]),e._v(" is "),t("code",[e._v("{array}")]),e._v(".")]),e._v(" "),t("li",[t("strong",[e._v("Single or multi-select chips input fields")]),e._v(": chips input fields are single select when the definition "),t("code",[e._v("type")]),e._v(" is "),t("code",[e._v("{object}")]),e._v(" (otherwise should be "),t("code",[e._v("{array}")]),e._v(").")]),e._v(" "),t("li",[t("strong",[e._v("chips input fields")]),e._v(": are draggable as soon as they are multi-select but this can be overwritten via "),t("code",[e._v("fieldProps")]),e._v(".")]),e._v(" "),t("li",[t("strong",[e._v("Multiline input fields")]),e._v(": Will have an additional drop down when "),t("code",[e._v("field_type")]),e._v(" is "),t("code",[e._v("multiline")]),e._v(" and the OpenAPI json field properties have the property "),t("code",[e._v("type")]),e._v(" included."),t("br"),e._v("\nAlso language tabs can either be set via "),t("code",[e._v("fieldProps")]),e._v(" or will be derived automatically if OpenAPI json properties include a "),t("code",[e._v("language")]),e._v(" property.")]),e._v(" "),t("li",[t("strong",[e._v("Date fields")]),e._v(": fields are also rendered according to the "),t("code",[e._v("type")]),e._v(" and "),t("code",[e._v("properties")]),e._v(" of the OpenAPI definition:"),t("br"),e._v(" "),t("ul",[t("li",[t("code",[e._v("type")]),e._v(" "),t("code",[e._v("{string}")]),e._v(": rendering a single date field.")]),e._v(" "),t("li",[t("code",[e._v("type")]),e._v(" "),t("code",[e._v("{object}")]),e._v(" with "),t("code",[e._v("properties")]),e._v(" "),t("code",[e._v("date_from")]),e._v(" and "),t("code",[e._v("date_to")]),e._v(": rendering a date range.")]),e._v(" "),t("li",[t("code",[e._v("type")]),e._v(" "),t("code",[e._v("{object}")]),e._v(" with "),t("code",[e._v("properties")]),e._v(" "),t("code",[e._v("date")]),e._v(" and "),t("code",[e._v("time")]),e._v(": rendering a date and a time field.")]),e._v(" "),t("li",[t("code",[e._v("type")]),e._v(" "),t("code",[e._v("{object}")]),e._v(" with "),t("code",[e._v("properties")]),e._v(" "),t("code",[e._v("date")]),e._v(", "),t("code",[e._v("time_from")]),e._v(" and "),t("code",[e._v("time_to")]),e._v(": rendering a single date field and time range fields.")]),e._v(" "),t("li",[t("code",[e._v("type")]),e._v(" "),t("code",[e._v("{object}")]),e._v(" with "),t("code",[e._v("properties")]),e._v(" "),t("code",[e._v("date_from")]),e._v(", "),t("code",[e._v("date_to")]),e._v(", "),t("code",[e._v("time_from")]),e._v(" and "),t("code",[e._v("time_to")]),e._v(": rendering date range fields and time range fields.")]),e._v(" "),t("li",[t("code",[e._v("type")]),e._v(" "),t("code",[e._v("{object}")]),e._v(" with "),t("code",[e._v("properties")]),e._v(" "),t("code",[e._v("time_from")]),e._v(" and "),t("code",[e._v("time_to")]),e._v(" rendering a time range.")]),e._v(" "),t("li",[e._v("If none of these definitions are met a single date field will be rendered.")]),e._v(" "),t("li",[e._v("As specified above, all of these definitions could also be wrapped in "),t("code",[e._v("type")]),e._v(" "),t("code",[e._v("{array}")]),e._v(" to make the field(s) repeatable.")])])]),e._v(" "),t("li",[t("strong",[e._v("Min or Max length")]),e._v(": a min length error message will be triggered automatically if "),t("code",[e._v("type")]),e._v(" is "),t("code",[e._v("text")]),e._v(" if field minLength is set in the openAPI definition and the min length is not reached.\nmaxLength will also be enforced if specified in the OpenApi definition.")])]),e._v(" "),t("blockquote",[t("p",[e._v("Please note that this component should be rendered client side (important for SSR projects). So for example if you have a Nuxt project you will have to wrap the component in a "),t("code",[e._v("<client-only>")]),e._v(" tag.")])]),e._v(" "),t("h2",{attrs:{id:"demo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[e._v("#")]),e._v(" Demo")]),e._v(" "),t("p",[e._v("This is a basic (autocomplete functionality not working here) example how a form created from a "),t("a",{attrs:{href:"https://www.openapis.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("openAPI"),t("OutboundLink")],1),e._v(" standard could look like\n(to see the structure click 'view code')")]),e._v(" "),t("no-ssr",[t("vue-live",{attrs:{layoutProps:{lang:"vue"},code:'<template>\n  <div>\n    <BaseForm\n      key="extended-form"\n      ref="formExtension"\n      form-id="formTest"\n      :form-field-json="fields"\n      :value-list="valueList"\n      :available-locales="[\'de\', \'en\']"\n      :show-error-icon="true"\n      :field-props="{\n        actors: {\n          label: \'Actors Label (overwritten via fieldProps)\',\n        },\n        contributors: {\n          sortText: \'Sorting text from fieldProps\',\n        },\n        type: {\n          invalid: true,\n          errorMessage: \'This invalid message was set via fieldProps.\',\n        },\n        isan: {\n          invalid: {\n            1: true,\n            3: true,\n          },\n          placeholder: \'aaaaaaa\',\n        },\n      }"\n      language="en"\n      :field-is-loading="fieldIsLoading"\n      :drop-down-lists="{\n        date_location: {\n          location: [\n            {\n              label: \'Wien\',\n              source: \'http://base.uni-ak.ac.at/portfolio/vienna\',\n            },\n            {\n              label: \'Berlin\',\n              source: \'http://base.uni-ak.ac.at/portfolio/berlin\',\n            },\n          ],\n        },\n        location: [\n          {\n            label: \'Base level options 1\',\n            source: \'http://base.uni-ak.ac.at/portfolio/identical1\',\n          },\n          {\n            label: \'Base level options 2\',\n            source: \'http://base.uni-ak.ac.at/portfolio/identical2\',\n          },\n        ],\n      }"\n      class="form"\n      @values-changed="valueList = { ...$event }"\n    >\n      <template #label-addition="{ fieldName, groupNames }">\n        <template v-if="fieldName === \'isan\'"> test </template>\n        <template v-if="fieldName === \'url4\'"> only for url </template>\n        <template\n          v-if="\n            groupNames &&\n            groupNames.includes(\'date_location\') &&\n            fieldName === \'location\'\n          "\n        >\n          using groupNames\n        </template>\n      </template>\n      <template #input-field-addition-before="{ fieldName, index }">\n        <template v-if="fieldName === \'isan\' && index === 0">\n          slot input-field-addition-before only for index 0 field\n        </template>\n      </template>\n      <template #error-icon>\n        <BaseIcon name="eye" class="custom-icon" />\n      </template>\n    </BaseForm>\n    <BaseButton style="margin: 8px 0;" text="Validate" @clicked="validate()" />\n    <div>Errors: {{ hasError }}</div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      hasError: "not validated yet.",\n      valueList: {},\n      fieldIsLoading: "",\n      fields: {\n        contributors: {\n          type: "array",\n          items: {\n            type: "object",\n            properties: {\n              roles: {\n                type: "array",\n                items: {\n                  type: "object",\n                  properties: {\n                    label: {\n                      type: "object",\n                      properties: {\n                        en: {\n                          type: "string",\n                        },\n                        de: {\n                          type: "string",\n                        },\n                        fr: {\n                          type: "string",\n                        },\n                      },\n                      additionalProperties: false,\n                    },\n                    source: {\n                      type: "string",\n                      "x-attrs": {\n                        hidden: true,\n                      },\n                    },\n                  },\n                  additionalProperties: false,\n                },\n              },\n              label: {\n                type: "string",\n              },\n              source: {\n                type: "string",\n                "x-attrs": {\n                  hidden: true,\n                },\n              },\n            },\n            additionalProperties: false,\n          },\n          title: "Beteiligung (chips-below) (required)",\n          required: true,\n          "x-attrs": {\n            field_type: "chips-below",\n            placeholder: "Beteiligung eintragen",\n            source: "/autosuggest/v1/contributors/",\n            source_role: "/autosuggest/v1/roles/",\n            prefetch: ["source_role"],\n            allow_unknown_entries: true,\n            dynamic_autosuggest: true,\n            order: 2,\n            additional_prop_required: false,\n          },\n        },\n        url4: {\n          type: "string",\n          title: "URL",\n          "x-attrs": {\n            placeholder: "URL eintragen",\n            order: 3,\n            field_format: "half",\n          },\n        },\n        actors: {\n          type: "array",\n          items: {\n            type: "object",\n            properties: {\n              label: {\n                type: "string",\n              },\n              source: {\n                type: "string",\n                "x-attrs": {\n                  hidden: true,\n                },\n              },\n            },\n            additionalProperties: false,\n          },\n          title: "Actors (Multi-select)",\n          "x-attrs": {\n            field_type: "chips",\n            placeholder: "Enter Actors",\n            source: "/autosuggest/v1/contributors/",\n            allow_unknown_entries: true,\n            dynamic_autosuggest: true,\n            order: 3,\n            field_format: "half",\n          },\n        },\n        type: {\n          type: "object",\n          properties: {\n            label: {\n              type: "string",\n            },\n            source: {\n              type: "string",\n              "x-attrs": {\n                hidden: true,\n              },\n            },\n          },\n          additionalProperties: false,\n          title: "Type (Single-select)",\n          "x-attrs": {\n            field_type: "chips",\n            placeholder: "Select Type",\n            source: "/autosuggest/v1/contributors/",\n            allow_unknown_entries: true,\n            dynamic_autosuggest: true,\n            order: 4,\n          },\n        },\n        published_in: {\n          type: "string",\n          title: "erschienen in",\n          "x-attrs": {\n            placeholder: "erschienen in eintragen",\n            field_type: "text",\n            field_format: "third",\n            order: 5,\n          },\n        },\n        url: {\n          type: "string",\n          title: "URL",\n          "x-attrs": {\n            placeholder: "URL eintragen",\n            order: 6,\n            field_format: "third",\n          },\n        },\n        display_in_showroom: {\n          type: "boolean",\n          title: "Display in Showroom",\n          "x-attrs": {\n            placeholder: "Display in Showroom",\n            order: 7,\n            field_format: "third",\n            field_type: "boolean",\n          },\n        },\n        isan: {\n          type: "array",\n          items: {\n            type: "string",\n          },\n          title: "ISAN (repeatable)",\n          "x-attrs": {\n            placeholder: "ISAN eintragen",\n            order: 8,\n          },\n        },\n        date: {\n          type: "array",\n          items: {\n            type: "object",\n            properties: {\n              date_from: {\n                type: "string",\n              },\n              date_to: {\n                type: "string",\n              },\n            },\n          },\n          title: "Repeatable Date",\n          "x-attrs": {\n            placeholder: "Enter Date",\n            order: 9,\n            field_type: "date",\n          },\n        },\n        date_location: {\n          type: "array",\n          items: {\n            type: "object",\n            properties: {\n              location_description: {\n                type: "string",\n                title: "Ortsbeschreibung",\n                "x-attrs": {\n                  placeholder: "Ortsbeschreibung eintragen",\n                  field_type: "text",\n                  order: 3,\n                },\n              },\n              date: {\n                type: "string",\n                title: "Datum",\n                additionalProperties: false,\n                pattern:\n                  "^\\d{4}(-(0[1-9]|1[0-2]))?(-(0[1-9]|[12]\\d|3[01]))?$",\n                "x-attrs": {\n                  field_format: "half",\n                  field_type: "date",\n                  date_format: "date_year",\n                  placeholder: {\n                    date: "Datum eintragen",\n                  },\n                  order: 1,\n                },\n              },\n              location: {\n                type: "array",\n                items: {\n                  type: "object",\n                  properties: {\n                    geometry: {\n                      type: "object",\n                      properties: {\n                        coordinates: {\n                          type: "array",\n                          items: {\n                            type: "number",\n                            format: "float",\n                          },\n                        },\n                        type: {\n                          type: "string",\n                        },\n                      },\n                      additionalProperties: false,\n                    },\n                    region: {\n                      type: "string",\n                    },\n                    house_number: {\n                      type: "string",\n                    },\n                    street: {\n                      type: "string",\n                    },\n                    postcode: {\n                      type: "string",\n                    },\n                    locality: {\n                      type: "string",\n                    },\n                    country: {\n                      type: "string",\n                    },\n                    label: {\n                      type: "string",\n                    },\n                    source: {\n                      type: "string",\n                    },\n                  },\n                  additionalProperties: false,\n                },\n                title: "Ort",\n                "x-attrs": {\n                  field_format: "half",\n                  field_type: "chips",\n                  dynamic_autosuggest: true,\n                  source: "/autosuggest/v1/places/",\n                  placeholder: "Ort eintragen",\n                  order: 2,\n                },\n              },\n            },\n            additionalProperties: false,\n          },\n          title: "Datum und Ort",\n          "x-attrs": {\n            field_type: "group",\n            show_label: false,\n            order: 10,\n          },\n        },\n        date_location2: {\n          type: "array",\n          items: {\n            type: "object",\n            properties: {\n              location_description: {\n                type: "string",\n                title: "Ortsbeschreibung",\n                "x-attrs": {\n                  placeholder: "Ortsbeschreibung eintragen",\n                  field_type: "text",\n                  order: 3,\n                },\n              },\n              date: {\n                type: "string",\n                title: "Datum",\n                additionalProperties: false,\n                pattern:\n                  "^\\d{4}(-(0[1-9]|1[0-2]))?(-(0[1-9]|[12]\\d|3[01]))?$",\n                "x-attrs": {\n                  field_format: "half",\n                  field_type: "date",\n                  date_format: "date_month_year",\n                  placeholder: {\n                    date: "Datum eintragen",\n                  },\n                  order: 1,\n                },\n              },\n              location: {\n                type: "array",\n                items: {\n                  type: "object",\n                  properties: {\n                    geometry: {\n                      type: "object",\n                      properties: {\n                        coordinates: {\n                          type: "array",\n                          items: {\n                            type: "number",\n                            format: "float",\n                          },\n                        },\n                        type: {\n                          type: "string",\n                        },\n                      },\n                      additionalProperties: false,\n                    },\n                    region: {\n                      type: "string",\n                    },\n                    house_number: {\n                      type: "string",\n                    },\n                    street: {\n                      type: "string",\n                    },\n                    postcode: {\n                      type: "string",\n                    },\n                    locality: {\n                      type: "string",\n                    },\n                    country: {\n                      type: "string",\n                    },\n                    label: {\n                      type: "string",\n                    },\n                    source: {\n                      type: "string",\n                    },\n                  },\n                  additionalProperties: false,\n                },\n                title: "Ort",\n                "x-attrs": {\n                  field_format: "half",\n                  field_type: "chips",\n                  dynamic_autosuggest: true,\n                  source: "/autosuggest/v1/places/",\n                  placeholder: "Ort eintragen",\n                  order: 2,\n                },\n              },\n            },\n            additionalProperties: false,\n          },\n          title: "A Second Group with identical Field Names",\n          "x-attrs": {\n            field_type: "group",\n            show_label: true,\n            order: 11,\n          },\n        },\n        location: {\n          type: "array",\n          items: {\n            type: "object",\n            properties: {\n              geometry: {\n                type: "object",\n                properties: {\n                  coordinates: {\n                    type: "array",\n                    items: {\n                      type: "number",\n                      format: "float",\n                    },\n                  },\n                  type: {\n                    type: "string",\n                  },\n                },\n                additionalProperties: false,\n              },\n              region: {\n                type: "string",\n              },\n              house_number: {\n                type: "string",\n              },\n              street: {\n                type: "string",\n              },\n              postcode: {\n                type: "string",\n              },\n              locality: {\n                type: "string",\n              },\n              country: {\n                type: "string",\n              },\n              label: {\n                type: "string",\n              },\n              source: {\n                type: "string",\n              },\n            },\n            additionalProperties: false,\n          },\n          title: "Ort",\n          "x-attrs": {\n            field_format: "full",\n            field_type: "chips",\n            dynamic_autosuggest: true,\n            source: "/autosuggest/v1/places/",\n            placeholder: "Ort eintragen",\n            order: 12,\n          },\n        },\n      },\n    };\n  },\n  methods: {\n    validate() {\n      this.hasError = this.$refs.formExtension.validate();\n      console.log("errors", this.hasError);\n    },\n  },\n};\n<\/script>\n\n<style>\n.custom-icon {\n  height: 16px;\n  width: 16px;\n}\n</style>\n',requires:{}}})],1)],1)}),[],!1,null,null,null);t.default=o.exports}}]);