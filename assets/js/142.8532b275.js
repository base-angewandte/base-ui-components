(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{1452:function(e,t,v){"use strict";v.r(t);var d=v(34),_=Object(d.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"basechipsinput"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#basechipsinput"}},[e._v("#")]),e._v(" BaseChipsInput")]),e._v(" "),t("blockquote",[t("p",[e._v("Base Chips Input component with drop down and autocomplete functionality")])]),e._v(" "),t("h2",{attrs:{id:"props"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[e._v("#")]),e._v(" Props")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Prop name")]),e._v(" "),t("th",[e._v("Description")]),e._v(" "),t("th",[e._v("Type")]),e._v(" "),t("th",[e._v("Values")]),e._v(" "),t("th",[e._v("Default")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("list")]),e._v(" "),t("td",[e._v("list of selectable options. needs to be a list with at least an identifier and a label"),t("br"),e._v(" (properties can be set via "),t("code",[e._v("identifierPropertyName")]),e._v(" and "),t("code",[e._v("labelPropertyName")]),e._v(")")]),e._v(" "),t("td",[e._v("array")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("[]")])]),e._v(" "),t("tr",[t("td",[e._v("v-model")]),e._v(" "),t("td",[e._v("list of already selected options, displayed as chips"),t("br"),e._v(" needs to be a list with at least an identifier and a label"),t("br"),e._v(" (properties can be set via "),t("code",[e._v("identifierPropertyName")]),e._v(" and "),t("code",[e._v("labelPropertyName")]),e._v(")")]),e._v(" "),t("td",[e._v("array")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("[]")])]),e._v(" "),t("tr",[t("td",[e._v("inputType")]),e._v(" "),t("td",[e._v("specify input field type")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[t("code",[e._v("text")]),e._v(", "),t("code",[e._v("search")])]),e._v(" "),t("td",[e._v("'text'")])]),e._v(" "),t("tr",[t("td",[e._v("label")]),e._v(" "),t("td",[e._v("input field label")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("showLabel")]),e._v(" "),t("td",[e._v("define if label should be visible")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("placeholder")]),e._v(" "),t("td",[e._v("input field placeholder")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("null")])]),e._v(" "),t("tr",[t("td",[e._v("dropDownNoOptionsInfo")]),e._v(" "),t("td",[e._v("message displayed when no selectable options are available")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("'No options available'")])]),e._v(" "),t("tr",[t("td",[e._v("allowUnknownEntries")]),e._v(" "),t("td",[e._v("define if the user can add an option that is not in the list")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("allowMultipleEntries")]),e._v(" "),t("td",[e._v("define only a single or multiple options can be selected")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("allowDynamicDropDownEntries")]),e._v(" "),t("td",[e._v("define if selectable list options should be fetched every time or if the"),t("br"),e._v("list passed in the beginning is used")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("addSelectedEntryDirectly")]),e._v(" "),t("td",[e._v("this prop was added because there was some action needed to be done before entry was added"),t("br"),e._v("so this is possible if entry is not added to "),t("code",[e._v("selectedList")]),e._v(" directly but only in parent"),t("br"),e._v("component")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("showInputBorder")]),e._v(" "),t("td",[e._v("option to have the border of the input field not displayed")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("sortable")]),e._v(" "),t("td",[e._v("if "),t("code",[e._v("true")]),e._v(" a button with that functionality will be visible")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("draggable")]),e._v(" "),t("td",[e._v("define if chips should be draggable (currently only available for inline)")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("alwaysLinked")]),e._v(" "),t("td",[e._v("define if entries should always appear linked (-> with grey background)")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("hoverboxContent")]),e._v(" "),t("td",[e._v("set content for the info box activatable by click."),t("br"),e._v("see "),t("a",{attrs:{href:"BaseHoverBox"}},[e._v("BaseHoverBox")]),e._v(" for more details")]),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{}")])]),e._v(" "),t("tr",[t("td",[e._v("isLoading")]),e._v(" "),t("td",[e._v("show spinner to indicate that something is loading"),t("br"),e._v("(for dynamically fetched entries that need to do backend requests)")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("sortText")]),e._v(" "),t("td",[e._v("if sorting is enabled this will be the text shown in the button")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("'Sort A â€“ Z'")])]),e._v(" "),t("tr",[t("td",[e._v("sortName")]),e._v(" "),t("td",[e._v("if "),t("code",[e._v("true")]),e._v(" sorting will consider the last string in a label or if a comma is"),t("br"),e._v("present the string before the comma")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("language")]),e._v(" "),t("td",[e._v("set a language (ISO 639-1)")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("addNewChipText")]),e._v(" "),t("td",[e._v("set a chips text for adding a new chip."),t("br"),e._v("(alternatively add a "),t("code",[e._v("form.Add")]),e._v(" value to your localization files)"),t("br"),e._v("if allowUnknownEntries is true please add this in one form or another!")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("id")]),e._v(" "),t("td",[e._v("if field is occuring more then once - set an id")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("identifierPropertyName")]),e._v(" "),t("td",[e._v("specify the object property that should be used as identifier")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("'id'")])]),e._v(" "),t("tr",[t("td",[e._v("labelPropertyName")]),e._v(" "),t("td",[e._v("specify the object property that should be used as value to be displayed")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("'label'")])]),e._v(" "),t("tr",[t("td",[e._v("displayChipsInline")]),e._v(" "),t("td",[e._v("property for special case in component "),t("a",{attrs:{href:"BaseChipsBelow"}},[e._v("BaseChipsBelow")]),e._v(" - if "),t("code",[e._v("false")]),e._v(" in this case chips will"),t("br"),e._v("not be displayed in the input field")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("required")]),e._v(" "),t("td",[e._v("mark as required field (currently only used for "),t("code",[e._v("aria-required")]),e._v(" attribute)")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("invalid")]),e._v(" "),t("td",[e._v("mark the form field as invalid and ideally also provide an error message"),t("br"),e._v("to display below the form field."),t("br"),e._v("for an example see "),t("a",{attrs:{href:"BaseInput"}},[e._v("BaseInput")])]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("disabled")]),e._v(" "),t("td",[e._v("set "),t("code",[e._v("true")]),e._v(" if input field should be disabled."),t("br"),e._v("for an example see "),t("a",{attrs:{href:"BaseInput"}},[e._v("BaseInput")])]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("errorMessage")]),e._v(" "),t("td",[e._v("add an error message to be displayed below form field if field is invalid."),t("br"),e._v("for an example see "),t("a",{attrs:{href:"BaseInput"}},[e._v("BaseInput")])]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("showErrorIcon")]),e._v(" "),t("td",[e._v("define if error icon should be shown."),t("br"),e._v("for an example see "),t("a",{attrs:{href:"BaseInput"}},[e._v("BaseInput")])]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("clearable")]),e._v(" "),t("td",[e._v("if "),t("code",[e._v("true")]),e._v(" a remove icon (or a custom icon if slot "),t("code",[e._v("remove-icon")]),e._v(" is used) will be shown allowing to remove"),t("br"),e._v("all input at once"),t("br"),e._v("for an example see "),t("a",{attrs:{href:"BaseInput"}},[e._v("BaseInput")])]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("inputClass")]),e._v(" "),t("td",[e._v("specify additional input field styling")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("chipsEditable")]),e._v(" "),t("td",[e._v("set "),t("code",[e._v("true")]),e._v(" if chip should be editable on click"),t("br"),t("br"),t("strong",[e._v("Caveat")]),e._v(": chips can not be both "),t("code",[e._v("draggable")]),e._v(" AND "),t("code",[e._v("editable")]),e._v(" and it can not show"),t("br"),e._v(" "),t("code",[e._v("hoverBoxContent")]),e._v(" as soon as it is editable respectively - if both are set "),t("code",[e._v("true")]),e._v(" edit"),t("br"),e._v(" functionality takes precedent - chip will not be draggable, "),t("code",[e._v("hoverBoxContent")]),e._v(" will not"),t("br"),e._v(" be shown!")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("closeDropdownOnOptionSelect")]),e._v(" "),t("td",[e._v("set "),t("code",[e._v("true")]),e._v(" if dropdown should be closed after selecting an option")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("assistiveText")]),e._v(" "),t("td",[e._v("this prop gives the option to add assistive text for screen readers"),t("br"),e._v("properties:"),t("br"),t("strong",[e._v("selectedOption")]),e._v(": text read when a selected option is focused (currently only"),t("br"),e._v(" working for editable chips)"),t("br"),t("strong",[e._v("loaderActive")]),e._v(": text that is announced when results are being fetched (prop"),t("br"),e._v(" "),t("code",[e._v("isLoading")]),e._v(" is set "),t("code",[e._v("true")]),e._v(")"),t("br"),t("strong",[e._v("resultsRetrieved")]),e._v(": text that is announced when results were retrieved (drop down"),t("br"),e._v(" list changed)"),t("br"),t("strong",[e._v("optionAdded")]),e._v(": text read when option was added to the selected list. string {label}"),t("br"),e._v(" could be added to be replaced by the actual chip label (value in ["),t("code",[e._v("labelPropertyName")]),e._v("])"),t("br"),t("strong",[e._v("optionToRemoveSelected")]),e._v(": text read when option is marked active for removal (by using"),t("br"),e._v(" backspace in empty input field). string {label} could be added to be replaced"),t("br"),e._v(" by the actual chip label (value in ["),t("code",[e._v("labelPropertyName")]),e._v("])"),t("br"),t("strong",[e._v("optionRemoved")]),e._v(": text read when option was removed from the selected list. string {label}"),t("br"),e._v(" could be added to be replaced by the actual chip label (value in ["),t("code",[e._v("labelPropertyName")]),e._v("])")]),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{"),t("br"),e._v(" selectedOption: '',"),t("br"),e._v(" loaderActive: 'loading.',"),t("br"),e._v(" resultsRetrieved: '{number} options in drop down.',"),t("br"),e._v(" optionAdded: 'option {label} added to selected list.',"),t("br"),e._v(" optionToRemoveSelected: 'option {label} from selected list marked for removal. Press delete or backspace to remove.',"),t("br"),e._v(" optionRemoved: 'option {label} removed.'"),t("br"),e._v("}")])]),e._v(" "),t("tr",[t("td",[e._v("chipsRemovable")]),e._v(" "),t("td",[e._v("define if selected options chips should come with a remove icon")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("defaultEntry")]),e._v(" "),t("td",[e._v("define a default entry"),t("br"),e._v("will be added when component is mounted and selected list is initially empty"),t("br"),e._v("properties:"),t("br"),t("strong",[e._v("label|*")]),e._v(" "),t("code",[e._v("string")]),e._v(": the label of the default option - use the property name set via prop "),t("code",[e._v("labelPropertyName")]),t("br"),t("strong",[e._v("id|*")]),e._v(" "),t("code",[e._v("string?")]),e._v(": (optional) identifier of the default option - use the property name set via prop "),t("code",[e._v("identifierPropertyName")])]),e._v(" "),t("td",[e._v("object|null")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("null")])]),e._v(" "),t("tr",[t("td",[e._v("highlightStringMatch")]),e._v(" "),t("td",[e._v("set this flag to "),t("code",[e._v("true")]),e._v(" to highlight autocomplete option characters that match"),t("br"),e._v(" the current search input string"),t("br"),t("br"),e._v(" "),t("strong",[e._v("caveat")]),e._v(": setting this variable "),t("code",[e._v("true")]),e._v(" can lead to XSS attacks. Only use"),t("br"),e._v(" this prop on trusted content and never on user-provided content.")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("highlightStringTags")]),e._v(" "),t("td",[e._v("if "),t("code",[e._v("highlightAutocompleteMatch")]),e._v(" is set "),t("code",[e._v("true")]),t("br"),e._v(" provide tag names to style the matched characters"),t("br"),e._v(" (without '<' and '>', e.g. ['b'] for <b>)")]),e._v(" "),t("td",[e._v("array")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("[]")])]),e._v(" "),t("tr",[t("td",[e._v("interpretChipsLabelAsHtml")]),e._v(" "),t("td",[e._v("if necessary selected chip text can"),t("br"),e._v(" be rendered as v-html directive"),t("br"),t("br"),e._v(" "),t("strong",[e._v("caveat")]),e._v(": setting this variable "),t("code",[e._v("true")]),e._v(" can lead to XSS attacks. Only use"),t("br"),e._v(" this prop on trusted content and never on user-provided content.")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])])])]),e._v(" "),t("h2",{attrs:{id:"events"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[e._v("#")]),e._v(" Events")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Event name")]),e._v(" "),t("th",[e._v("Properties")]),e._v(" "),t("th",[e._v("Description")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("fetch-dropdown-entries")]),e._v(" "),t("td",[t("strong",[e._v("value")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the input string"),t("br"),t("strong",[e._v("type")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the "),t("code",[e._v("labelPropertyName")]),e._v(" that was specified")]),e._v(" "),t("td",[e._v("event to fetch drop down entries with changing input")])]),e._v(" "),t("tr",[t("td",[e._v("selected-changed")]),e._v(" "),t("td",[t("strong",[e._v("undefined")]),e._v(" "),t("code",[e._v("Object[]")]),e._v(" - the altered selectedList")]),e._v(" "),t("td",[e._v("inform parent of changes to selectedList")])]),e._v(" "),t("tr",[t("td",[e._v("hoverbox-active")]),e._v(" "),t("td",[t("strong",[e._v("value")]),e._v(" "),t("code",[e._v("boolean")]),e._v(" - value describing if hoverbox active is true or false"),t("br"),t("strong",[e._v("option")]),e._v(" "),t("code",[e._v("Object")]),e._v(" - the option for which the hoverbox was activated")]),e._v(" "),t("td",[e._v("event emitted on show / hide hoverbox")])])])]),e._v(" "),t("h2",{attrs:{id:"slots"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#slots"}},[e._v("#")]),e._v(" Slots")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Name")]),e._v(" "),t("th",[e._v("Description")]),e._v(" "),t("th",[e._v("Bindings")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("drop-down-entry")]),e._v(" "),t("td",[e._v("a slot to provide more advanced drop down entries per default only the "),t("code",[e._v("Object[labelPropertyName][?lang]")]),e._v(" will be displayed")]),e._v(" "),t("td",[t("strong",[e._v("item")]),e._v(" "),t("code",[e._v("Object")]),e._v(" - the option passed to options list")])]),e._v(" "),t("tr",[t("td",[e._v("no-options")]),e._v(" "),t("td",[e._v("a slot to customize messages in case of no options present in drop down")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("below-input")]),e._v(" "),t("td",[e._v("to add elements below input fields e.g. add drop down")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("label-addition")]),e._v(" "),t("td",[e._v("Slot to allow for additional elements on the right side of the label row <div> (e.g. language tabs)). for an example see "),t("a",{attrs:{href:"BaseChipsInputField"}},[e._v("BaseChipsInputField")])]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("pre-input-field")]),e._v(" "),t("td",[e._v("slot to add elements within the form field but in a row before the actual input field. for an example see "),t("a",{attrs:{href:"BaseChipsInputField"}},[e._v("BaseChipsInputField")])]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("input-field-addition-before")]),e._v(" "),t("td",[e._v("Slot to allow for additional elements in the input field &lt;div&gt; (before <input>). for an example see "),t("a",{attrs:{href:"BaseChipsInputField"}},[e._v("BaseChipsInputField")])]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("input-field-inline-before")]),e._v(" "),t("td",[e._v("to add elements directly inline before the input (contrary to "),t("code",[e._v("input-field-addition-before")]),e._v(" this does not wrap. for an example see "),t("a",{attrs:{href:"BaseChipsInputField"}},[e._v("BaseChipsInputField")])]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("input-field-addition-after")]),e._v(" "),t("td",[e._v("for adding elements after input")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("post-input-field")]),e._v(" "),t("td",[e._v("for adding elements at the end covering the whole height. for an example see "),t("a",{attrs:{href:"BaseChipsInputField"}},[e._v("BaseChipsInputField")])]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("error-icon")]),e._v(" "),t("td",[e._v("use a custom icon instead of standard error/warning icon. for an example see "),t("a",{attrs:{href:"BaseChipsInputField"}},[e._v("BaseChipsInputField")]),e._v(".")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("remove-icon")]),e._v(" "),t("td",[e._v("use a custom icon instead of standard remove icon. for an example see "),t("a",{attrs:{href:"BaseChipsInputField"}},[e._v("BaseChipsInputField")]),e._v(".")]),e._v(" "),t("td")])])]),e._v(" "),t("hr"),e._v(" "),t("h2",{attrs:{id:"demo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[e._v("#")]),e._v(" Demo")]),e._v(" "),t("p",[e._v("Simple Single Choice Example with fixed dropdown, no unknown, not draggable")]),e._v(" "),t("p",[e._v("Additionally, to the custom events listed above also all native input events are available.")]),e._v(" "),t("no-ssr",[t("vue-live",{attrs:{layoutProps:{lang:"vue"},code:'<template>\n  <base-chips-input\n    :list="list"\n    :allow-multiple-entries="false"\n    :always-linked="true"\n    :default-entry="{\n      label: \'...alle VerhÃ¤ltnisse umzuwerfen\',\n    }"\n    identifier-property-name="id"\n    label-property-name="label"\n    label="Single Choice with fixed DropDown"\n    placeholder="Select Quote Snippet"\n  >\n    <template #no-options>\n      A customized message that no options are available\n    </template>\n  </base-chips-input>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      list: [\n        {\n          label: "...alle VerhÃ¤ltnisse umzuwerfen",\n          id: "...alle VerhÃ¤ltnisse umzuwerfen",\n        },\n        {\n          label: "in denen der Mensch",\n          id: "in denen der Mensch",\n        },\n        {\n          label: "ein erniedrigtes, ein geknechtetes",\n          id: "ein erniedrigtes, ein geknechtetes",\n        },\n        {\n          label: "Wesen ist",\n          id: "Wesen ist",\n        },\n      ],\n    };\n  },\n};\n<\/script>\n',requires:{}}})],1),t("p",[e._v("Multiple Entries Example with fixed dropdown, no unknown and draggable")]),e._v(" "),t("no-ssr",[t("vue-live",{attrs:{layoutProps:{lang:"vue"},code:'<template>\n  <base-chips-input\n    :list="list"\n    :always-linked="true"\n    :draggable="true"\n    identifier-property-name="id"\n    label-property-name="label"\n    label="Multipe Choice with fixed DropDown"\n    placeholder="Select Quote Snippet"\n  />\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      list: [\n        {\n          label: "...alle VerhÃ¤ltnisse umzuwerfen",\n          id: "...alle VerhÃ¤ltnisse umzuwerfen",\n        },\n        {\n          label: "in denen der Mensch",\n          id: "in denen der Mensch",\n        },\n        {\n          label: "ein erniedrigtes, ein geknechtetes",\n          id: "ein erniedrigtes, ein geknechtetes",\n        },\n        {\n          label: "Wesen ist",\n          id: "Wesen ist",\n        },\n      ],\n    };\n  },\n};\n<\/script>\n',requires:{}}})],1)],1)}),[],!1,null,null,null);t.default=_.exports}}]);