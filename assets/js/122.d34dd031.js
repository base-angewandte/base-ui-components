(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{1348:function(e,n,t){"use strict";t.r(n);var r=t(35),l=Object(r.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"basecollapsedfilterrow"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#basecollapsedfilterrow"}},[e._v("#")]),e._v(" BaseCollapsedFilterRow")]),e._v(" "),n("hr"),e._v(" "),n("h2",{attrs:{id:"demo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[e._v("#")]),e._v(" Demo")]),e._v(" "),n("p",[e._v("Search functionality with simple freetext and advanced search")]),e._v(" "),n("p",[e._v("To see autocomplete results try typing 'zentrum'.")]),e._v(" "),n("no-ssr",[n("vue-live",{attrs:{layoutProps:{lang:"vue"},code:'<template>\n  <div class="background">\n    <BaseAdvancedSearch\n      :applied-filters.sync="appliedFilters"\n      :filter-list="filterList"\n      :autocomplete-results="autocompleteResults"\n      :label-property-name="{\n        filter: \'label\',\n        autocompleteOption: \'header\',\n        controlledVocabularyOption: \'label\'\n      }"\n      :identifier-property-name="{\n        filter: \'label\',\n        autocompleteOption: \'id\',\n        controlledVocabularyOption: \'id\'\n      }"\n      :autocompletePropertyNames="{\n        label: \'collection\',\n        id: \'collection\',\n        data: \'data\'\n      }"\n      @add-filter="addFilter"\n      @fetch-autocomplete="fetchAutocomplete"\n    />\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      appliedFilters: [],\n      filterList: [\n        {\n          label: "Filter Text",\n          type: "text"\n        },\n        {\n          label: "Filter Chips Autocomplete",\n          type: "chips",\n          freetext_allowed: true\n        },\n        {\n          label: "Filter Chips Autocomplete 2",\n          type: "chips",\n          freetext_allowed: true\n        },\n        {\n          label: "Filter Chips Controlled",\n          type: "chips",\n          freetext_allowed: false,\n          options: [\n            {\n              label: "Test1",\n              id: "Test1"\n            },\n            {\n              label: "Test2",\n              id: "Test2"\n            }\n          ]\n        },\n        {\n          label: "Filter Chips Single",\n          type: "chipssingle",\n          freetext_allowed: false,\n          options: [\n            {\n              label: "Test1",\n              id: "Test1"\n            }\n          ]\n        },\n        {\n          label: "Filter Daterange",\n          type: "daterange"\n        },\n        {\n          label: "Filter Date",\n          type: "date"\n        }\n      ],\n      autocompleteResults: [],\n      potentialResults: [\n        {\n          collection: "Filter Chips Autocomplete",\n          data: [\n            {\n              id: "i:AtyPMbCGvo87shMwRZikwQ",\n              score: 13.0,\n              header: "Zebra - Zentrum für Klassische und Moderne Fotografie",\n              subtext: ["Wien, Austria"]\n            },\n            {\n              id: "i:kK2kZPzffLknjWhuHxU6sa",\n              score: 13.0,\n              header: "Zentrum für Erwachsenenbildung",\n              subtext: ["Strobl"]\n            },\n            {\n              id: "i:QpNo2ZUPzPKM7wJDSy7F4h",\n              score: 13.0,\n              header: "H2 - Zentrum für Gegenwartskunst",\n              subtext: ["Augsburg"]\n            },\n            {\n              id: "i:A6iu4gLU7bGS5kpAE9pTUf",\n              score: 13.0,\n              header:\n                "Tomi Ungerer Museum - Internationales Zentrum für Illustration",\n              subtext: ["Strasbourg"]\n            },\n            {\n              id: "i:FmHikVmyQJuyynSx7NCsNe",\n              score: 13.0,\n              header: "Zentrum für Interdisziplinäre Forschnung",\n              subtext: ["ZIF", "Bielefeld"]\n            },\n            {\n              id: "i:R4YjbtHGNsbKzfwyRDF5XJ",\n              score: 13.0,\n              header: "BrotfabrikGalerie",\n              subtext: ["Zentrum für Kunst & Kultur", "Berlin, AT"]\n            },\n            {\n              id: "i:PYqY6pTrmUgZpnRRhmkgY6",\n              score: 13.0,\n              header: "Zentrum für Kunst und Kommunikation",\n              subtext: ["Z.K.K.", "Wien, Austria"]\n            },\n            {\n              id: "i:gpptGbzV9f7uYAmxTjyjMg",\n              score: 13.0,\n              header: "Zentrum für Kunst und Medientechnologie",\n              subtext: ["ZKM", "Karlsruhe"]\n            },\n            {\n              id: "i:Q4AAfWUC6GkHUdRxc7ChxC",\n              score: 13.0,\n              header: "Open Space - Zentrum für Kunstprojekte",\n              subtext: ["Wien, Austria"]\n            },\n            {\n              id: "i:SxX6iZszMJv7M7n54ej6BK",\n              score: 13.0,\n              header: "Zentrum für Literatur- und Kulturforschung Berlin",\n              subtext: [\n                "Geisteswissenschaftliche Zentren Berlin e.V.",\n                "Berlin"\n              ]\n            }\n          ]\n        },\n        {\n          collection: "Filter Chips Autocomplete 2",\n          data: [\n            {\n              id: "i:qQCn2jtewXhKnLVsFaHgk6",\n              score: 13.0,\n              header:\n                "Artist-in-Residenz, Zentrum für Kunst und Medien, Institut für Visuelle Medien, Karlsruhe",\n              subtext: []\n            },\n            {\n              id: "i:X44M8fjtLCXfYvhVMo4gRP",\n              score: 13.0,\n              header:\n                \'Ankauf "Interactive Plant Growing", Zentrum für Medientechnologie Karlsruhe, Germany\',\n              subtext: []\n            }\n          ]\n        }\n      ]\n    };\n  },\n  methods: {\n    addFilter() {\n      alert("Filter added!");\n    },\n    fetchAutocomplete({ searchString, filter }) {\n      if (\n        searchString &&\n        (filter.type === "text" ||\n          (filter.type === "chips" && filter.freetext_allowed))\n      ) {\n        setTimeout(() => {\n          this.autocompleteResults = this.potentialResults.map(\n            ({ collection, data }) => {\n              const filteredResults = data.filter(entry =>\n                entry.header.toLowerCase().includes(searchString.toLowerCase())\n              );\n              return {\n                collection,\n                data: filteredResults\n              };\n            }\n          );\n        }, 1000);\n      } else {\n        this.autocompleteResults = [];\n      }\n    }\n  }\n};\n<\/script>\n\n<style>\n.background {\n  background: rgb(240, 240, 240);\n  padding: 16px;\n}\n</style>\n',requires:{}}})],1)],1)}),[],!1,null,null,null);n.default=l.exports}}]);