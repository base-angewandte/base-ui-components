(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{1475:function(e,t,n){"use strict";n.r(t);var a=n(34),o=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"baseinfopanel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#baseinfopanel"}},[e._v("#")]),e._v(" BaseInfoPanel")]),e._v(" "),t("h2",{attrs:{id:"props"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[e._v("#")]),e._v(" Props")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Prop name")]),e._v(" "),t("th",[e._v("Description")]),e._v(" "),t("th",[e._v("Type")]),e._v(" "),t("th",[e._v("Values")]),e._v(" "),t("th",[e._v("Default")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("iconName")]),e._v(" "),t("td",[e._v("specify the name of the icon rendered on the left side or use slot "),t("code",[e._v("icon")]),e._v("."),t("br"),e._v(" (see "),t("a",{attrs:{href:"BaseIcon"}},[e._v("BaseIcon")]),e._v(" for available icons)."),t("br"),e._v(" if no icon should be displayed leave the section empty.")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("'attention'")])]),e._v(" "),t("tr",[t("td",[e._v("alignIcon")]),e._v(" "),t("td",[e._v("define if icon should be aligned "),t("code",[e._v("top")]),e._v(" or "),t("code",[e._v("center")]),e._v("."),t("br"),e._v(" if prop "),t("code",[e._v("expandable")]),e._v(" is true the default is "),t("code",[e._v("top")]),e._v(" otherwise the default is "),t("code",[e._v("center")]),e._v(".")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[t("code",[e._v("top")]),e._v(", "),t("code",[e._v("center")])]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("panelStyle")]),e._v(" "),t("td",[e._v("define the styling of the panel (influences e.g. icon size or padding).")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[t("code",[e._v("large")]),e._v(", "),t("code",[e._v("medium")])]),e._v(" "),t("td",[e._v("'large'")])]),e._v(" "),t("tr",[t("td",[e._v("boxShadow")]),e._v(" "),t("td",[e._v("should box shadow be visible (useful to turn of if component should"),t("br"),e._v(" be rendered inside another box e.g.).")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("panelHeaderText")]),e._v(" "),t("td",[e._v("the panel header text or use slot "),t("code",[e._v("header")]),e._v(" instead.")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("renderPanelHeaderAs")]),e._v(" "),t("td",[e._v("define the HTML element as which the header should be rendered.")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("'h2'")])]),e._v(" "),t("tr",[t("td",[e._v("text")]),e._v(" "),t("td",[e._v("define panel body text or use slot "),t("code",[e._v("text")]),e._v(" instead.")]),e._v(" "),t("td",[e._v("string|array")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("buttonsConfig")]),e._v(" "),t("td",[e._v("add buttons at the end of the text element via this config and it will"),t("br"),e._v(" render "),t("a",{attrs:{href:"BaseButton"}},[e._v("BaseButton")]),e._v(" elements - this should be an array of objects with the following"),t("br"),e._v(" properties:"),t("br"),t("br"),e._v(" "),t("strong",[t("code",[e._v("id")])]),e._v(": identifier that will also be emitted via "),t("code",[e._v("action")]),e._v(" event on button click"),t("br"),e._v(" "),t("strong",[t("code",[e._v("label?")])]),e._v(": button label"),t("br"),e._v(" "),t("strong",[t("code",[e._v("icon?")])]),e._v(": button icon to be displayed - for available options see "),t("a",{attrs:{href:"BaseIcon"}},[e._v("BaseIcon")]),t("br"),e._v(" "),t("strong",[t("code",[e._v("iconPosition?")])]),e._v(": should icon be displayed "),t("code",[e._v("left")]),e._v(" or "),t("code",[e._v("right")]),e._v(" of button label, default"),t("br"),e._v(" is "),t("code",[e._v("right")]),t("br"),e._v(" "),t("strong",[t("code",[e._v("disabled?")])]),e._v(": set button disabled"),t("br"),t("br"),e._v(" "),t("strong",[e._v("caveat")]),e._v(": "),t("code",[e._v("label")]),e._v(" and "),t("code",[e._v("icon")]),e._v(" property are optional but at least one of them needs to be"),t("br"),e._v(" specified!")]),e._v(" "),t("td",[e._v("array")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("[]")])]),e._v(" "),t("tr",[t("td",[e._v("expandable")]),e._v(" "),t("td",[e._v("if set true an "),t("a",{attrs:{href:"BaseExpandBox"}},[e._v("BaseExpandBox")]),e._v(" is rendered inside the text body"),t("br"),e._v(" config for this BaseExpandBox can be set via "),t("code",[e._v("expandBoxConfig")]),e._v(" prop.")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("expandBoxConfig")]),e._v(" "),t("td",[e._v("if prop "),t("code",[e._v("expandable")]),e._v(" is set true use this prop to configure the BaseExpandBox element."),t("br"),e._v(" See "),t("a",{attrs:{href:"BaseExpandBox#props"}},[e._v("BaseExpandBox")]),e._v(" for available options.")]),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{}")])])])]),e._v(" "),t("h2",{attrs:{id:"events"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[e._v("#")]),e._v(" Events")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Event name")]),e._v(" "),t("th",[e._v("Properties")]),e._v(" "),t("th",[e._v("Description")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("action")]),e._v(" "),t("td",[t("strong",[e._v("undefined")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the id of the button clicked")]),e._v(" "),t("td",[e._v("inform parent of button click")])])])]),e._v(" "),t("h2",{attrs:{id:"slots"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#slots"}},[e._v("#")]),e._v(" Slots")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Name")]),e._v(" "),t("th",[e._v("Description")]),e._v(" "),t("th",[e._v("Bindings")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("icon")]),e._v(" "),t("td",[e._v("replace the left side icon element")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("header")]),e._v(" "),t("td",[e._v("replace the header instead of using "),t("code",[e._v("panelHeaderText")])]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("text")]),e._v(" "),t("td",[e._v("replace the text body with something custom e.g. BaseTextList")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("bottom")]),e._v(" "),t("td",[e._v("replace buttons with custom elements or add some other custom element. If body is expandable these elements are rendered within the expand box.")]),e._v(" "),t("td")])])]),e._v(" "),t("hr"),e._v(" "),t("h2",{attrs:{id:"demo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[e._v("#")]),e._v(" Demo")]),e._v(" "),t("p",[e._v("A simple example")]),e._v(" "),t("no-ssr",[t("vue-live",{attrs:{layoutProps:{lang:"vue"},code:'<template>\n  <div class="background">\n    <BaseInfoPanel\n      :buttons-config="[\n        {\n          id: \'return\',\n          label: \'Return\',\n          icon: \'home\',\n        },\n      ]"\n      :render-panel-header-as="\'h1\'"\n      icon-name="attention"\n      panel-header-text="Error found"\n      :text="[\'Site was not found\']"\n      @action="alert"\n    />\n  </div>\n</template>\n\n<script>\nexport default {\n  methods: {\n    alert(action) {\n      window.alert(`action with id "${action}" triggered!`);\n    },\n  },\n};\n<\/script>\n\n<style scoped>\n.background {\n  padding: 16px;\n  background: rgb(240, 240, 240);\n}\n</style>\n',requires:{}}})],1),t("p",[e._v("Expandable example using more config and slots")]),e._v(" "),t("no-ssr",[t("vue-live",{attrs:{layoutProps:{lang:"vue"},code:'<template>\n  <div class="background">\n    <BaseInfoPanel\n      align-icon="top"\n      panel-style="medium"\n      :expandable="true"\n      :expand-box-config="{\n        showMoreText: \'Expand\',\n        showLessText: \'Collapse\',\n      }"\n      class="expand-panel"\n    >\n      <template #header>\n        <h4>Curriculum Information</h4>\n      </template>\n      <template #icon>\n        <BaseIcon name="information" class="info-icon" />\n      </template>\n      <template #text>\n        <div class="panel-body">\n          <p class="paragraph">Study duration: 8 Semesters</p>\n          <div class="paragraph">\n            <p>First Study Part: 2 Semesters</p>\n            <p>Final: 1. Diploma Exam</p>\n          </div>\n          <div class="paragraph">\n            <p>Second Study Part: 6 Semesters</p>\n            <p>Final: 2. Diploma Exam</p>\n            <p>\n              The exam consists of lectures evaluated positively and all partial\n              exams passed in from of the exam senate.\n            </p>\n          </div>\n        </div>\n      </template>\n      <template #bottom>\n        <BaseButton\n          text="Download Curriculum"\n          icon="download"\n          icon-position="right"\n          @clicked="alert"\n        />\n      </template>\n    </BaseInfoPanel>\n  </div>\n</template>\n\n<script>\nexport default {\n  methods: {\n    alert() {\n      window.alert(`custom button was clicked!`);\n    },\n  },\n};\n<\/script>\n\n<style lang="scss" scoped>\n.background {\n  padding: 16px;\n  background: rgb(240, 240, 240);\n}\n.expand-panel {\n  padding: 0;\n}\n.info-icon {\n  height: 32px;\n  width: 32px;\n  color: red;\n\n  @media screen and (max-width: 639px) {\n    height: 24px;\n    width: 24px;\n  }\n}\n\n.panel-body {\n  .paragraph {\n    margin-bottom: 16px;\n  }\n}\n</style>\n',requires:{}}})],1)],1)}),[],!1,null,null,null);t.default=o.exports}}]);