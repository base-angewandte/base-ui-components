(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{1468:function(e,t,n){"use strict";n.r(t);var v=n(34),d=Object(v.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"baseinput"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#baseinput"}},[e._v("#")]),e._v(" BaseInput")]),e._v(" "),t("blockquote",[t("p",[e._v("Form Input Field Component")])]),e._v(" "),t("h2",{attrs:{id:"props"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[e._v("#")]),e._v(" Props")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Prop name")]),e._v(" "),t("th",[e._v("Description")]),e._v(" "),t("th",[e._v("Type")]),e._v(" "),t("th",[e._v("Values")]),e._v(" "),t("th",[e._v("Default")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("v-model")]),e._v(" "),t("td",[e._v("input field settable from outside")]),e._v(" "),t("td",[e._v("string|number")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("label")]),e._v(" "),t("td",[e._v("label for input field, required for usability purposes, handle"),t("br"),e._v("showing of label with property "),t("code",[e._v("showLabel")])]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("showLabel")]),e._v(" "),t("td",[e._v("defines if input label should be visible")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("id")]),e._v(" "),t("td",[e._v("if field is occurring more then once - set an "),t("code",[e._v("id")]),t("br"),t("strong",[e._v("caveat")]),e._v(": in case a custom input is used with the "),t("code",[e._v("input")]),e._v(" slot it is important to"),t("br"),e._v("assign the same id to the input element")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("placeholder")]),e._v(" "),t("td",[e._v("set a placeholder for the input field")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("'Enter Text Here'")])]),e._v(" "),t("tr",[t("td",[e._v("required")]),e._v(" "),t("td",[e._v("mark as required field")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("invalid")]),e._v(" "),t("td",[e._v("mark the form field as invalid and ideally also provide an error message"),t("br"),e._v("to display below the form field")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("errorMessage")]),e._v(" "),t("td",[e._v("add an error message to be displayed below form field if field is invalid")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("showErrorIcon")]),e._v(" "),t("td",[e._v("define if error icon should be shown")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("fieldType")]),e._v(" "),t("td",[e._v("specify input type")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[t("code",[e._v("text")]),e._v(", "),t("code",[e._v("number")]),e._v(", "),t("code",[e._v("password")]),e._v(", "),t("code",[e._v("email")]),e._v(", "),t("code",[e._v("url")]),e._v(", "),t("code",[e._v("search")])]),e._v(" "),t("td",[e._v("'text'")])]),e._v(" "),t("tr",[t("td",[e._v("dropDownListId")]),e._v(" "),t("td",[e._v("specify the id of a linked drop down list")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("linkedListOption")]),e._v(" "),t("td",[e._v("specify a linked list option (e.g. drop down)"),t("br"),e._v(" (will be used in "),t("code",[e._v("aria-activedescendant")]),e._v(" attribute)")]),e._v(" "),t("td",[e._v("number|string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("null")])]),e._v(" "),t("tr",[t("td",[e._v("hideInputField")]),e._v(" "),t("td",[e._v("option to hide input field from outside (required for chips input)")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("isActive")]),e._v(" "),t("td",[e._v("set input field in active state from outside"),t("br"),e._v("the "),t("code",[e._v(".sync")]),e._v(" modifier can be used on this prop")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("null")])]),e._v(" "),t("tr",[t("td",[e._v("showInputBorder")]),e._v(" "),t("td",[e._v("option to have the border of the input field not displayed")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("useFormFieldStyling")]),e._v(" "),t("td",[e._v("define if standard form field styling should be"),t("br"),e._v("used (otherwise no border, no box shadow)")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("clearable")]),e._v(" "),t("td",[e._v("if "),t("code",[e._v("true")]),e._v(" a remove icon (or custom icon if slot "),t("code",[e._v("remove-icon")]),e._v(" is used) will be shown allowing to remove"),t("br"),e._v("all input at once")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("loadable")]),e._v(" "),t("td",[e._v("if "),t("code",[e._v("true")]),e._v(" space is reserved for a loader that can be activated"),t("br"),e._v("with the "),t("code",[e._v("isLoading")]),e._v(" prop")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("isLoading")]),e._v(" "),t("td",[e._v("show spinner to indicate that something is loading"),t("br"),e._v("(for dynamically fetched entries that need to do backend requests)")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("useFadeOut")]),e._v(" "),t("td",[e._v("turn off input fade out if it interferes with other styling (e.g. with custom input)")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("inputClass")]),e._v(" "),t("td",[e._v("specify additional input field styling")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("language")]),e._v(" "),t("td",[e._v("set a language (ISO 639-1)")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("''")])]),e._v(" "),t("tr",[t("td",[e._v("setFocusOnActive")]),e._v(" "),t("td",[e._v("use this prop to deactivate automatic setting of focus as soon as input element"),t("br"),e._v("becomes active - this might require external handling of focus setting!")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("disabled")]),e._v(" "),t("td",[e._v("set "),t("code",[e._v("true")]),e._v(" if input field should be disabled")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("minLength")]),e._v(" "),t("td",[e._v("set min length of characters")]),e._v(" "),t("td",[e._v("number")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("null")])]),e._v(" "),t("tr",[t("td",[e._v("maxLength")]),e._v(" "),t("td",[e._v("set max length of characters")]),e._v(" "),t("td",[e._v("number")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("null")])]),e._v(" "),t("tr",[t("td",[e._v("decimals")]),e._v(" "),t("td",[e._v("set number of decimals (fieldType=number)<br>"),t("br"),e._v("Note: -1 is used for endless decimals")]),e._v(" "),t("td",[e._v("number")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("null")])]),e._v(" "),t("tr",[t("td",[e._v("decimalSeparator")]),e._v(" "),t("td",[e._v("set decimal separator character, e.g. ',' for german")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("'.'")])]),e._v(" "),t("tr",[t("td",[e._v("min")]),e._v(" "),t("td",[e._v("set minimum value to accept")]),e._v(" "),t("td",[e._v("number")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("null")])]),e._v(" "),t("tr",[t("td",[e._v("max")]),e._v(" "),t("td",[e._v("set maximum value to accept")]),e._v(" "),t("td",[e._v("number")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("null")])]),e._v(" "),t("tr",[t("td",[e._v("validationTexts")]),e._v(" "),t("td",[e._v("define validation messages"),t("br"),e._v("currently just for type number")]),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{"),t("br"),e._v(" min: 'Value must be greater than or equal to {value}.',"),t("br"),e._v(" max: 'Value must be less than or equal to {value}.',"),t("br"),e._v(" minLength: 'Text must be at least {value} character(s) long.',"),t("br"),e._v(" maxLength: 'Text cannot be longer than {value} characters.'"),t("br"),e._v("}")])]),e._v(" "),t("tr",[t("td",[e._v("assistiveText")]),e._v(" "),t("td",[e._v("provide assistive text for screen readers"),t("br"),t("strong",[e._v("loaderActive")]),e._v(": if "),t("code",[e._v("loadable")]),e._v(" is set "),t("code",[e._v("true")]),e._v(" this text is read"),t("br"),e._v(" as soon as the loader is appearing ("),t("code",[e._v("isLoading")]),e._v(" is set true)")]),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{"),t("br"),e._v(" loaderActive: 'loading.'"),t("br"),e._v("}")])])])]),e._v(" "),t("h2",{attrs:{id:"events"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[e._v("#")]),e._v(" Events")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Event name")]),e._v(" "),t("th",[e._v("Properties")]),e._v(" "),t("th",[e._v("Description")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("input")]),e._v(" "),t("td",[t("strong",[e._v("undefined")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the input event value however")]),e._v(" "),t("td",[e._v("Event emitted on input, passing input string")])]),e._v(" "),t("tr",[t("td",[e._v("blur")]),e._v(" "),t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("update:is-active")]),e._v(" "),t("td",[t("strong",[e._v("undefined")]),e._v(" "),t("code",[e._v("boolean")]),e._v(" - is input field active")]),e._v(" "),t("td",[e._v("propagate active state changes of input field to parent")])]),e._v(" "),t("tr",[t("td",[e._v("update:invalid")]),e._v(" "),t("td",[t("strong",[e._v("val")]),e._v(" "),t("code",[e._v("boolean")]),e._v(" - undefined")]),e._v(" "),t("td",[e._v("propagate invalid state changes of input field to parent")])]),e._v(" "),t("tr",[t("td",[e._v("keydown")]),e._v(" "),t("td"),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("click-input-field")]),e._v(" "),t("td",[t("strong",[e._v("undefined")]),e._v(" "),t("code",[e._v("FocusEvent, MouseEvent")]),e._v(" - event triggered by focusin or click")]),e._v(" "),t("td",[e._v("Event emitted on click on input field <div>")])]),e._v(" "),t("tr",[t("td",[e._v("clicked-outside")]),e._v(" "),t("td",[t("strong",[e._v("undefined")]),e._v(" "),t("code",[e._v("MouseEvent")]),e._v(" - the native mouse event")]),e._v(" "),t("td",[e._v("Event emitted when click outside input field <div> is registered")])])])]),e._v(" "),t("h2",{attrs:{id:"slots"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#slots"}},[e._v("#")]),e._v(" Slots")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Name")]),e._v(" "),t("th",[e._v("Description")]),e._v(" "),t("th",[e._v("Bindings")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("label-addition")]),e._v(" "),t("td",[e._v("Slot to allow for additional elements on the right side of the label row <div> (e.g. language tabs))")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("pre-input-field")]),e._v(" "),t("td",[e._v("add elements before the actual input line but within the input field container")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("input-field-addition-before")]),e._v(" "),t("td",[e._v("Slot to allow for additional elements in the input field <div> (e.g. chips) (before <input>)")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("input-field-inline-before")]),e._v(" "),t("td",[e._v("to add elements directly inline before the input (contrary to input-field-addition-before this does not wrap")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("input")]),e._v(" "),t("td",[e._v("replace native HTML input element with custom input")]),e._v(" "),t("td",[t("strong",[e._v("id")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the id of the BaseInput component - if "),t("code",[e._v("id")]),e._v(" is not provided in props this is an internal id that should also be set as <input> "),t("code",[e._v("id")])])]),e._v(" "),t("tr",[t("td",[e._v("remove-icon")]),e._v(" "),t("td",[e._v("use a custom icon instead of standard remove icon")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("input-field-addition-after")]),e._v(" "),t("td",[e._v("for adding elements after input (e.g. used to add loader)")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("error-icon")]),e._v(" "),t("td",[e._v("use a custom icon instead of standard error/warning icon")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("post-input-field")]),e._v(" "),t("td",[e._v("after the actual input element over whole height of the input field container")]),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("below-input")]),e._v(" "),t("td",[e._v("below-input slot added to e.g. add drop down")]),e._v(" "),t("td")])])]),e._v(" "),t("hr"),e._v(" "),t("h2",{attrs:{id:"demo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[e._v("#")]),e._v(" Demo")]),e._v(" "),t("p",[e._v("A simple example without label")]),e._v(" "),t("no-ssr",[t("vue-live",{attrs:{layoutProps:{lang:"vue"},code:'<template>\n  <BaseInput\n    id="simpleexample"\n    label="This label says Specify any text below"\n    placeholder="A custom placeholder"\n  />\n</template>\n<script>\nexport default {};\n<\/script>\n',requires:{}}})],1),t("p",[e._v("A example with label and slot demonstrations. Also enter text to see clearable state or toggle controls to see various properties such as invalid state and the "),t("code",[e._v("below-input")]),e._v(" slot.\nAlso it is demonstrated here how to use the "),t("code",[e._v("isActive")]),e._v(" prop.")]),e._v(" "),t("p",[e._v("All events emitted by the native input element (e.g. "),t("code",[e._v("@keydown")]),e._v(") contained in the BaseInput component are also available.")]),e._v(" "),t("no-ssr",[t("vue-live",{attrs:{layoutProps:{lang:"vue"},code:'<template>\n  <div>\n    <BaseInput\n      id="withslot"\n      :key="\'input_\' + key"\n      v-model="input"\n      :invalid="invalid"\n      :disabled="disabled"\n      :required="true"\n      :isActive="inputActive || dropdownActive"\n      :clearable="clearable"\n      :use-form-field-styling="useFormFieldStyling"\n      :show-input-border="showInputBorder"\n      :show-label="showLabel"\n      :show-error-icon="showErrorIcon"\n      :field-type="type.value"\n      :loadable="true"\n      :decimals="decimals"\n      :decimal-separator="language.value === \'de\' ? \',\' : \'.\'"\n      :min="min"\n      :max="max"\n      :min-length="minLength"\n      :max-length="maxLength"\n      :is-loading="isLoading"\n      error-message="Your field is invalid"\n      label="This label says Specify any text below"\n      placeholder="A custom placeholder"\n      @click-input-field="inputActive = true"\n      @clicked-outside="inputActive = false"\n    >\n      <template #label-addition>\n        <div>label-addition</div>\n      </template>\n      <template #pre-input-field>\n        <div class="pre-input-field">pre-input-field</div>\n      </template>\n      <template #input-field-addition-before>\n        <span class="input-field-addition-before"\n          >input-field-addition-before</span\n        >\n      </template>\n      <template #input-field-inline-before>\n        <span class="input-field-inline-before">input-field-inline-before</span>\n      </template>\n      <template #below-input>\n        <div v-if="dropdownActive" class="drop-down-slot">\n          Text Box Below Input - e.g. for a drop down\n        </div>\n      </template>\n      <template #input-field-addition-after>\n        <span class="input-field-addition-after">\n          input-field-addition-after\n        </span>\n      </template>\n      <template #post-input-field>\n        <span class="post-input-field"> post-input-field </span>\n      </template>\n      <template #remove-icon>\n        <BaseIcon v-if="useCustomRemoveIcon" name="clock" class="icon" />\n      </template>\n      <template #error-icon>\n        <BaseIcon v-if="useCustomErrorIcon" name="eye" class="icon" />\n      </template>\n    </BaseInput>\n    <div class="button-row">\n      <BaseToggle\n        v-model="invalid"\n        label="invalid"\n        name="toggle invalid"\n        class="toggle"\n      />\n      <BaseToggle\n        v-model="disabled"\n        label="disabled"\n        name="toggle disabled"\n        class="toggle"\n      />\n      <BaseToggle\n        v-model="dropdownActive"\n        label="show drop down"\n        name="toggle drop down display"\n        class="toggle"\n      />\n      <BaseToggle\n        v-model="isLoading"\n        label="show loader"\n        name="toggle loader"\n        class="toggle"\n      />\n      <BaseToggle\n        v-model="clearable"\n        label="clearable"\n        name="toggle clearable"\n        class="toggle"\n      />\n      <BaseToggle\n        v-model="showInputBorder"\n        label="input border"\n        name="show input border"\n        class="toggle"\n      />\n      <BaseToggle\n        v-model="useFormFieldStyling"\n        label="form field styling"\n        name="use standard form field styling"\n        class="toggle"\n      />\n      <BaseToggle\n        v-model="showLabel"\n        label="show label"\n        name="show label"\n        class="toggle"\n      />\n      <BaseToggle\n        v-model="showErrorIcon"\n        label="show error icon"\n        name="show error icon"\n        class="toggle"\n      />\n      <BaseToggle\n        v-model="useCustomErrorIcon"\n        :disabled="invalid"\n        label="custom error icon"\n        name="use a custom error icon"\n        class="toggle"\n      />\n      <BaseToggle\n        v-model="useCustomRemoveIcon"\n        :disabled="!!input"\n        label="custom remove icon"\n        name="use a custom remove icon"\n        class="toggle"\n      />\n    </div>\n    <BaseDropDown\n      v-model="type"\n      :options="[\n        {\n          label: \'text\',\n          value: \'text\',\n        },\n        {\n          label: \'number\',\n          value: \'number\',\n        },\n        {\n          label: \'password\',\n          value: \'password\',\n        },\n        {\n          label: \'email\',\n          value: \'email\',\n        },\n        {\n          label: \'url\',\n          value: \'url\',\n        },\n      ]"\n      :show-label="true"\n      label="Field type"\n    />\n\n    <template v-if="type.value !== \'number\'">\n      <div class="row">\n        <BaseInput\n          v-model="minLength"\n          label="min-length"\n          fieldType="number"\n          placeholder="Number of minimal characters"\n          :min="0"\n          class="row__element"\n          @input="updateComponent($event, \'minLength\')"\n        />\n        <BaseInput\n          v-model="maxLength"\n          label="max-length"\n          fieldType="number"\n          placeholder="Number of maximal characters"\n          :min="1"\n          class="row__element"\n          @input="updateComponent($event, \'maxLength\')"\n        />\n      </div>\n    </template>\n    <template v-if="type.value === \'number\'">\n      <div class="row">\n        <BaseInput\n          v-model="decimals"\n          label="Decimals"\n          fieldType="number"\n          placeholder="Number of decimals"\n          :min="0"\n          class="row__element"\n          @input="updateComponent($event, \'decimals\', true)"\n        />\n        <BaseDropDown\n          v-model="language"\n          :options="[\n            {\n              label: \'default\',\n              value: \'en\',\n            },\n            {\n              label: \'german\',\n              value: \'de\',\n            },\n          ]"\n          :show-label="true"\n          label="Decimal Separator"\n          class="row__element"\n          @value-selected="updateComponent"\n        />\n      </div>\n      <div class="row">\n        <BaseInput\n          v-model="min"\n          label="Minimal Value"\n          fieldType="number"\n          placeholder="Minimal Value"\n          class="row__element"\n          @input="updateComponent($event, \'min\')"\n        />\n        <BaseInput\n          v-model="max"\n          label="Maximal Value"\n          fieldType="number"\n          placeholder="Maximal Value"\n          class="row__element"\n          @input="updateComponent($event, \'max\')"\n        />\n      </div>\n    </template>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      invalid: false,\n      disabled: false,\n      dropdownActive: false,\n      inputActive: false,\n      isLoading: false,\n      clearable: true,\n      useFormFieldStyling: true,\n      showInputBorder: true,\n      showLabel: true,\n      showErrorIcon: true,\n      useCustomRemoveIcon: false,\n      useCustomErrorIcon: false,\n      input: "Test input",\n      type: {\n        label: "text",\n        value: "text",\n      },\n      language: {\n        label: "default",\n        value: "en",\n      },\n      decimals: 0,\n      min: null,\n      max: null,\n      key: 0,\n      minLength: null,\n      maxLength: null,\n    };\n  },\n  watch: {\n    type(val) {\n      if (val.value === "number") {\n        this.input = "";\n      }\n    },\n  },\n  methods: {\n    updateComponent(value, key, resetInput = false) {\n      this.key += 1;\n      if (key && !value) {\n        this[key] = null;\n\n        if (resetInput) {\n          this.input = "";\n        }\n      }\n    },\n  },\n};\n<\/script>\n<style>\n.input-field-addition-before {\n  margin-right: 16px;\n  background-color: lightblue;\n}\n\n.input-field-inline-before {\n  background: darkseagreen;\n}\n\n.input-field-addition-after {\n  background: violet;\n}\n\n.pre-input-field {\n  background: rosybrown;\n  align-self: center;\n  flex: 1 1 25%;\n}\n\n.post-input-field {\n  background: lightgoldenrodyellow;\n  align-self: center;\n  margin-left: 8px;\n}\n\n.drop-down-slot {\n  width: 100%;\n  height: 48px;\n  box-shadow: 0 0 3px 0 rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n}\n\n.icon {\n  height: 16px;\n  margin: 0 8px;\n}\n\n.button-row {\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n  margin-top: 16px;\n}\n\n.toggle {\n  margin-right: 16px;\n}\n\n.row {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 8px;\n}\n\n.row__element {\n  width: calc(50% - 8px);\n}\n</style>\n',requires:{}}})],1)],1)}),[],!1,null,null,null);t.default=d.exports}}]);