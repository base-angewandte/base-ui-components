(window.webpackJsonp=window.webpackJsonp||[]).push([[132],{1435:function(t,e,v){"use strict";v.r(e);var i=v(34),d=Object(i.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"baseautocompleteinput"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#baseautocompleteinput"}},[t._v("#")]),t._v(" BaseAutocompleteInput")]),t._v(" "),e("blockquote",[e("p",[t._v("Input component allowing to select single values from a drop down that are filled into\nthe input field as string")])]),t._v(" "),e("h2",{attrs:{id:"props"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[t._v("#")]),t._v(" Props")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Prop name")]),t._v(" "),e("th",[t._v("Description")]),t._v(" "),e("th",[t._v("Type")]),t._v(" "),e("th",[t._v("Values")]),t._v(" "),e("th",[t._v("Default")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("v-model")]),t._v(" "),e("td",[t._v("input field settable from outside")]),t._v(" "),e("td",[t._v("string|number")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("''")])]),t._v(" "),e("tr",[e("td",[t._v("list")]),t._v(" "),e("td",[t._v("provide a list of options for the drop down."),e("br"),t._v("could be a list of strings or objects - if it is objects if necessary please adapt"),e("br"),t._v("the props "),e("code",[t._v("labelPropertyName")]),t._v(" (value to be displayed) and "),e("code",[t._v("identifierPropertyName")]),t._v(" (used for"),e("br"),t._v("identification) for correct handling")]),t._v(" "),e("td",[t._v("array")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("[]")])]),t._v(" "),e("tr",[e("td",[t._v("label")]),t._v(" "),e("td",[t._v("label for input field, required for usability purposes, handle"),e("br"),t._v("showing of label with property "),e("code",[t._v("showLabel")])]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("showLabel")]),t._v(" "),e("td",[t._v("defines if input label should be visible")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("id")]),t._v(" "),e("td",[t._v("if field is occurring more then once - set an id"),e("br"),t._v("in case a custom input is used with the input slot it is important to"),e("br"),t._v("assign the same id to the input element")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("''")])]),t._v(" "),e("tr",[e("td",[t._v("placeholder")]),t._v(" "),e("td",[t._v("set a placeholder for the input field")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("'Enter Text Here'")])]),t._v(" "),e("tr",[e("td",[t._v("required")]),t._v(" "),e("td",[t._v("mark as required field (currently only used for "),e("code",[t._v("aria-required")]),t._v(")")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("invalid")]),t._v(" "),e("td",[t._v("mark the form field as invalid and ideally also provide an error message"),e("br"),t._v("to display below the form field")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("errorMessage")]),t._v(" "),e("td",[t._v("add an error message to be displayed below form field if field is invalid")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("''")])]),t._v(" "),e("tr",[e("td",[t._v("showErrorIcon")]),t._v(" "),e("td",[t._v("define if error icon should be shown")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("isActive")]),t._v(" "),e("td",[t._v("set input field in active state from outside."),e("br"),t._v("the "),e("code",[t._v(".sync")]),t._v(" modifier can be used on this prop")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("showInputBorder")]),t._v(" "),e("td",[t._v("option to have the border of the input field not displayed")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("useFormFieldStyling")]),t._v(" "),e("td",[t._v("define if standard form field styling should be"),e("br"),t._v("used (otherwise no box shadow)")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("clearable")]),t._v(" "),e("td",[t._v("if "),e("code",[t._v("true")]),t._v(" a remove icon (or a custom icon if slot "),e("code",[t._v("remove-icon")]),t._v(" is used) will be shown allowing to remove"),e("br"),t._v("all input at once")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("loadable")]),t._v(" "),e("td",[t._v("if "),e("code",[t._v("true")]),t._v(" space is reserved for a loader that can be activated"),e("br"),t._v("with the 'isLoading' prop")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("isLoading")]),t._v(" "),e("td",[t._v("show spinner to indicate that something is loading"),e("br"),t._v("(for dynamically fetched entries that need to do backend requests)")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("language")]),t._v(" "),e("td",[t._v("set a language (ISO 639-1)")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("''")])]),t._v(" "),e("tr",[e("td",[t._v("disabled")]),t._v(" "),e("td",[t._v("set "),e("code",[t._v("true")]),t._v(" if input field should be disabled")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("identifierPropertyName")]),t._v(" "),e("td",[t._v("specify the object property that should be used as identifier")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("'id'")])]),t._v(" "),e("tr",[e("td",[t._v("labelPropertyName")]),t._v(" "),e("td",[t._v("specify the object property that should be used as value to be displayed")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("'label'")])]),t._v(" "),e("tr",[e("td",[t._v("dropDownNoOptionsInfo")]),t._v(" "),e("td",[t._v("message displayed when no selectable options are available")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("'No options available'")])]),t._v(" "),e("tr",[e("td",[t._v("dynamicFetch")]),t._v(" "),e("td",[t._v("if this is "),e("code",[t._v("true")]),t._v(" parent needs to take care of filling the options list on string"),e("br"),t._v("input etc. - useful for fetching autocomplete options from a backend")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("highlightStringMatch")]),t._v(" "),e("td",[t._v("set this flag to "),e("code",[t._v("true")]),t._v(" to highlight autocomplete option characters that match"),e("br"),t._v(" the current search input string")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("highlightStringTags")]),t._v(" "),e("td",[t._v("if "),e("code",[t._v("highlightAutocompleteMatch")]),t._v(" is set "),e("code",[t._v("true")]),e("br"),t._v(" provide tag names to style the matched characters"),e("br"),t._v(" (without '<' and '>', e.g. ['b'] for <b>)")]),t._v(" "),e("td",[t._v("array")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("[]")])]),t._v(" "),e("tr",[e("td",[t._v("assistiveText")]),t._v(" "),e("td",[t._v("add text that is announced when results are being fetched (prop"),e("br"),t._v(" "),e("code",[t._v("isLoading")]),t._v(" is set "),e("code",[t._v("true")]),t._v(") and when results were retrieved (drop down"),e("br"),t._v(" list changed)")]),t._v(" "),e("td",[t._v("object")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("{"),e("br"),t._v(" loaderActive: 'Drop down options are loading.',"),e("br"),t._v(" resultsRetrieved: '{number} options found with your input.'"),e("br"),t._v("}")])])])]),t._v(" "),e("h2",{attrs:{id:"events"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[t._v("#")]),t._v(" Events")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Event name")]),t._v(" "),e("th",[t._v("Properties")]),t._v(" "),e("th",[t._v("Description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("input")]),t._v(" "),e("td",[e("strong",[t._v("undefined")]),t._v(" "),e("code",[t._v("string")]),t._v(" - the altered input string")]),t._v(" "),e("td",[t._v("event triggered when input changes - part of v-model")])]),t._v(" "),e("tr",[e("td",[t._v("fetch-dropdown-entries")]),t._v(" "),e("td",[e("strong",[t._v("value")]),t._v(" "),e("code",[t._v("string")]),t._v(" - undefined")]),t._v(" "),e("td",[t._v("an event specifically triggered when drop down should be fetched anew"),e("br"),t._v("when "),e("code",[t._v("dynamicFetch")]),t._v(" is set "),e("code",[t._v("true")])])]),t._v(" "),e("tr",[e("td",[t._v("update:is-active")]),t._v(" "),e("td",[e("strong",[t._v("undefined")]),t._v(" "),e("code",[t._v("boolean")]),t._v(" - is input field active")]),t._v(" "),e("td",[t._v("update when active state of input field changes"),e("br"),t._v("the "),e("code",[t._v(".sync")]),t._v(" modifier can be used on this event")])]),t._v(" "),e("tr",[e("td",[t._v("selected")]),t._v(" "),e("td",[e("strong",[t._v("undefined")]),t._v(" "),e("code",[t._v("string, Object")]),t._v(" - selected option (if list of objects was provided the whole object)")]),t._v(" "),e("td",[t._v("inform parent when an option was selected with all information provided in options list"),e("br"),t._v("(mainly useful when options list was array of objects - if strings this information"),e("br"),t._v("is provided with input event anyways)")])])])]),t._v(" "),e("h2",{attrs:{id:"slots"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#slots"}},[t._v("#")]),t._v(" Slots")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Name")]),t._v(" "),e("th",[t._v("Description")]),t._v(" "),e("th",[t._v("Bindings")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("drop-down-entry")]),t._v(" "),e("td",[t._v("provide custom drop down options")]),t._v(" "),e("td",[e("strong",[t._v("item")]),t._v(" "),e("code",[t._v("string, Object")]),t._v(" - the option from provided options list")])]),t._v(" "),e("tr",[e("td",[t._v("label-addition")]),t._v(" "),e("td",[t._v("Slot to allow for additional elements on the right side of the label row <div> (e.g. language tabs)). for an example see "),e("a",{attrs:{href:"BaseChipsInputField"}},[t._v("BaseChipsInputField")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("pre-input-field")]),t._v(" "),e("td",[t._v("slot to add elements within the form field but in a row before the actual input field. for an example see "),e("a",{attrs:{href:"BaseChipsInputField"}},[t._v("BaseChipsInputField")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("input-field-addition-before")]),t._v(" "),e("td",[t._v("Slot to allow for additional elements in the input field <div> (before <input>). for an example see "),e("a",{attrs:{href:"BaseChipsInputField"}},[t._v("BaseChipsInputField")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("input-field-inline-before")]),t._v(" "),e("td",[t._v("to add elements directly inline before the input (contrary to "),e("code",[t._v("input-field-addition-before")]),t._v(" this does not wrap. for an example see "),e("a",{attrs:{href:"BaseInput"}},[t._v("BaseInput")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("input-field-addition-after")]),t._v(" "),e("td",[t._v("for adding elements after input")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("post-input-field")]),t._v(" "),e("td",[t._v("for adding elements at the end covering the whole height. for an example see "),e("a",{attrs:{href:"BaseChipsInputField"}},[t._v("BaseChipsInputField")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("error-icon")]),t._v(" "),e("td",[t._v("use a custom icon instead of standard error/warning icon. for an example see "),e("a",{attrs:{href:"BaseChipsInputField"}},[t._v("BaseChipsInputField")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("remove-icon")]),t._v(" "),e("td",[t._v("use a custom icon instead of standard remove icon. for an example see "),e("a",{attrs:{href:"BaseChipsInputField"}},[t._v("BaseChipsInputField")])]),t._v(" "),e("td")])])]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"demo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[t._v("#")]),t._v(" Demo")]),t._v(" "),e("p",[t._v("Form Input Field with Dynamic Autocomplete.\nThe Toggle lets you choose if the options are provided as array of strings or objects.")]),t._v(" "),e("no-ssr",[e("vue-live",{attrs:{layoutProps:{lang:"vue"},code:'<template>\n  <div class="form-field base-styling">\n    <BaseToggle v-model="listIsObjects" label="Options is Array of Objects" />\n    <base-autocomplete-input\n      v-model="autocompleteInput"\n      :list="autocompleteResults"\n      :placeholder="\'Select Your Favourite Subject\'"\n      :dynamic-fetch="true"\n      :identifier-property-name="\'value\'"\n      :label-property-name="\'displayValue\'"\n      label="Favourite Subject"\n    />\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      listIsObjects: false,\n      autocompleteInput: "",\n      list: [\n        "Biology",\n        "Math",\n        "English",\n        "Philosophy",\n        "Physical Education",\n        "Physics",\n        "Chemistry",\n        "Psychology",\n      ],\n      list2: [\n        {\n          displayValue: "Biologie",\n          value: "biology",\n        },\n        {\n          displayValue: "Math",\n          value: "math",\n        },\n        {\n          displayValue: "English",\n          value: "english",\n        },\n        {\n          displayValue: "Philosophy",\n          value: "philosophy",\n        },\n        {\n          displayValue: "Physics",\n          value: "physics",\n        },\n      ],\n    };\n  },\n  computed: {\n    initialResults() {\n      return this.listIsObjects ? this.list2 : this.list;\n    },\n    autocompleteResults() {\n      if (this.autocompleteInput) {\n        return this.initialResults.filter((option) =>\n          (option.displayValue || option)\n            .toLowerCase()\n            .includes(this.autocompleteInput.toLowerCase())\n        );\n      }\n      return this.initialResults;\n    },\n  },\n};\n<\/script>\n',requires:{}}})],1)],1)}),[],!1,null,null,null);e.default=d.exports}}]);