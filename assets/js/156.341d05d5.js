(window.webpackJsonp=window.webpackJsonp||[]).push([[156],{1383:function(t,e,n){"use strict";n.r(e);var v=n(35),a=Object(v.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"basesearch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#basesearch"}},[t._v("#")]),t._v(" BaseSearch")]),t._v(" "),e("blockquote",[e("p",[t._v("A basic text search to filter entries or files")])]),t._v(" "),e("h2",{attrs:{id:"props"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[t._v("#")]),t._v(" Props")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Prop name")]),t._v(" "),e("th",[t._v("Description")]),t._v(" "),e("th",[t._v("Type")]),t._v(" "),e("th",[t._v("Values")]),t._v(" "),e("th",[t._v("Default")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("v-model")]),t._v(" "),e("td",[t._v("set input value from outside"),e("br"),t._v(" for type "),e("code",[t._v("daterange")]),t._v(" this needs to be an object with"),e("br"),t._v(" "),e("code",[t._v("date_from")]),t._v(" and "),e("code",[t._v("date_to")]),t._v(" properties!")]),t._v(" "),e("td",[t._v("string|object")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("''")])]),t._v(" "),e("tr",[e("td",[t._v("selectedChips")]),t._v(" "),e("td",[t._v("if input type is "),e("code",[t._v("chips")]),t._v(" this is the prop to"),e("br"),t._v("pass selected options (chips)."),e("br"),t._v(" you may use the "),e("code",[t._v(".sync")]),t._v(" modifier on this prop")]),t._v(" "),e("td",[t._v("array")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("[]")])]),t._v(" "),e("tr",[e("td",[t._v("placeholder")]),t._v(" "),e("td",[t._v("placeholder to show for input; either just a string or an object with"),e("br"),t._v("different text for each search type ("),e("code",[t._v("text")]),t._v(", "),e("code",[t._v("chips")]),t._v(", "),e("code",[t._v("date")]),t._v(")")]),t._v(" "),e("td",[t._v("string|object")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("'Search your works and events'")])]),t._v(" "),e("tr",[e("td",[t._v("label")]),t._v(" "),e("td",[t._v("label connected with input (will not be visible but for usability!)")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("'Search'")])]),t._v(" "),e("tr",[e("td",[t._v("showPreInputIcon")]),t._v(" "),e("td",[t._v("define if the magnifier glass (in front of input field) should be shown")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("dropDownListId")]),t._v(" "),e("td",[t._v("specify the id of a linked drop down list")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("''")])]),t._v(" "),e("tr",[e("td",[t._v("id")]),t._v(" "),e("td",[t._v("specify a field id for identification of the input field"),e("br"),t._v("if none is specified an internal id will be assigned")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("''")])]),t._v(" "),e("tr",[e("td",[t._v("type")]),t._v(" "),e("td",[t._v("specify the type of input field")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[e("code",[t._v("text")]),t._v(", "),e("code",[t._v("chips")]),t._v(", "),e("code",[t._v("controlled")]),t._v(", "),e("code",[t._v("date")]),t._v(", "),e("code",[t._v("daterange")]),t._v(", "),e("code",[t._v("chipssingle")])]),t._v(" "),e("td",[t._v("'text'")])]),t._v(" "),e("tr",[e("td",[t._v("linkedListOption")]),t._v(" "),e("td",[t._v("specify a linked list option (e.g. drop down)"),e("br"),t._v(" (will be used in "),e("code",[t._v("aria-activedescendant")]),t._v(" attribute)")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("loadable")]),t._v(" "),e("td",[t._v("if "),e("code",[t._v("true")]),t._v(" space is reserved for a loader that can be activated"),e("br"),t._v("with the 'isLoading' prop")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("isLoading")]),t._v(" "),e("td",[t._v("is loading indicator - showing loader if "),e("code",[t._v("true")])]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("language")]),t._v(" "),e("td",[t._v("set the language (ISO 639-1)")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("'en'")])]),t._v(" "),e("tr",[e("td",[t._v("identifierPropertyName")]),t._v(" "),e("td",[t._v("specify the object property that should be used as identifier (only needed"),e("br"),t._v("for type "),e("code",[t._v("chips")])]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("'id'")])]),t._v(" "),e("tr",[e("td",[t._v("labelPropertyName")]),t._v(" "),e("td",[t._v("specify the object property that should be used as value to be displayed (only needed"),e("br"),t._v("for type "),e("code",[t._v("chips")])]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("'label'")])]),t._v(" "),e("tr",[e("td",[t._v("invalid")]),t._v(" "),e("td",[t._v("mark the form field as invalid and ideally also provide an error message"),e("br"),t._v("to display below the form field."),e("br"),t._v("for an example see "),e("a",{attrs:{href:"BaseInput"}},[t._v("BaseInput")])]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("showErrorIcon")]),t._v(" "),e("td",[t._v("define if error icon should be shown"),e("br"),t._v("for an example see "),e("a",{attrs:{href:"BaseInput"}},[t._v("BaseInput")])]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("clearable")]),t._v(" "),e("td",[t._v("if "),e("code",[t._v("true")]),t._v(" a remove icon will be shown allowing to remove"),e("br"),t._v("all input at once."),e("br"),t._v("for an example see "),e("a",{attrs:{href:"BaseInput"}},[t._v("BaseInput")])]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("isActive")]),t._v(" "),e("td",[t._v("set active state from outside")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("false")])]),t._v(" "),e("tr",[e("td",[t._v("setFocusOnActive")]),t._v(" "),e("td",[t._v("use this prop to deactivate automatic setting of focus as soon as input element"),e("br"),t._v("becomes active - this might require external handling of focus setting!")]),t._v(" "),e("td",[t._v("boolean")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("assistiveText")]),t._v(" "),e("td",[t._v("this prop gives the option to add assistive text for screen readers"),e("br"),t._v("properties:"),e("br"),e("br"),e("strong",[t._v("selectedOption")]),t._v(": text read when a selected option is focused (currently only"),e("br"),t._v(" working for type chips)")]),t._v(" "),e("td",[t._v("object")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("{}")])]),t._v(" "),e("tr",[e("td",[t._v("dateFieldDelay")]),t._v(" "),e("td",[t._v("use this prop to set a delay in ms before date input calender is displayed")]),t._v(" "),e("td",[t._v("number")]),t._v(" "),e("td",[t._v("-")]),t._v(" "),e("td",[t._v("0")])])])]),t._v(" "),e("h2",{attrs:{id:"events"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[t._v("#")]),t._v(" Events")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Event name")]),t._v(" "),e("th",[t._v("Properties")]),t._v(" "),e("th",[t._v("Description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("input")]),t._v(" "),e("td",[e("strong",[t._v("undefined")]),t._v(" "),e("code",[t._v("string, Object")]),t._v(" - the altered input values")]),t._v(" "),e("td",[t._v("inform parent of changed input values (v-model)")])]),t._v(" "),e("tr",[e("td",[t._v("update:selected-chips")]),t._v(" "),e("td",[e("strong",[t._v("undefined")]),t._v(" "),e("code",[t._v("Array")]),t._v(" - the updated selected options list")]),t._v(" "),e("td",[t._v("inform parent of changes in selected chips")])]),t._v(" "),e("tr",[e("td",[t._v("update:is-active")]),t._v(" "),e("td",[e("strong",[t._v("undefined")]),t._v(" "),e("code",[t._v("boolean")]),t._v(" - is component active")]),t._v(" "),e("td",[t._v("to keep active state of component in sync")])])])]),t._v(" "),e("h2",{attrs:{id:"slots"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#slots"}},[t._v("#")]),t._v(" Slots")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Name")]),t._v(" "),e("th",[t._v("Description")]),t._v(" "),e("th",[t._v("Bindings")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("pre-input-field")]),t._v(" "),e("td",[t._v("add elements within search but before all other elements. for an example see "),e("a",{attrs:{href:"BaseInput"}},[t._v("BaseInput")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("input-field-addition-before")]),t._v(" "),e("td",[t._v("add elements within search but before all other elements. for an example see "),e("a",{attrs:{href:"BaseInput"}},[t._v("BaseInput")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("input-field-inline-before")]),t._v(" "),e("td",[t._v("a slot to exchange the magnifier icon with other elements")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("input-field-addition-after")]),t._v(" "),e("td",[t._v("for adding elements after input. for an example see "),e("a",{attrs:{href:"BaseChipsInputField"}},[t._v("BaseChipsInputField")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("post-input-field")]),t._v(" "),e("td",[t._v("elements after the actual input element but within the input field container. for an example see "),e("a",{attrs:{href:"BaseChipsInputField"}},[t._v("BaseChipsInputField")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("error-icon")]),t._v(" "),e("td",[t._v("use a custom icon instead of standard error/warning icon. for an example see "),e("a",{attrs:{href:"BaseChipsInputField"}},[t._v("BaseChipsInputField")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("remove-icon")]),t._v(" "),e("td",[t._v("for adding custom input remove icon. for an example see "),e("a",{attrs:{href:"BaseChipsInputField"}},[t._v("BaseChipsInputField")])]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("below-input")]),t._v(" "),e("td",[t._v("below-input slot added to e.g. add drop down")]),t._v(" "),e("td")])])]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"demo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[t._v("#")]),t._v(" Demo")]),t._v(" "),e("p",[t._v("A simple Search Component")]),t._v(" "),e("no-ssr",[e("vue-live",{attrs:{layoutProps:{lang:"vue"},code:'<template>\n  <div class="searchcontainer">\n    <BaseSearch\n      v-model="searchText"\n      label="Search your Entries"\n      placeholder="Search your Entries"\n    />\n    <div class="searchtext">{{ "Your Search Text: " + searchText }}</div>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      searchText: ""\n    };\n  }\n};\n<\/script>\n<style>\n.searchcontainer {\n  background-color: rgb(240, 240, 240);\n  padding: 16px;\n}\n\n.searchtext {\n  margin-top: 16px;\n  padding: 16px;\n  width: 100%;\n  background-color: white;\n}\n</style>\n',requires:{}}})],1),e("p",[t._v("A component with more custom settings. Also demonstrating the different types available.")]),t._v(" "),e("p",[t._v("For slot demonstrations see "),e("a",{attrs:{href:"BaseChipsInput"}},[t._v("BaseChipsInput")]),t._v(" or "),e("a",{attrs:{href:"BaseInput"}},[t._v("BaseInput")]),t._v(".")]),t._v(" "),e("no-ssr",[e("vue-live",{attrs:{layoutProps:{lang:"vue"},code:'<template>\n  <div class="searchcontainer">\n    <BaseSearch\n      v-model="searchText"\n      :type="searchType"\n      :placeholder="placeholder"\n      :show-pre-input-icon="false"\n      label="Advanced Example"\n      class="search"\n    />\n    <div class="searchtext">\n      {{ "Your Search Value: " + JSON.stringify(searchText) }}\n    </div>\n    <div class="buttonrow">\n      <BaseButton\n        :active="searchType === \'text\'"\n        text="text"\n        button-style="row"\n        class="button"\n        @clicked="searchType = \'text\'"\n      />\n      <BaseButton\n        :active="searchType === \'chips\'"\n        text="chips"\n        button-style="row"\n        class="button"\n        @clicked="searchType = \'chips\'"\n      />\n      <BaseButton\n        :active="searchType === \'date\'"\n        text="date"\n        button-style="row"\n        class="button"\n        @clicked="searchType = \'date\'"\n      />\n      <BaseButton\n        :active="searchType === \'daterange\'"\n        text="daterange"\n        button-style="row"\n        class="button"\n        @clicked="searchType = \'daterange\'"\n      />\n    </div>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      searchText: "",\n      searchType: "text"\n    };\n  },\n  computed: {\n    placeholder() {\n      if (this.searchType === "text") {\n        return "Please start typing to discover works and events";\n      }\n      if (this.searchType === "chips") {\n        return "Please type and press enter to add an option";\n      }\n      if (this.searchType.includes("date")) {\n        return "Please select a date";\n      }\n      return "";\n    }\n  }\n};\n<\/script>\n<style>\n.searchcontainer {\n  background-color: rgb(240, 240, 240);\n  padding: 16px;\n}\n\n.searchtext {\n  margin-bottom: 16px;\n  padding: 16px;\n  width: 100%;\n  background-color: white;\n}\n\n.search {\n  margin-bottom: 16px;\n}\n\n.buttonrow {\n  display: flex;\n  flex-direction: row;\n}\n\n.button {\n  margin-right: 16px;\n  width: 120px;\n}\n</style>\n',requires:{}}})],1)],1)}),[],!1,null,null,null);e.default=a.exports}}]);