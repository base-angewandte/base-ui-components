(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{1443:function(e,t,o){"use strict";o.r(t);var r=o(34),n=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"baseadvancedsearch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#baseadvancedsearch"}},[e._v("#")]),e._v(" BaseAdvancedSearch")]),e._v(" "),t("h2",{attrs:{id:"props"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[e._v("#")]),e._v(" Props")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Prop name")]),e._v(" "),t("th",[e._v("Description")]),e._v(" "),t("th",[e._v("Type")]),e._v(" "),t("th",[e._v("Values")]),e._v(" "),t("th",[e._v("Default")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("mode")]),e._v(" "),t("td",[e._v("define the appearance and functionality of the component here."),t("br"),t("strong",[t("code",[e._v("list")])]),e._v(": search offers advanced search with 'filters' to select from drop down, each filter is added"),t("br"),e._v(" as a separate row."),t("br"),t("strong",[t("code",[e._v("form")])]),e._v(": advanced search is displayed as a form below only one single search row. Offers a condensed view"),t("br"),e._v(" of the form within a single scrollable row below main row.")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[t("code",[e._v("list")]),e._v(", "),t("code",[e._v("form")])]),e._v(" "),t("td",[e._v("'list'")])]),e._v(" "),t("tr",[t("td",[e._v("filterList")]),e._v(" "),t("td",[e._v("this variable is just used in mode "),t("code",[e._v("list")]),e._v(", for mode "),t("code",[e._v("form")]),e._v(" leave it empty and use variable "),t("code",[e._v("formFilterList")]),t("br"),e._v(" to provide a list of filters instead."),t("br"),e._v("provide a list of available filters, needs to be an array of objects with the following properties:"),t("br"),t("br"),e._v(" "),t("strong",[e._v("label")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the label of the filter (displayed"),t("br"),e._v(" if not main search) - this prop can be customized by specifying"),t("br"),e._v(" "),t("code",[e._v("labelPropertyName.filter")]),e._v("."),t("br"),e._v(" "),t("strong",[e._v("id")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the identifier of the filter (displayed"),t("br"),e._v(" if not main search) - this prop can be customized by specifying"),t("br"),e._v(" "),t("code",[e._v("identifierPropertyName.filter")]),e._v("."),t("br"),e._v(" "),t("strong",[e._v("type")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the filter type. Possible values: "),t("code",[e._v("text")]),e._v(", "),t("code",[e._v("chips")]),e._v(", "),t("code",[e._v("chipssingle")]),e._v(", "),t("code",[e._v("date")]),e._v(", "),t("code",[e._v("daterange")]),e._v("."),t("br"),e._v(" "),t("strong",[e._v("hidden")]),e._v(" "),t("code",[e._v("boolean")]),e._v(" - filters with this attribute true will be filtered from"),t("br"),e._v(" displayed filter list."),t("br"),e._v(" "),t("strong",[e._v("freetext_allowed")]),e._v(" "),t("code",[e._v("boolean")]),e._v(" - determines if predetermined options from "),t("code",[e._v("options")]),t("br"),e._v(" property are used or autocomplete is used."),t("br"),e._v(" "),t("strong",[e._v("options")]),e._v(" "),t("code",[e._v("Object[]")]),e._v(" - for filter type "),t("code",[e._v("chips")]),e._v(" and "),t("code",[e._v("chipssingle")]),e._v(" the controlled"),t("br"),e._v(" vocabulary options."),t("br"),e._v(" "),t("strong",[e._v("subsets")]),e._v(" "),t("code",[e._v("string[]")]),e._v(" - if a filter of "),t("code",[e._v("type")]),e._v(" 'text' or 'chips' with"),t("br"),e._v(" "),t("code",[e._v("freetext_allowed")]),e._v(" (thus triggering autocomplete) has subordinate filters for which"),t("br"),e._v(" the autosuggest results should also be shown - add the filter identifiers here")]),e._v(" "),t("td",[e._v("array")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("[]")])]),e._v(" "),t("tr",[t("td",[e._v("appliedFilters")]),e._v(" "),t("td",[e._v("this variable is just used in mode "),t("code",[e._v("list")]),e._v(", for mode "),t("code",[e._v("form")]),e._v(" leave it empty and use property "),t("code",[e._v("formFilterValues")]),t("br"),e._v(" to provide values per filter instead."),t("br"),e._v("possibility to set applied filters from outside, for necessary object properties"),t("br"),e._v("see "),t("code",[e._v("filterList")]),e._v(" (except "),t("code",[e._v("options")]),e._v(" - this property is not necessary for applied filters)")]),e._v(" "),t("td",[e._v("array")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("[]")])]),e._v(" "),t("tr",[t("td",[e._v("defaultFilter")]),e._v(" "),t("td",[e._v("in mode "),t("code",[e._v("list")]),e._v(" specify a default value for a filter that is set when none of the"),t("br"),e._v("available filters is selected, should have the following properties:"),t("br"),t("br"),e._v(" "),t("strong",[e._v("label")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the label of the filter (displayed"),t("br"),e._v(" if not main search) - this prop can be customized by specifying"),t("br"),e._v(" "),t("code",[e._v("labelPropertyName.filter")]),e._v("."),t("br"),e._v(" "),t("strong",[e._v("id")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the identifier of the filter (displayed"),t("br"),e._v(" if not main search) - this prop can be customized by specifying"),t("br"),e._v(" "),t("code",[e._v("identifierPropertyName.filter")]),e._v("."),t("br"),e._v(" "),t("strong",[e._v("type")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the filter type. Possible values: "),t("code",[e._v("text")]),e._v(", "),t("code",[e._v("chips")]),e._v(", "),t("code",[e._v("chipssingle")]),e._v(", "),t("code",[e._v("date")]),e._v(", "),t("code",[e._v("daterange")]),e._v("."),t("br"),e._v(" "),t("strong",[e._v("options")]),e._v(" "),t("code",[e._v("Object[]")]),e._v(" - for filter type "),t("code",[e._v("chips")]),e._v(" and "),t("code",[e._v("chipssingle")]),e._v(" the controlled"),t("br"),e._v(" vocabulary options."),t("br"),e._v(" "),t("strong",[e._v("filter_values")]),e._v(" "),t("code",[e._v("Object[], string[], Object")]),e._v(" - the values selected - object for date"),t("br"),e._v(" or array of objects or strings for type "),t("code",[e._v("text")]),e._v(", type "),t("code",[e._v("chips")]),e._v(" and "),t("code",[e._v("chipssingle")]),e._v(","),t("br"),t("br"),e._v(" defaultFilter does not need the property "),t("code",[e._v("subsets")]),e._v(" since results for all filters are"),t("br"),e._v(" shown per default"),t("br"),t("br"),e._v(" this property is not relevant in mode "),t("code",[e._v("form")])]),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{"),t("br"),e._v(" label: 'Fulltext',"),t("br"),e._v(" id: 'default',"),t("br"),e._v(" type: 'text',"),t("br"),e._v(" options: [],"),t("br"),e._v(" filter_values: []"),t("br"),e._v("}")])]),e._v(" "),t("tr",[t("td",[e._v("formFilterList")]),e._v(" "),t("td",[e._v("this variable is just used in mode "),t("code",[e._v("form")]),e._v(", for mode "),t("code",[e._v("list")]),e._v(" leave it empty and use property "),t("code",[e._v("filterList")]),t("br"),e._v(" to provide a list of filters instead."),t("br"),e._v("for mode 'form' provide a specification for the form fields in the form of "),t("a",{attrs:{href:"https://swagger.io/specification/#schema-object",target:"_blank",rel:"noopener noreferrer"}},[e._v("OpenAPi"),t("br"),e._v(" schema object"),t("OutboundLink")],1),e._v("."),t("br"),e._v(" see also "),t("a",{attrs:{href:"BaseForm"}},[e._v("BaseForm")]),e._v(" "),t("code",[e._v("form-field-json")]),e._v(" prop - currently all field types except"),t("br"),e._v(" "),t("code",[e._v("multiline")]),e._v(" and "),t("code",[e._v("chips-below")]),e._v(" and for date/time fields only single date, date range and date time fields"),t("br"),e._v(" are supported. Also field groups are supported but maximum nesting level is 1.")]),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{}")])]),e._v(" "),t("tr",[t("td",[e._v("formFilterValues")]),e._v(" "),t("td",[e._v("this variable is just used in mode "),t("code",[e._v("form")]),e._v(", for mode "),t("code",[e._v("list")]),e._v(" leave it empty and use property "),t("code",[e._v("appliedFilters")]),t("br"),e._v(" to provide values per filter instead."),t("br"),e._v("provide values for the fields specified in "),t("code",[e._v("formFilterList")]),e._v(". Main filter can be filled by adding a "),t("code",[e._v("default")]),e._v(" property.")]),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{}")])]),e._v(" "),t("tr",[t("td",[e._v("formProps")]),e._v(" "),t("td",[e._v("pass props for "),t("a",{attrs:{href:"BaseForm"}},[e._v("BaseForm")]),e._v(" directly via this prop, for example "),t("code",[e._v("autocompleteResults")]),e._v(","),t("br"),e._v(" "),t("code",[e._v("isLoading")]),e._v(" or "),t("code",[e._v("fieldProps")]),e._v(" (except "),t("code",[e._v("valueList")]),e._v(" and "),t("code",[e._v("formFieldJson")]),e._v(" which are passed separately"),t("br"),e._v(" since they are also utilized (and modified) in this component).")]),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{}")])]),e._v(" "),t("tr",[t("td",[e._v("autocompleteResults")]),e._v(" "),t("td",[e._v("provide the component with the fetched autocomplete results"),t("br"),e._v("(drop down options)."),t("br"),e._v("this needs to be an object array with the properties specified in"),t("br"),t("code",[e._v("autocompletePropertyNames")]),e._v(".")]),e._v(" "),t("td",[e._v("array")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("[]")])]),e._v(" "),t("tr",[t("td",[e._v("language")]),e._v(" "),t("td",[e._v("specify a language (ISO 639-1) (used for label if label is language specific object"),t("br"),e._v("e.g. "),t("code",[e._v("{ de: 'xxx', en: 'yyy' }")]),e._v(") or for date display conversion in mode 'form'.")]),e._v(" "),t("td",[e._v("string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("'en'")])]),e._v(" "),t("tr",[t("td",[e._v("isLoadingIndex")]),e._v(" "),t("td",[e._v("set the row loader from outside per row index")]),e._v(" "),t("td",[e._v("number")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("-1")])]),e._v(" "),t("tr",[t("td",[e._v("advancedSearchText")]),e._v(" "),t("td",[e._v("specify informational texts for the component - this needs to be an object with the following"),t("br"),e._v("properties (if you don't want to display any text leave an empty string):"),t("br"),t("br"),e._v(" "),t("strong",[e._v("title")]),e._v(": text shown as first line on the drop-down in filters area for mode "),t("code",[e._v("list")]),e._v("."),t("br"),e._v(" "),t("strong",[e._v("subtext")]),e._v(": text shown as second line on the drop-down in filters area for mode "),t("code",[e._v("list")]),e._v("."),t("br"),e._v(" "),t("strong",[e._v("availableOptions")]),e._v(": text shown with chips options for controlled vocabulary"),t("br"),e._v(" search"),t("code",[e._v("for mode")]),e._v("list"),t("code",[e._v(".<br/> **collapsedDateTime**: for mode")]),e._v("form"),t("code",[e._v(": set the text for the collapsed filter row which is<br/> displayed for date or time values of ranges when only one field is filled. (e.g.")]),e._v("until 12.12.2023"),t("code",[e._v(")<br/> **advancedButtonLabel**: button text displayed for Advanced Search Toggle button for mode")]),e._v("form`."),t("br"),t("br"),e._v(" The values of this object might be plain text or a key for an i18n file.")]),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{"),t("br"),e._v(" title: 'Advanced Search',"),t("br"),e._v(" subtext: 'Select a filter',"),t("br"),e._v(" availableOptions: 'Available options',"),t("br"),t("br"),e._v(" collapsedDateTime: {"),t("br"),e._v(" from: 'from',"),t("br"),e._v(" until: 'until',"),t("br"),e._v(" range: 'to',"),t("br"),e._v(" },"),t("br"),t("br"),e._v(" advancedButtonLabel: 'Advanced Search'"),t("br"),e._v("}")])]),e._v(" "),t("tr",[t("td",[e._v("dropDownInfoTexts")]),e._v(" "),t("td",[e._v("specify informational texts for the drop-down - this needs to be an object with the following"),t("br"),e._v("properties:"),t("br"),t("br"),e._v(" "),t("strong",[e._v("autocompleteNoOptions")]),e._v(": info text shown when autocomplete search does not yield"),t("br"),e._v(" any results."),t("br"),e._v(" "),t("strong",[e._v("autocompleteOngoing")]),e._v(": info text displayed while autocomplete search is ongoing"),t("br"),e._v(" (and no previous results are displayed)."),t("br"),e._v(" "),t("strong",[e._v("autocompleteInitial")]),e._v(": info text shown when user first opens the search"),t("br"),e._v(" component."),t("br"),e._v(" "),t("strong",[e._v("chipsNoOptions")]),e._v(": info text shown when no options for controlled vocabulary search"),t("br"),e._v(" are available (anymore)."),t("br"),e._v(" "),t("strong",[e._v("chipsMaxOptions")]),e._v(": text displayed if more than max number of options that can be"),t("br"),e._v(" displayed are available (configure via prop "),t("code",[e._v("maxNumberControlledOptions")]),e._v(")."),t("br"),e._v(" "),t("strong",[e._v("chipsNoMatch")]),e._v(": text displayed if string in input does not match any options."),t("br"),e._v(" "),t("strong",[e._v("chipsOngoing")]),e._v(": info text shown when controlled vocabulary chips are being"),t("br"),e._v(" fetched."),t("br"),t("br"),e._v(" The values of this object might be plain text or a key for an i18n file"),t("br"),e._v("This prop can be ignored when the "),t("code",[e._v("no-options")]),e._v(" slot is used.")]),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{"),t("br"),e._v(" autocompleteNoOptions: 'No matching options found',"),t("br"),e._v(" autocompleteOngoing: 'Autocomplete is being fetched...',"),t("br"),e._v(" autocompleteInitial: 'Please start typing or select a filter to see options',"),t("br"),e._v(" chipsNoOptions: 'No more options available',"),t("br"),e._v(" chipsMaxOptions: 'Please start typing to see options',"),t("br"),e._v(" chipsNoMatch: 'No matching options were found',"),t("br"),e._v(" chipsOngoing: 'Options are being loaded...'"),t("br"),e._v("}")])]),e._v(" "),t("tr",[t("td",[e._v("placeholder")]),e._v(" "),t("td",[e._v("add a placeholder for the search input, either a string used for every row or"),t("br"),e._v("add separate values for main filter row and already added filters"),t("br"),e._v("properties:"),t("br"),e._v(" "),t("strong",[e._v("filterRow")]),e._v(": for already added filter rows."),t("br"),e._v(" "),t("strong",[e._v("main")]),e._v(": for the primary search input field."),t("br"),t("br"),e._v(" each of these specific placeholders can again be a string or an object with different"),t("br"),e._v(" placeholders for each search type ("),t("code",[e._v("text")]),e._v(", "),t("code",[e._v("chips")]),e._v(", "),t("code",[e._v("date")]),e._v(")")]),e._v(" "),t("td",[e._v("object|string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("() => ({"),t("br"),e._v(" filterRow: 'Add values to your filter',"),t("br"),e._v(" main: 'Search and Discover',"),t("br"),e._v("})")])]),e._v(" "),t("tr",[t("td",[e._v("identifierPropertyName")]),e._v(" "),t("td",[e._v("specify the object property that can be used for identification of filters,"),t("br"),e._v("autocomplete options and controlled vocabulary options."),t("br"),e._v(" Could be a string (used for all the mentioned objects) or an object with the following"),t("br"),e._v(" properties:"),t("br"),e._v(" "),t("strong",[e._v("filter")]),e._v(": identifier property name in filter objects."),t("br"),e._v(" "),t("strong",[e._v("autocompleteOption")]),e._v(": identifier property name in autocomplete option objects."),t("br"),e._v(" "),t("strong",[e._v("controlledVocabularyOption")]),e._v(": identifier property name in controlled"),t("br"),e._v(" vocabulary option objects."),t("br"),e._v(" "),t("strong",[e._v("formInputs")]),e._v(": for mode 'form' in case the form contains chips or autocomplete input fields,"),t("br"),e._v(" the object properties for label and identifier need to be set here (in case they are different"),t("br"),e._v(" from the input components default (e.g. see "),t("a",{attrs:{href:"BaseChipsInput"}},[e._v("BaseChipsInput")]),e._v(" "),t("code",[e._v("identifierPropertyName")]),e._v("))"),t("br"),e._v(" if "),t("code",[e._v("identifierPropertyName")]),e._v(" is also set via "),t("code",[e._v("fieldProps")]),e._v(" the latter is the preferred value."),t("br"),e._v(" Caveat: Please note that the property "),t("code",[e._v("idInternal")]),e._v(" is used for internal handlings and the property"),t("br"),e._v(" might be overwritten")]),e._v(" "),t("td",[e._v("object|string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("() => ({"),t("br"),e._v(" filter: 'id',"),t("br"),e._v(" autocompleteOption: 'id',"),t("br"),e._v(" controlledVocabularyOption: 'id',"),t("br"),e._v(" formInputs: 'source',"),t("br"),e._v("})")])]),e._v(" "),t("tr",[t("td",[e._v("labelPropertyName")]),e._v(" "),t("td",[e._v("specify the object property that should be used for label display of filters,"),t("br"),e._v("autocomplete options and controlled vocabulary options."),t("br"),e._v(" Could be a string (used for all the mentioned objects) or an object with the following"),t("br"),e._v(" properties:"),t("br"),e._v(" "),t("strong",[e._v("filter")]),e._v(": label property name in filter objects."),t("br"),e._v(" "),t("strong",[e._v("autocompleteOption")]),e._v(": label property name in autocomplete option objects."),t("br"),e._v(" "),t("strong",[e._v("controlledVocabularyOption")]),e._v(": label property name in controlled"),t("br"),e._v(" vocabulary option objects."),t("br"),e._v(" "),t("strong",[e._v("formInputs")]),e._v(": for mode 'form' in case the form contains chips or autocomplete input fields,"),t("br"),e._v(" the object properties for label and identifier need to be set here (in case they are different"),t("br"),e._v(" from the input components default (e.g. see "),t("a",{attrs:{href:"BaseChipsInput"}},[e._v("BaseChipsInput")]),e._v(" "),t("code",[e._v("labelPropertyName")]),e._v("))"),t("br"),e._v(" if "),t("code",[e._v("labelPropertyName")]),e._v(" is also set via "),t("code",[e._v("fieldProps")]),e._v(" the latter is the preferred value."),t("br"),e._v(" Caveat: Please note that the property "),t("code",[e._v("labelInternal")]),e._v(" is used for internal handlings and the property"),t("br"),e._v(" might be overwritten")]),e._v(" "),t("td",[e._v("object|string")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("() => ({"),t("br"),e._v(" filter: 'label',"),t("br"),e._v(" autocompleteOption: 'title',"),t("br"),e._v(" controlledVocabularyOption: 'label',"),t("br"),e._v(" formInputs: 'label',"),t("br"),e._v("})")])]),e._v(" "),t("tr",[t("td",[e._v("autocompletePropertyNames")]),e._v(" "),t("td",[e._v("autocomplete results need a label, and id and a data property that contains all the actual"),t("br"),e._v("autocomplete results for that specific category"),t("br"),e._v("TODO: make category optional")]),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{"),t("br"),e._v(" label: 'label',"),t("br"),e._v(" id: 'id',"),t("br"),e._v(" data: 'data'"),t("br"),e._v("}")])]),e._v(" "),t("tr",[t("td",[e._v("assistiveText")]),e._v(" "),t("td",[e._v("this prop gives the option to add assistive text for screen readers for"),t("br"),e._v(" the BaseSearch component."),t("br"),e._v("properties:"),t("br"),t("strong",[e._v("addFilter")]),e._v(": text/label used for add filter icon for mode "),t("code",[e._v("list")]),e._v("."),t("br"),t("strong",[e._v("removeFilter")]),e._v(": text/label used for remove filter icon for mode "),t("code",[e._v("list")]),e._v("."),t("br"),t("strong",[e._v("selectFilterLabel")]),e._v(": label (not visible) used for filter chips input field for mode "),t("code",[e._v("list")]),e._v("."),t("br"),t("strong",[e._v("searchLabel")]),e._v(": label (not visible) used for search input field."),t("br"),t("strong",[e._v("selectedOption")]),e._v(": text read when a selected option is focused (currently only"),t("br"),e._v(" working for type chips with autocomplete (=freetext_allowed))"),t("br"),t("strong",[e._v("loaderActive")]),e._v(": text that is announced when autocomplete results are being fetched (prop"),t("br"),e._v(" "),t("code",[e._v("isLoading")]),e._v(" is set "),t("code",[e._v("true")]),e._v(")"),t("br"),t("strong",[e._v("autocompleteResultsRetrieved")]),e._v(": text announced when autocomplete results are returned."),t("br"),e._v(" use {optionsNumber} and {collectionsNumber} in the string to announce the number of"),t("br"),e._v(" total options and collections found respectively."),t("br"),t("strong",[e._v("autocompleteNoResults")]),e._v(": Text announced when no results were found with a given"),t("br"),e._v(" search string."),t("br"),t("strong",[e._v("autocompleteInitial")]),e._v(": Text announced when no search string was provided for"),t("br"),e._v(" autocomplete."),t("br"),t("strong",[e._v("categoryAnnouncement")]),e._v(": Text announced when a new category is entered in the"),t("br"),e._v(" autocomplete drop down options list with keyboard navigation. string '{label}' will"),t("br"),e._v(" be replaced by the actual specified category label"),t("br"),t("strong",[e._v("optionsAnnouncement")]),e._v(": announced together with category when in category selection"),t("br"),e._v(" mode (after using arrowLeft key on autocomplete input) - to give the user a feeling"),t("br"),e._v(" how many options were found for the announced category. string '{number}' will be"),t("br"),e._v(" replaced by the number of entries in that category."),t("br"),t("strong",[e._v("autocompleteOptionFilledToForm")]),e._v(": text announced when an option was selected from the autocomplete"),t("br"),e._v(" dropdown, and it is filled into the respective form field. (only for mode "),t("code",[e._v("form")]),e._v(")"),t("br"),t("strong",[e._v("advancedButtonDescription")]),e._v(": button description for Advanced Search Toggle button for mode "),t("code",[e._v("form")]),e._v("."),t("br"),e._v(" For accessibility purposes. You may add the string {state} which will be replaced with the respective"),t("br"),e._v(" 'open' and 'close' value specified in "),t("code",[e._v("formState")]),e._v(" (see below). Only relevant for mode "),t("code",[e._v("form")]),e._v("."),t("br"),t("strong",[e._v("formState")]),e._v(": an object with properties "),t("code",[e._v("open")]),e._v(" (text that is read when form is closed and button"),t("br"),e._v(" functionality is to open the form) and "),t("code",[e._v("close")]),e._v(" (text that is read when form is open and button"),t("br"),e._v(" functionality is to close the form). Only relevant for mode "),t("code",[e._v("form")]),e._v("."),t("br"),t("strong",[e._v("removeAllFiltersLabel")]),e._v(": label for the remove icon in the collapsed filter row."),t("br"),e._v(" Only relevant for mode "),t("code",[e._v("form")]),e._v(". For accessibility purposes"),t("br"),t("strong",[e._v("removeFilterValueNotification")]),e._v(": notification that is read by screen readers when a filter"),t("br"),e._v(" value was removed. Add the string {value} to read the filter value that was removed and"),t("br"),e._v(" {label} to read the label of the filter from which the value was removed. Only relevant for mode "),t("code",[e._v("form")]),e._v("."),t("br"),t("strong",[e._v("collapsedFilterRowRemovedNotification")]),e._v(": notification read when the last filter was removed from"),t("br"),e._v(" the collapsed filter row. Or remove row was clicked. Only relevant for mode "),t("code",[e._v("form")]),e._v("."),t("br"),t("strong",[e._v("collapsedAppliedFiltersLabel")]),e._v(": description for the filters in the collapsed filter row."),t("br"),e._v(" Only relevant for mode "),t("code",[e._v("form")]),e._v(". For accessibility purposes."),t("br"),t("strong",[e._v("collapsedBooleanFilterValue")]),e._v(": Set text that should be read for a boolean filter value. You may add"),t("br"),e._v(" the string {label} which will be replaced by the filter label."),t("br"),e._v(" Only relevant for mode "),t("code",[e._v("form")]),e._v(". For accessibility purposes."),t("br"),t("strong",[e._v("collapsedOptionToRemoveSelected")]),e._v(": text read when an option is focused (and thus selected), should"),t("br"),e._v(" announce to the screen reader user that option can now be removed via Backspace or Delete."),t("br"),t("strong",[e._v("results")]),e._v(": provide text that should be announced when the search has"),t("br"),e._v(" yielded results (or not)."),t("br"),t("br"),e._v("Caveat: "),t("code",[e._v("results")]),e._v(" has a watcher attached to trigger the"),t("br"),e._v(" announcement so make sure the property values are reset after filling them"),t("br"),e._v(" by using update:assistive-text or resetting it manually (after a timeout)")]),e._v(" "),t("td",[e._v("object")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("{"),t("br"),e._v(" addFilter: 'Add filter',"),t("br"),e._v(" removeFilter: 'Remove filter',"),t("br"),e._v(" selectFilterLabel: 'Select filter',"),t("br"),e._v(" searchLabel: 'Search for Entries',"),t("br"),e._v(" selectedOption: '',"),t("br"),e._v(" autocompleteLoaderActive: 'loading options.',"),t("br"),e._v(" autocompleteResultsRetrieved: '{optionsNumber} options found in {collectionsNumber} categories.',"),t("br"),e._v(" autocompleteNoResults: 'No results found.',"),t("br"),e._v(" autocompleteInitial: 'Please start typing to see suggestions.',"),t("br"),e._v(" categoryAnnouncement: 'category {label}.',"),t("br"),e._v(" optionsAnnouncement: '{number} options.',"),t("br"),e._v(" autocompleteOptionFilledToForm: 'option {optionLabel} filled to field {fieldLabel}.',"),t("br"),e._v(" advancedButtonDescription: 'Click to {state} advanced search form.',"),t("br"),t("br"),e._v(" formState: {"),t("br"),e._v(" open: 'open',"),t("br"),e._v(" close: 'close',"),t("br"),e._v(" },"),t("br"),t("br"),e._v(" removeAllFiltersLabel: 'Remove all filters.',"),t("br"),e._v(" removeFilterValueNotification: 'Filter value {value} was removed from filter {label}.',"),t("br"),e._v(" collapsedFilterRowRemovedNotification: 'All search filters were reset.',"),t("br"),e._v(" collapsedAppliedFiltersLabel: 'Currently applied Filters',"),t("br"),e._v(" collapsedBooleanFilterValue: 'Filter {label} was set',"),t("br"),e._v(" collapsedOptionToRemoveSelected: 'Press delete or backspace to remove.',"),t("br"),e._v(" results: ''"),t("br"),e._v("}")])]),e._v(" "),t("tr",[t("td",[e._v("applyBoxShadow")]),e._v(" "),t("td",[e._v("if desired the box shadow around the search rows can be deactivated here")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("dateFieldDelay")]),e._v(" "),t("td",[e._v("use this prop to set a delay in ms before date input calendar is displayed")]),e._v(" "),t("td",[e._v("number")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("0")])]),e._v(" "),t("tr",[t("td",[e._v("advancedFormOpen")]),e._v(" "),t("td",[e._v("prop only relevant for mode "),t("code",[e._v("form")]),t("br"),e._v("set advanced search (form) visibility from outside"),t("br"),e._v("this can also be used to not show the advanced search after initial loading")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("true")])]),e._v(" "),t("tr",[t("td",[e._v("highlightAutocompleteMatch")]),e._v(" "),t("td",[e._v("set this flag to "),t("code",[e._v("true")]),e._v(" to highlight autocomplete option characters that match"),t("br"),e._v(" the current search input string")]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])]),e._v(" "),t("tr",[t("td",[e._v("highlightAutocompleteTags")]),e._v(" "),t("td",[e._v("if "),t("code",[e._v("highlightAutocompleteMatch")]),e._v(" is set "),t("code",[e._v("true")]),t("br"),e._v(" provide tag names to style the matched characters"),t("br"),e._v(" (without '<' and '>', e.g. ['b'] for <b>)")]),e._v(" "),t("td",[e._v("array")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("[]")])]),e._v(" "),t("tr",[t("td",[e._v("interpretFormChipsLabelAsHtml")]),e._v(" "),t("td",[e._v("mode "),t("code",[e._v("form")]),e._v(": if necessary selected chip text can be rendered as v-html directive"),t("br"),e._v(" either set this prop "),t("code",[e._v("true")]),e._v(" or "),t("code",[e._v("false")]),t("br"),t("br"),e._v("this will only be applied to chips with an identifier property and of course"),t("br"),e._v(" can only apply to form field field_type "),t("code",[e._v("chips")]),t("br"),t("br"),e._v("if only chips of certain form fields should be rendered as html use prop"),t("br"),e._v(" "),t("code",[e._v("formProps.fieldProps.interpretChipsLabelAsHtml")]),e._v(" or if certain fields should"),t("br"),e._v(" be excluded set this prop to "),t("code",[e._v("true")]),e._v(" and set "),t("code",[e._v("formProps.fieldProps.interpretChipsLabelAsHtml")]),t("br"),e._v(" for that field "),t("code",[e._v("false")])]),e._v(" "),t("td",[e._v("boolean")]),e._v(" "),t("td",[e._v("-")]),e._v(" "),t("td",[e._v("false")])])])]),e._v(" "),t("h2",{attrs:{id:"events"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[e._v("#")]),e._v(" Events")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Event name")]),e._v(" "),t("th",[e._v("Properties")]),e._v(" "),t("th",[e._v("Description")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("search")]),e._v(" "),t("td",[t("strong",[e._v("undefined")]),e._v(" "),t("code",[e._v("Filter[]")]),e._v(" - the updated list of applied filters - last filter in the list is always the main")]),e._v(" "),t("td",[e._v("inform parent that search should be triggered")])]),e._v(" "),t("tr",[t("td",[e._v("fetch-autocomplete")]),e._v(" "),t("td",[t("strong",[e._v("searchString")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the string to autocomplete"),t("br"),t("strong",[e._v("filter")]),e._v(" "),t("code",[e._v("Filter")]),e._v(" - the filter object"),t("br"),t("strong",[e._v("index")]),e._v(" "),t("code",[e._v("number")]),e._v(" - the filter index of all filters (main and applied)")]),e._v(" "),t("td",[e._v("inform parent to fetch autocomplete data for the provided filter")])]),e._v(" "),t("tr",[t("td",[e._v("fetch-form-autocomplete")]),e._v(" "),t("td",[t("strong",[e._v("value")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the string to autocomplete"),t("br"),t("strong",[e._v("name")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the name of the field"),t("br"),t("strong",[e._v("source")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the url to request the data from"),t("br"),t("strong",[e._v("equivalent")]),e._v(" "),t("code",[e._v("?string")]),e._v(" - string specified for related fields. e.g. for contributor roles equivalent is "),t("code",[e._v("contributor")]),t("br"),t("strong",[e._v("parentFields")]),e._v(" "),t("code",[e._v("?string[]")]),e._v(" - in case the autocomplete event originates from a subform the subform id's (field property names) are specified in this array (most nested property last)")]),e._v(" "),t("td",[e._v("event emitted when a form drop down (e.g. chips input field) needs autocomplete")])]),e._v(" "),t("tr",[t("td",[e._v("update:applied-filters")]),e._v(" "),t("td",[t("strong",[e._v("undefined")]),e._v(" "),t("code",[e._v("Filter[]")]),e._v(" - the list of updated applied filters")]),e._v(" "),t("td",[e._v("inform parent of changes in applied filters - event emitted for mode "),t("code",[e._v("list")])])]),e._v(" "),t("tr",[t("td",[e._v("update:form-filter-values")]),e._v(" "),t("td",[t("strong",[e._v("undefined")]),e._v(" "),t("code",[e._v("Object")]),e._v(" - a form filter values object with a property for each filter field - main filter values")]),e._v(" "),t("td",[e._v("inform parent of form filter value changes - event emitted for mode "),t("code",[e._v("form")])])]),e._v(" "),t("tr",[t("td",[e._v("update:advanced-form-open")]),e._v(" "),t("td"),e._v(" "),t("td",[e._v("in mode "),t("code",[e._v("form")]),e._v(" when 'advanced search' button was clicked")])])])]),e._v(" "),t("h2",{attrs:{id:"slots"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#slots"}},[e._v("#")]),e._v(" Slots")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Name")]),e._v(" "),t("th",[e._v("Description")]),e._v(" "),t("th",[e._v("Bindings")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("autocomplete-option")]),e._v(" "),t("td",[e._v("to allow for modification of the autocomplete option")]),e._v(" "),t("td",[t("strong",[e._v("option")]),e._v(" "),t("code",[e._v("Object")]),e._v(" - the option object as specified in the [autocompletePropertyNames.data] array"),t("br"),t("strong",[e._v("collection-id")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the currently active collection as provided in [autocompletePropertyNames.id]")])]),e._v(" "),t("tr",[t("td",[e._v("form-label-addition")]),e._v(" "),t("td",[e._v("all "),t("RouterLink",{attrs:{to:"/components/BaseForm.html#slots"}},[e._v("BaseForm")]),e._v(" slots are available with the prefix 'form-'. For a more detailed description and demonstration refer to "),t("RouterLink",{attrs:{to:"/components/BaseForm.html#slots"}},[e._v("BaseForm")]),e._v(".")],1),e._v(" "),t("td",[t("strong",[e._v("field-name")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the name of the displayed field (for time range fields there is a '-time' suffix added)"),t("br"),t("strong",[e._v("group-names")]),e._v(" "),t("code",[e._v("string[]")]),e._v(" - in case the slot is for a subform (form group) field, "),t("code",[e._v("groupNames")]),e._v(" contains the parent field groups names")])]),e._v(" "),t("tr",[t("td",[e._v("form-pre-input-field")]),e._v(" "),t("td",[e._v("all "),t("RouterLink",{attrs:{to:"/components/BaseForm.html#slots"}},[e._v("BaseForm")]),e._v(" slots are available with the prefix 'form-'. For a more detailed description and demonstration refer to "),t("RouterLink",{attrs:{to:"/components/BaseForm.html#slots"}},[e._v("BaseForm")]),e._v(".")],1),e._v(" "),t("td",[t("strong",[e._v("field-name")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the name of the displayed field (for time range fields there is a '-time' suffix added)"),t("br"),t("strong",[e._v("group-names")]),e._v(" "),t("code",[e._v("string[]")]),e._v(" - in case the slot is for a subform (form group) field, "),t("code",[e._v("groupNames")]),e._v(" contains the parent field groups names")])]),e._v(" "),t("tr",[t("td",[e._v("form-input-field-addition-before")]),e._v(" "),t("td",[e._v("all "),t("RouterLink",{attrs:{to:"/components/BaseForm.html#slots"}},[e._v("BaseForm")]),e._v(" slots are available with the prefix 'form-'. For a more detailed description and demonstration refer to "),t("RouterLink",{attrs:{to:"/components/BaseForm.html#slots"}},[e._v("BaseForm")]),e._v(".")],1),e._v(" "),t("td",[t("strong",[e._v("field-name")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the name of the displayed field (for time range fields there is a '-time' suffix added)"),t("br"),t("strong",[e._v("group-names")]),e._v(" "),t("code",[e._v("string[]")]),e._v(" - in case the slot is for a subform (form group) field, "),t("code",[e._v("groupNames")]),e._v(" contains the parent field groups names")])]),e._v(" "),t("tr",[t("td",[e._v("form-input-field-inline-before")]),e._v(" "),t("td",[e._v("all "),t("RouterLink",{attrs:{to:"/components/BaseForm.html#slots"}},[e._v("BaseForm")]),e._v(" slots are available with the prefix 'form-'. For a more detailed description and demonstration refer to "),t("RouterLink",{attrs:{to:"/components/BaseForm.html#slots"}},[e._v("BaseForm")]),e._v(".")],1),e._v(" "),t("td",[t("strong",[e._v("field-name")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the name of the displayed field (for time range fields there is a '-time' suffix added)"),t("br"),t("strong",[e._v("group-names")]),e._v(" "),t("code",[e._v("string[]")]),e._v(" - in case the slot is for a subform (form group) field, "),t("code",[e._v("groupNames")]),e._v(" contains the parent field groups names")])]),e._v(" "),t("tr",[t("td",[e._v("form-input-field-addition-after")]),e._v(" "),t("td",[e._v("all "),t("RouterLink",{attrs:{to:"/components/BaseForm.html#slots"}},[e._v("BaseForm")]),e._v(" slots are available with the prefix 'form-'. For a more detailed description and demonstration refer to "),t("RouterLink",{attrs:{to:"/components/BaseForm.html#slots"}},[e._v("BaseForm")]),e._v(".")],1),e._v(" "),t("td",[t("strong",[e._v("field-name")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the name of the displayed field (for time range fields there is a '-time' suffix added)"),t("br"),t("strong",[e._v("group-names")]),e._v(" "),t("code",[e._v("string[]")]),e._v(" - in case the slot is for a subform (form group) field, "),t("code",[e._v("groupNames")]),e._v(" contains the parent field groups names")])]),e._v(" "),t("tr",[t("td",[e._v("form-post-input-field")]),e._v(" "),t("td",[e._v("all "),t("RouterLink",{attrs:{to:"/components/BaseForm.html#slots"}},[e._v("BaseForm")]),e._v(" slots are available with the prefix 'form-'. For a more detailed description and demonstration refer to "),t("RouterLink",{attrs:{to:"/components/BaseForm.html#slots"}},[e._v("BaseForm")]),e._v(".")],1),e._v(" "),t("td",[t("strong",[e._v("field-name")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the name of the displayed field (for time range fields there is a '-time' suffix added)"),t("br"),t("strong",[e._v("group-names")]),e._v(" "),t("code",[e._v("string[]")]),e._v(" - in case the slot is for a subform (form group) field, "),t("code",[e._v("groupNames")]),e._v(" contains the parent field groups names")])]),e._v(" "),t("tr",[t("td",[e._v("form-error-icon")]),e._v(" "),t("td",[e._v("all "),t("RouterLink",{attrs:{to:"/components/BaseForm.html#slots"}},[e._v("BaseForm")]),e._v(" slots are available with the prefix 'form-'. For a more detailed description and demonstration refer to "),t("RouterLink",{attrs:{to:"/components/BaseForm.html#slots"}},[e._v("BaseForm")]),e._v(".")],1),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("form-remove-icon")]),e._v(" "),t("td",[e._v("all "),t("RouterLink",{attrs:{to:"/components/BaseForm.html#slots"}},[e._v("BaseForm")]),e._v(" slots are available with the prefix 'form-'. For a more detailed description and demonstration refer to "),t("RouterLink",{attrs:{to:"/components/BaseForm.html#slots"}},[e._v("BaseForm")]),e._v(".")],1),e._v(" "),t("td")]),e._v(" "),t("tr",[t("td",[e._v("form-below-input")]),e._v(" "),t("td",[e._v("all "),t("RouterLink",{attrs:{to:"/components/BaseForm.html#slots"}},[e._v("BaseForm")]),e._v(" slots are available with the prefix 'form-'. For a more detailed description and demonstration refer to "),t("RouterLink",{attrs:{to:"/components/BaseForm.html#slots"}},[e._v("BaseForm")]),e._v(".")],1),e._v(" "),t("td",[t("strong",[e._v("field-name")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the name of the displayed field (for time range fields there is a '-time' suffix added)"),t("br"),t("strong",[e._v("group-names")]),e._v(" "),t("code",[e._v("string[]")]),e._v(" - in case the slot is for a subform (form group) field, "),t("code",[e._v("groupNames")]),e._v(" contains the parent field groups names")])]),e._v(" "),t("tr",[t("td",[e._v("form-drop-down-entry")]),e._v(" "),t("td",[e._v("all "),t("RouterLink",{attrs:{to:"/components/BaseForm.html#slots"}},[e._v("BaseForm")]),e._v(" slots are available with the prefix 'form-'. For a more detailed description and demonstration refer to "),t("RouterLink",{attrs:{to:"/components/BaseForm.html#slots"}},[e._v("BaseForm")]),e._v(".")],1),e._v(" "),t("td",[t("strong",[e._v("field-name")]),e._v(" "),t("code",[e._v("string")]),e._v(" - the name of the displayed field (for time range fields there is a '-time' suffix added)"),t("br"),t("strong",[e._v("group-names")]),e._v(" "),t("code",[e._v("string[]")]),e._v(" - in case the slot is for a subform (form group) field, "),t("code",[e._v("groupNames")]),e._v(" contains the parent field groups names"),t("br"),t("strong",[e._v("option")]),e._v(" "),t("code",[e._v("object")]),e._v(" - the option object")])])])]),e._v(" "),t("hr"),e._v(" "),t("h2",{attrs:{id:"demo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[e._v("#")]),e._v(" Demo")]),e._v(" "),t("p",[e._v("Search functionality with simple freetext and advanced search with 'filters' or a filter form.")]),e._v(" "),t("h4",[e._v("Search mode "),t("code",[e._v("list")])]),e._v(" "),t("p",[e._v("To see autocomplete results try typing 'zentrum'.")]),e._v(" "),t("no-ssr",[t("vue-live",{attrs:{layoutProps:{lang:"vue"},code:'<template>\n  <div class="background">\n    <BaseAdvancedSearch\n      :applied-filters.sync="appliedFilters"\n      :filter-list="filterList"\n      :autocomplete-results="autocompleteResults"\n      :label-property-name="{\n        filter: \'label\',\n        autocompleteOption: \'header\',\n        controlledVocabularyOption: \'label\',\n      }"\n      :identifier-property-name="{\n        filter: \'id\',\n        autocompleteOption: \'id\',\n        controlledVocabularyOption: \'id\',\n      }"\n      :autocomplete-property-names="{\n        label: \'collection\',\n        id: \'id\',\n        data: \'data\',\n      }"\n      :assistive-text="{\n        autocompleteResultsRetrieved:\n          \'{optionsNumber} options found in {collectionsNumber} categories.\',\n        categoryAnnouncement: \'Category {label}.\',\n        controlledVocabularyRetrieved: \'{number} of options available.\',\n        optionsAnnouncement: \'{number} options.\',\n      }"\n      @add-filter="addFilter"\n      @fetch-autocomplete="fetchAutocomplete"\n    />\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      appliedFilters: [],\n      filterList: [\n        {\n          label: "Filter Text",\n          id: "text",\n          type: "text",\n        },\n        {\n          label: "Filter Chips Autocomplete",\n          type: "chips",\n          id: "chips",\n          freetext_allowed: true,\n          subsets: ["chips3", "chips4"],\n        },\n        {\n          label: "Filter Chips Autocomplete 2",\n          id: "chips2",\n          type: "chips",\n          freetext_allowed: true,\n        },\n        {\n          label: "Filter Chips Autocomplete 3",\n          id: "chips3",\n          type: "chips",\n          freetext_allowed: true,\n        },\n        {\n          label: "Filter Chips Autocomplete 4",\n          id: "chips4",\n          type: "chips",\n          freetext_allowed: true,\n        },\n        {\n          label: "Filter Chips Controlled",\n          type: "chips",\n          id: "controlled",\n          freetext_allowed: false,\n          options: [\n            {\n              label: "Test1",\n              id: "Test1",\n            },\n            {\n              label: "Test2",\n              id: "Test2",\n            },\n          ],\n        },\n        {\n          label: "Filter Chips Single",\n          type: "chipssingle",\n          id: "chipssingle",\n          freetext_allowed: false,\n          options: [\n            {\n              label: "Test1",\n              id: "Test1",\n            },\n          ],\n        },\n        {\n          label: "Filter Daterange",\n          id: "daterange",\n          type: "daterange",\n        },\n        {\n          label: "Filter Date",\n          id: "date",\n          type: "date",\n        },\n      ],\n      autocompleteResults: [],\n      potentialResults: [\n        {\n          collection: "Filter Chips Autocomplete",\n          id: "chips",\n          data: [\n            {\n              id: "i:AtyPMbCGvo87shMwRZikwQ",\n              score: 13.0,\n              header: "Zebra - Zentrum für Klassische und Moderne Fotografie",\n              subtext: ["Wien, Austria"],\n            },\n            {\n              id: "i:kK2kZPzffLknjWhuHxU6sa",\n              score: 13.0,\n              header: "Zentrum für Erwachsenenbildung",\n              subtext: ["Strobl"],\n            },\n            {\n              id: "i:QpNo2ZUPzPKM7wJDSy7F4h",\n              score: 13.0,\n              header: "H2 - Zentrum für Gegenwartskunst",\n              subtext: ["Augsburg"],\n            },\n            {\n              id: "i:A6iu4gLU7bGS5kpAE9pTUf",\n              score: 13.0,\n              header:\n                "Tomi Ungerer Museum - Internationales Zentrum für Illustration",\n              subtext: ["Strasbourg"],\n            },\n            {\n              id: "i:FmHikVmyQJuyynSx7NCsNe",\n              score: 13.0,\n              header: "Zentrum für Interdisziplinäre Forschnung",\n              subtext: ["ZIF", "Bielefeld"],\n            },\n            {\n              id: "i:R4YjbtHGNsbKzfwyRDF5XJ",\n              score: 13.0,\n              header: "BrotfabrikGalerie",\n              subtext: ["Zentrum für Kunst & Kultur", "Berlin, AT"],\n            },\n          ],\n        },\n        {\n          collection: "Filter Chips Autocomplete 2",\n          id: "chips2",\n          data: [\n            {\n              id: "i:qQCn2jtewXhKnLVsFaHgk6",\n              score: 13.0,\n              header:\n                "Artist-in-Residenz, Zentrum für Kunst und Medien, Institut für Visuelle Medien, Karlsruhe",\n              subtext: [],\n            },\n            {\n              id: "i:X44M8fjtLCXfYvhVMo4gRP",\n              score: 13.0,\n              header:\n                \'Ankauf "Interactive Plant Growing", Zentrum für Medientechnologie Karlsruhe, Germany\',\n              subtext: [],\n            },\n          ],\n        },\n        {\n          collection: "Filter Chips Autocomplete 3",\n          id: "chips3",\n          data: [\n            {\n              id: "i:qQCn2jtewXhKnLVsFaHgk6",\n              score: 13.0,\n              header:\n                "Artist-in-Residenz, Zentrum für Kunst und Medien, Institut für Visuelle Medien, Karlsruhe",\n              subtext: [],\n            },\n            {\n              id: "i:X44M8fjtLCXfYvhVMo4gRP",\n              score: 13.0,\n              header:\n                \'Ankauf "Interactive Plant Growing", Zentrum für Medientechnologie Karlsruhe, Germany\',\n              subtext: [],\n            },\n            {\n              id: "i:PYqY6pTrmUgZpnRRhmkgY6",\n              score: 13.0,\n              header: "Zentrum für Kunst und Kommunikation",\n              subtext: ["Z.K.K.", "Wien, Austria"],\n            },\n            {\n              id: "i:gpptGbzV9f7uYAmxTjyjMg",\n              score: 13.0,\n              header: "Zentrum für Kunst und Medientechnologie",\n              subtext: ["ZKM", "Karlsruhe"],\n            },\n            {\n              id: "i:Q4AAfWUC6GkHUdRxc7ChxC",\n              score: 13.0,\n              header: "Open Space - Zentrum für Kunstprojekte",\n              subtext: ["Wien, Austria"],\n            },\n            {\n              id: "i:SxX6iZszMJv7M7n54ej6BK",\n              score: 13.0,\n              header: "Zentrum für Literatur- und Kulturforschung Berlin",\n              subtext: [\n                "Geisteswissenschaftliche Zentren Berlin e.V.",\n                "Berlin",\n              ],\n            },\n          ],\n        },\n        {\n          collection: "Filter Chips Autocomplete 4",\n          id: "chips4",\n          data: [\n            {\n              id: "i:qQCn2jtewXhKnLVsFaHgk6",\n              score: 13.0,\n              header:\n                "Artist-in-Residenz, Zentrum für Kunst und Medien, Institut für Visuelle Medien, Karlsruhe",\n              subtext: [],\n            },\n            {\n              id: "i:X44M8fjtLCXfYvhVMo4gRP",\n              score: 13.0,\n              header:\n                \'Ankauf "Interactive Plant Growing", Zentrum für Medientechnologie Karlsruhe, Germany\',\n              subtext: [],\n            },\n          ],\n        },\n      ],\n      timeout: null,\n    };\n  },\n  methods: {\n    addFilter() {\n      alert("Filter added!");\n    },\n    fetchAutocomplete({ searchString, filter }) {\n      if (\n        searchString &&\n        (filter.type === "text" ||\n          (filter.type === "chips" && filter.freetext_allowed))\n      ) {\n        if (this.timeout) {\n          clearTimeout(this.timeout);\n          this.timeout = null;\n        }\n        this.timeout = setTimeout(() => {\n          this.autocompleteResults = this.potentialResults.map(\n            ({ collection, id, data }) => {\n              const filteredResults = data.filter((entry) =>\n                entry.header.toLowerCase().includes(searchString.toLowerCase())\n              );\n              return {\n                collection,\n                id,\n                data: filteredResults,\n              };\n            }\n          );\n        }, 1000);\n      } else {\n        this.autocompleteResults = [];\n      }\n    },\n  },\n};\n<\/script>\n\n<style>\n.background {\n  background: rgb(240, 240, 240);\n  padding: 16px;\n}\n</style>\n',requires:{}}})],1),t("h4",[e._v("Search mode "),t("code",[e._v("form")])]),e._v(" "),t("p",[e._v("adds the filters in the form of a form below the primary search row that can be collapsed.")]),e._v(" "),t("no-ssr",[t("vue-live",{attrs:{layoutProps:{lang:"vue"},code:'<template>\n  <div class="background">\n    <BaseAdvancedSearch\n      mode="form"\n      :form-filter-values.sync="formFilterValues"\n      :form-filter-list="formFilterList"\n      :autocomplete-results="autocompleteResults"\n      :autocomplete-property-names="{\n        id: \'filter_id\',\n        label: \'label\',\n        data: \'data\',\n      }"\n      :label-property-name="{\n        filter: \'label\',\n        autocompleteOption: \'title\',\n        controlledVocabularyOption: \'label\',\n        formInputs: \'title\',\n      }"\n      :identifier-property-name="{\n        filter: \'id\',\n        autocompleteOption: \'id\',\n        controlledVocabularyOption: \'id\',\n        formInputs: \'id\',\n      }"\n      :form-props="{\n        fieldIsLoading: fieldLoading,\n        dropDownLists: formDropDownLists,\n        fieldProps: {\n          title: {\n            addNewChipText: \'Add value\',\n          },\n          weekday_date: {\n            date: {\n              placeholder: {\n                date: \'custom placeholder via field props\',\n              },\n            },\n          },\n        },\n      }"\n      :search-assistive-text="{\n        autocompleteResultsRetrieved:\n          \'{optionsNumber} options found in {collectionsNumber} categories.\',\n        categoryAnnouncement: \'Category {label}.\',\n        autocompleteNoResults: \'No results found.\',\n        optionsAnnouncement: \'{number} options.\',\n        autocompleteInitial: \'Please start typing to see suggestions.\',\n        autocompleteOptionFilledToForm:\n          \'option {optionLabel} filled to field {fieldLabel}.\',\n        removeAllFiltersLabel: \'Remove all filters.\',\n        removeFilterValueNotification:\n          \'Filter value {value} was removed from filter {label}.\',\n        collapsedFilterRowRemovedNotification: \'All search filters were reset.\',\n        collapsedAppliedFiltersLabel: \'Currently applied Filters\',\n        collapsedBooleanFilterValue: \'Filter {label} was set\',\n        collapsedOptionToRemoveSelected: \'Press delete or backspace to remove.\',\n      }"\n      @fetch-autocomplete="fetchAutocomplete"\n      @fetch-form-autocomplete="fetchFormAutcomplete"\n    />\n    <div class="applied-filters-area">\n      Applied Search Filter Values:\n      {{ formFilterValues }}\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      formFilterValues: {\n        default: ["Test"],\n        title: [\n          {\n            title: "A knight in shining armor",\n            id: "testval1",\n          },\n        ],\n        boolean_filter: true,\n      },\n      formFilterList: {\n        title: {\n          type: "array",\n          title: "Title (Chips Input)",\n          "x-attrs": {\n            field_format: "half",\n            field_type: "chips",\n            dynamic_autosuggest: true,\n            allow_unknown_entries: true,\n            source: "/autosuggest/v1/places/",\n            placeholder: "Enter Values here",\n            order: 1,\n          },\n        },\n        boolean_filter: {\n          type: "boolean",\n          title: "A Boolean Filter",\n          "x-attrs": {\n            field_format: "half",\n            field_type: "boolean",\n            placeholder: "Toggle this Value",\n            order: 2,\n          },\n        },\n        number_filter: {\n          type: "integer",\n          title: "An Integer Filter",\n          "x-attrs": {\n            field_format: "half",\n            field_type: "integer",\n            placeholder: "Enter an integer number here",\n            order: 3,\n          },\n        },\n        date_string: {\n          type: "string",\n          title: "String Date",\n          "x-attrs": {\n            field_format: "half",\n            field_type: "date",\n            placeholder: "Select a Date",\n            order: 4,\n          },\n        },\n        url: {\n          type: "array",\n          items: {\n            type: "string",\n          },\n          title: "URL (repeatable)",\n          "x-attrs": {\n            placeholder: "Enter URL",\n            order: 5,\n            field_format: "full",\n            field_type: "text",\n          },\n        },\n        date: {\n          type: "array",\n          items: {\n            type: "object",\n            properties: {\n              date_from: {\n                type: "string",\n              },\n              date_to: {\n                type: "string",\n              },\n            },\n          },\n          title: "Date (repeatable)",\n          "x-attrs": {\n            field_format: "full",\n            field_type: "date",\n            date_format: "day",\n            placeholder: {\n              date: "Enter Date",\n            },\n            order: 6,\n          },\n        },\n        weekday_date: {\n          type: "array",\n          items: {\n            type: "object",\n            properties: {\n              weekday: {\n                type: "object",\n                title: "Weekday",\n                "x-attrs": {\n                  placeholder: "Choose weekday",\n                  field_type: "chips",\n                  dynamic_autosuggest: false,\n                  order: 1,\n                  source: "/autosuggest/v1/places/",\n                  field_format: "full",\n                },\n              },\n              date: {\n                type: "object",\n                properties: {\n                  date_from: {\n                    type: "string",\n                  },\n                  date_to: {\n                    type: "string",\n                  },\n                },\n                title: "Date Range",\n                "x-attrs": {\n                  field_format: "full",\n                  field_type: "date",\n                  placeholder: {\n                    date: "Enter Date",\n                  },\n                  order: 2,\n                },\n              },\n            },\n          },\n          title: "Datum und Ort",\n          "x-attrs": {\n            field_type: "group",\n            show_label: false,\n            order: 7,\n          },\n        },\n      },\n      autocompleteResults: [],\n      formDropDownLists: {\n        title: [\n          {\n            title: "Type 1",\n            id: "bla",\n          },\n        ],\n        place_of_creation: [\n          {\n            title: "Type 1",\n            id: "bla",\n          },\n          {\n            title: "Type 2",\n            id: "bla1",\n          },\n        ],\n        weekday: [\n          {\n            title: "Montag",\n            id: "monday",\n          },\n          {\n            title: "Dienstag",\n            id: "tuesday",\n          },\n          {\n            title: "Mittwoch",\n            id: "wednesday",\n          },\n          {\n            title: "Donnerstag",\n            id: "thursday",\n          },\n          {\n            title: "Freitag",\n            id: "friday",\n          },\n          {\n            title: "Samstag",\n            id: "saturday",\n          },\n          {\n            title: "Sonntag",\n            id: "sunday",\n          },\n        ],\n      },\n      potentialResults: [\n        {\n          filter_id: "title",\n          label: "Titel",\n          data: [\n            {\n              id: "GEsHuzeVJSQovwaGLDZdSQ",\n              title: "Afterthought: Fashion, Feminism and Radical Protest",\n              subtext: [],\n            },\n            {\n              id: "LgCvdxfdNVZgjjobhbnYUv",\n              title: "Les Testaments Trahis",\n              subtext: [],\n            },\n            {\n              id: "gGt7TJFvPxYY6VxRzEexw3",\n              title: "Kreativität lohnt sich – Beweis und Praxistest",\n              subtext: [],\n            },\n            {\n              id: "9E84PwCZrDSPPyJBw5mtgb",\n              title: "praxistest blog",\n              subtext: [],\n            },\n            {\n              id: "Geq3woWMK85o5z9nz3tLiM",\n              title:\n                "USING SOLAR SINTERING TO BUILD INFRASTRUCTURE ON THE MOON LATEST ADVANCEMENTS IN",\n              subtext: [],\n            },\n            {\n              id: "TSu72rc256YMWp3YLmVJrG",\n              title: "Rechtstipp: Werbetestimonial wider Willen?",\n              subtext: [],\n            },\n            {\n              id: "Lgpw3NFGuhNUAczYMpp7xL",\n              title: "Test Blink of an Eye",\n              subtext: [],\n            },\n            {\n              id: "5k3RNU6ATARzb3u8rJSkmX",\n              title:\n                "Vordiplom: Konsolidierung von degradiertem Holz, Testreihe",\n              subtext: ["Interdisziplinäre / projektorientierte Lehrtätigkeit"],\n            },\n            {\n              id: "N2v5F95j9TKpTqwQPexHzZ",\n              title: "Greatest Hits",\n              subtext: [],\n            },\n            {\n              id: "7aYwxD672TT4LFSXD3iVKh",\n              title:\n                "Protest 2.0 - Don\'t believe the Hype: Soziale Computernetzwerke als Gelegenheit und Herausforderung für politischen Aktivismus",\n              subtext: [],\n            },\n            {\n              id: "DE2XmDpUv89YbB2VoatDop",\n              title: "Scores #5. intact bodies / under protest  (Co-ed.)",\n              subtext: [],\n            },\n            {\n              id: "XHy9NiuCJgC8Hh6HUiXPR3",\n              title: "Songs of Social Protest,",\n              subtext: [],\n            },\n            {\n              id: "XUVMdRrW5SeSMQGiWrJsnP",\n              title: "Die lauteste Zeit des Jahres",\n              subtext: [],\n            },\n            {\n              id: "cwHw3Tk5icpEDucMmEx8ge",\n              title:\n                "Fashion, Feminism and Radical Protest: Paths towards a Praxis of Joyful Militancy",\n              subtext: [],\n            },\n            {\n              id: "DbVxxo8NLgT8EKehHT2bsr",\n              title:\n                "LeFo - 1. Testmodul zur Archivierung digitaler Kunst im virtuellen Raum",\n              subtext: ["LeFo"],\n            },\n            {\n              id: "NL7cFgRBupqphh5MBVmwsQ",\n              title:\n                "Symposium “Teststrecke Kunst. Wiener Avantgarden nach 1945”",\n              subtext: [],\n            },\n            {\n              id: "LDRW6wJwvR38NMvxi4d9tt",\n              title:\n                "UNSETTLED – Urban routines, temporalities and contestations",\n              subtext: [],\n            },\n            {\n              id: "AiHq8bMT7iqfj6N6BBDUyJ",\n              title:\n                "I volti dell’amore. Pluralità e intertestualità nel De amore di Andrea Cappellano",\n              subtext: [],\n            },\n            {\n              id: "af9wvTkzN8d8ndD4bqeUGt",\n              title:\n                "Im Zentrum der Aufmerksamkeit – Gesten des Widerstands, Polizei und die Warenförmigkeit von Protest",\n              subtext: [],\n            },\n            {\n              id: "ig9puxcKrGY64mtMR2aHZc",\n              title: "Kunst und Protest",\n              subtext: ["Clevere Strategie oder Störung der Ordnung?"],\n            },\n          ],\n        },\n      ],\n      fieldLoading: "",\n      timeout: null,\n    };\n  },\n  methods: {\n    fetchAutocomplete({ searchString, filter }) {\n      if (\n        searchString &&\n        (filter.type === "text" ||\n          (filter.type === "chips" && filter.freetext_allowed))\n      ) {\n        if (this.timeout) {\n          clearTimeout(this.timeout);\n          this.timeout = null;\n        }\n        this.timeout = setTimeout(() => {\n          // eslint-disable-next-line camelcase\n          this.autocompleteResults = this.potentialResults.map(\n            ({ label, filter_id, data }) => {\n              const filteredResults = data.filter((entry) =>\n                entry.title.toLowerCase().includes(searchString.toLowerCase())\n              );\n              return {\n                label,\n                filter_id,\n                data: filteredResults,\n              };\n            }\n          );\n        }, 1001);\n      } else {\n        this.autocompleteResults = [];\n      }\n    },\n    fetchFormAutcomplete({ value, name }) {\n      if (value) {\n        this.fieldLoading = name;\n        setTimeout(() => {\n          // eslint-disable-next-line camelcase\n          const formAutocompleteResults = this.potentialResults\n            .find((category) => category.filter_id === name)\n            .data.filter((entry) =>\n              entry.title.toLowerCase().includes(value.toLowerCase())\n            );\n          this.$set(this.formDropDownLists, name, formAutocompleteResults);\n          this.fieldLoading = "";\n        }, 1000);\n      } else {\n        this.$set(this.formDropDownLists, name, []);\n      }\n    },\n  },\n};\n<\/script>\n\n<style>\n.background {\n  background: rgb(240, 240, 240);\n  padding: 16px;\n}\n\n.applied-filters-area {\n  padding: 16px;\n}\n</style>\n',requires:{}}})],1)],1)}),[],!1,null,null,null);t.default=n.exports}}]);